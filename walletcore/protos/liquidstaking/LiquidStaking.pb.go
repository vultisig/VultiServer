// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: LiquidStaking.proto

package liquidstaking

import (
	aptos "github.com/vultisig/vultisigner/walletcore/protos/aptos"
	cosmos "github.com/vultisig/vultisigner/walletcore/protos/cosmos"
	ethereum "github.com/vultisig/vultisigner/walletcore/protos/ethereum"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for supported coins for liquid staking
type Coin int32

const (
	// Previously, MATIC.
	Coin_POL  Coin = 0
	Coin_ATOM Coin = 1
	Coin_BNB  Coin = 2
	Coin_APT  Coin = 3
	Coin_ETH  Coin = 4
)

// Enum value maps for Coin.
var (
	Coin_name = map[int32]string{
		0: "POL",
		1: "ATOM",
		2: "BNB",
		3: "APT",
		4: "ETH",
	}
	Coin_value = map[string]int32{
		"POL":  0,
		"ATOM": 1,
		"BNB":  2,
		"APT":  3,
		"ETH":  4,
	}
)

func (x Coin) Enum() *Coin {
	p := new(Coin)
	*p = x
	return p
}

func (x Coin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Coin) Descriptor() protoreflect.EnumDescriptor {
	return file_LiquidStaking_proto_enumTypes[0].Descriptor()
}

func (Coin) Type() protoreflect.EnumType {
	return &file_LiquidStaking_proto_enumTypes[0]
}

func (x Coin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Coin.Descriptor instead.
func (Coin) EnumDescriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{0}
}

// Enum for supported target blockchains for liquid staking
type Blockchain int32

const (
	Blockchain_ETHEREUM Blockchain = 0
	Blockchain_POLYGON  Blockchain = 1
	Blockchain_STRIDE   Blockchain = 2
	Blockchain_BNB_BSC  Blockchain = 3
	Blockchain_APTOS    Blockchain = 4
)

// Enum value maps for Blockchain.
var (
	Blockchain_name = map[int32]string{
		0: "ETHEREUM",
		1: "POLYGON",
		2: "STRIDE",
		3: "BNB_BSC",
		4: "APTOS",
	}
	Blockchain_value = map[string]int32{
		"ETHEREUM": 0,
		"POLYGON":  1,
		"STRIDE":   2,
		"BNB_BSC":  3,
		"APTOS":    4,
	}
)

func (x Blockchain) Enum() *Blockchain {
	p := new(Blockchain)
	*p = x
	return p
}

func (x Blockchain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Blockchain) Descriptor() protoreflect.EnumDescriptor {
	return file_LiquidStaking_proto_enumTypes[1].Descriptor()
}

func (Blockchain) Type() protoreflect.EnumType {
	return &file_LiquidStaking_proto_enumTypes[1]
}

func (x Blockchain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Blockchain.Descriptor instead.
func (Blockchain) EnumDescriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{1}
}

// Enum for supported liquid staking protocols
type Protocol int32

const (
	Protocol_Strader Protocol = 0
	Protocol_Stride  Protocol = 1
	Protocol_Tortuga Protocol = 2
	Protocol_Lido    Protocol = 3
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "Strader",
		1: "Stride",
		2: "Tortuga",
		3: "Lido",
	}
	Protocol_value = map[string]int32{
		"Strader": 0,
		"Stride":  1,
		"Tortuga": 2,
		"Lido":    3,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_LiquidStaking_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_LiquidStaking_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{2}
}

// Enum for status codes to indicate the result of an operation
type StatusCode int32

const (
	StatusCode_OK                                                  StatusCode = 0
	StatusCode_ERROR_ACTION_NOT_SET                                StatusCode = 1
	StatusCode_ERROR_TARGETED_BLOCKCHAIN_NOT_SUPPORTED_BY_PROTOCOL StatusCode = 2
	StatusCode_ERROR_SMART_CONTRACT_ADDRESS_NOT_SET                StatusCode = 3
	StatusCode_ERROR_INPUT_PROTO_DESERIALIZATION                   StatusCode = 4
	StatusCode_ERROR_OPERATION_NOT_SUPPORTED_BY_PROTOCOL           StatusCode = 5
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "OK",
		1: "ERROR_ACTION_NOT_SET",
		2: "ERROR_TARGETED_BLOCKCHAIN_NOT_SUPPORTED_BY_PROTOCOL",
		3: "ERROR_SMART_CONTRACT_ADDRESS_NOT_SET",
		4: "ERROR_INPUT_PROTO_DESERIALIZATION",
		5: "ERROR_OPERATION_NOT_SUPPORTED_BY_PROTOCOL",
	}
	StatusCode_value = map[string]int32{
		"OK":                   0,
		"ERROR_ACTION_NOT_SET": 1,
		"ERROR_TARGETED_BLOCKCHAIN_NOT_SUPPORTED_BY_PROTOCOL": 2,
		"ERROR_SMART_CONTRACT_ADDRESS_NOT_SET":                3,
		"ERROR_INPUT_PROTO_DESERIALIZATION":                   4,
		"ERROR_OPERATION_NOT_SUPPORTED_BY_PROTOCOL":           5,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_LiquidStaking_proto_enumTypes[3].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_LiquidStaking_proto_enumTypes[3]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{3}
}

// Message to represent the status of an operation
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code of the operation
	Code StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=TW.LiquidStaking.Proto.StatusCode" json:"code,omitempty"`
	// Optional error message, populated in case of error
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() StatusCode {
	if x != nil {
		return x.Code
	}
	return StatusCode_OK
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message to represent the asset for staking operations
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Coin to be staked
	StakingToken Coin `protobuf:"varint,1,opt,name=staking_token,json=stakingToken,proto3,enum=TW.LiquidStaking.Proto.Coin" json:"staking_token,omitempty"`
	// Optional, liquid_token to be manipulated: unstake, claim rewards
	LiquidToken string `protobuf:"bytes,2,opt,name=liquid_token,json=liquidToken,proto3" json:"liquid_token,omitempty"`
	// Denom of the asset to be manipulated, required by some liquid staking protocols
	Denom string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	// Address for building the appropriate input
	FromAddress string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetStakingToken() Coin {
	if x != nil {
		return x.StakingToken
	}
	return Coin_POL
}

func (x *Asset) GetLiquidToken() string {
	if x != nil {
		return x.LiquidToken
	}
	return ""
}

func (x *Asset) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Asset) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

// Message to represent a stake operation
type Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset  *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Stake) Reset() {
	*x = Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stake) ProtoMessage() {}

func (x *Stake) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stake.ProtoReflect.Descriptor instead.
func (*Stake) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{2}
}

func (x *Stake) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Stake) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Message to represent an unstake operation
type Unstake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset  *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Some cross-chain protocols propose u to setup a receiver_address
	ReceiverAddress string `protobuf:"bytes,3,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	// Some cross-chain protocols propose u to set the receiver chain_id, it allows auto-claim after probation period
	ReceiverChainId string `protobuf:"bytes,4,opt,name=receiver_chain_id,json=receiverChainId,proto3" json:"receiver_chain_id,omitempty"`
}

func (x *Unstake) Reset() {
	*x = Unstake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unstake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unstake) ProtoMessage() {}

func (x *Unstake) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unstake.ProtoReflect.Descriptor instead.
func (*Unstake) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{3}
}

func (x *Unstake) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Unstake) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Unstake) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *Unstake) GetReceiverChainId() string {
	if x != nil {
		return x.ReceiverChainId
	}
	return ""
}

// Message to represent a withdraw operation
type Withdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset  *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Sometimes withdraw is just the index of a request, amount is already known by the SC
	Idx string `protobuf:"bytes,3,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{4}
}

func (x *Withdraw) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Withdraw) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Withdraw) GetIdx() string {
	if x != nil {
		return x.Idx
	}
	return ""
}

// Message to represent the input for a liquid staking operation
type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Oneof field to specify the action: stake, unstake or withdraw
	//
	// Types that are assignable to Action:
	//
	//	*Input_Stake
	//	*Input_Unstake
	//	*Input_Withdraw
	Action isInput_Action `protobuf_oneof:"action"`
	// Optional smart contract address for EVM-based chains
	SmartContractAddress string `protobuf:"bytes,4,opt,name=smart_contract_address,json=smartContractAddress,proto3" json:"smart_contract_address,omitempty"`
	// Protocol to be used for liquid staking
	Protocol Protocol `protobuf:"varint,5,opt,name=protocol,proto3,enum=TW.LiquidStaking.Proto.Protocol" json:"protocol,omitempty"`
	// Target blockchain for the liquid staking operation
	Blockchain Blockchain `protobuf:"varint,6,opt,name=blockchain,proto3,enum=TW.LiquidStaking.Proto.Blockchain" json:"blockchain,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{5}
}

func (m *Input) GetAction() isInput_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Input) GetStake() *Stake {
	if x, ok := x.GetAction().(*Input_Stake); ok {
		return x.Stake
	}
	return nil
}

func (x *Input) GetUnstake() *Unstake {
	if x, ok := x.GetAction().(*Input_Unstake); ok {
		return x.Unstake
	}
	return nil
}

func (x *Input) GetWithdraw() *Withdraw {
	if x, ok := x.GetAction().(*Input_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *Input) GetSmartContractAddress() string {
	if x != nil {
		return x.SmartContractAddress
	}
	return ""
}

func (x *Input) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_Strader
}

func (x *Input) GetBlockchain() Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return Blockchain_ETHEREUM
}

type isInput_Action interface {
	isInput_Action()
}

type Input_Stake struct {
	Stake *Stake `protobuf:"bytes,1,opt,name=stake,proto3,oneof"`
}

type Input_Unstake struct {
	Unstake *Unstake `protobuf:"bytes,2,opt,name=unstake,proto3,oneof"`
}

type Input_Withdraw struct {
	Withdraw *Withdraw `protobuf:"bytes,3,opt,name=withdraw,proto3,oneof"`
}

func (*Input_Stake) isInput_Action() {}

func (*Input_Unstake) isInput_Action() {}

func (*Input_Withdraw) isInput_Action() {}

// Message to represent the output of a liquid staking operation
type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the liquid staking operation
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Unsigned transaction input - needs to be completed and signed
	//
	// Types that are assignable to SigningInputOneof:
	//
	//	*Output_Ethereum
	//	*Output_Cosmos
	//	*Output_Aptos
	SigningInputOneof isOutput_SigningInputOneof `protobuf_oneof:"signing_input_oneof"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LiquidStaking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_LiquidStaking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_LiquidStaking_proto_rawDescGZIP(), []int{6}
}

func (x *Output) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Output) GetSigningInputOneof() isOutput_SigningInputOneof {
	if m != nil {
		return m.SigningInputOneof
	}
	return nil
}

func (x *Output) GetEthereum() *ethereum.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*Output_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *Output) GetCosmos() *cosmos.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*Output_Cosmos); ok {
		return x.Cosmos
	}
	return nil
}

func (x *Output) GetAptos() *aptos.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*Output_Aptos); ok {
		return x.Aptos
	}
	return nil
}

type isOutput_SigningInputOneof interface {
	isOutput_SigningInputOneof()
}

type Output_Ethereum struct {
	Ethereum *ethereum.SigningInput `protobuf:"bytes,2,opt,name=ethereum,proto3,oneof"`
}

type Output_Cosmos struct {
	Cosmos *cosmos.SigningInput `protobuf:"bytes,3,opt,name=cosmos,proto3,oneof"`
}

type Output_Aptos struct {
	Aptos *aptos.SigningInput `protobuf:"bytes,4,opt,name=aptos,proto3,oneof"`
}

func (*Output_Ethereum) isOutput_SigningInputOneof() {}

func (*Output_Cosmos) isOutput_SigningInputOneof() {}

func (*Output_Aptos) isOutput_SigningInputOneof() {}

var File_LiquidStaking_proto protoreflect.FileDescriptor

var file_LiquidStaking_proto_rawDesc = []byte{
	0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x41,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x54, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x07, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x78, 0x22, 0xfd,
	0x02, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x42, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85,
	0x02, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x70, 0x74,
	0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x34, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x42, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50,
	0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c, 0x59,
	0x47, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x44, 0x45, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4e, 0x42, 0x5f, 0x42, 0x53, 0x43, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x50, 0x54, 0x4f, 0x53, 0x10, 0x04, 0x2a, 0x3a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x61, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x69, 0x64, 0x6f, 0x10, 0x03, 0x2a, 0xe7, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44,
	0x45, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x2d, 0x0a, 0x29, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x05, 0x42,
	0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a,
	0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_LiquidStaking_proto_rawDescOnce sync.Once
	file_LiquidStaking_proto_rawDescData = file_LiquidStaking_proto_rawDesc
)

func file_LiquidStaking_proto_rawDescGZIP() []byte {
	file_LiquidStaking_proto_rawDescOnce.Do(func() {
		file_LiquidStaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_LiquidStaking_proto_rawDescData)
	})
	return file_LiquidStaking_proto_rawDescData
}

var file_LiquidStaking_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_LiquidStaking_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_LiquidStaking_proto_goTypes = []interface{}{
	(Coin)(0),                     // 0: TW.LiquidStaking.Proto.Coin
	(Blockchain)(0),               // 1: TW.LiquidStaking.Proto.Blockchain
	(Protocol)(0),                 // 2: TW.LiquidStaking.Proto.Protocol
	(StatusCode)(0),               // 3: TW.LiquidStaking.Proto.StatusCode
	(*Status)(nil),                // 4: TW.LiquidStaking.Proto.Status
	(*Asset)(nil),                 // 5: TW.LiquidStaking.Proto.Asset
	(*Stake)(nil),                 // 6: TW.LiquidStaking.Proto.Stake
	(*Unstake)(nil),               // 7: TW.LiquidStaking.Proto.Unstake
	(*Withdraw)(nil),              // 8: TW.LiquidStaking.Proto.Withdraw
	(*Input)(nil),                 // 9: TW.LiquidStaking.Proto.Input
	(*Output)(nil),                // 10: TW.LiquidStaking.Proto.Output
	(*ethereum.SigningInput)(nil), // 11: TW.Ethereum.Proto.SigningInput
	(*cosmos.SigningInput)(nil),   // 12: TW.Cosmos.Proto.SigningInput
	(*aptos.SigningInput)(nil),    // 13: TW.Aptos.Proto.SigningInput
}
var file_LiquidStaking_proto_depIdxs = []int32{
	3,  // 0: TW.LiquidStaking.Proto.Status.code:type_name -> TW.LiquidStaking.Proto.StatusCode
	0,  // 1: TW.LiquidStaking.Proto.Asset.staking_token:type_name -> TW.LiquidStaking.Proto.Coin
	5,  // 2: TW.LiquidStaking.Proto.Stake.asset:type_name -> TW.LiquidStaking.Proto.Asset
	5,  // 3: TW.LiquidStaking.Proto.Unstake.asset:type_name -> TW.LiquidStaking.Proto.Asset
	5,  // 4: TW.LiquidStaking.Proto.Withdraw.asset:type_name -> TW.LiquidStaking.Proto.Asset
	6,  // 5: TW.LiquidStaking.Proto.Input.stake:type_name -> TW.LiquidStaking.Proto.Stake
	7,  // 6: TW.LiquidStaking.Proto.Input.unstake:type_name -> TW.LiquidStaking.Proto.Unstake
	8,  // 7: TW.LiquidStaking.Proto.Input.withdraw:type_name -> TW.LiquidStaking.Proto.Withdraw
	2,  // 8: TW.LiquidStaking.Proto.Input.protocol:type_name -> TW.LiquidStaking.Proto.Protocol
	1,  // 9: TW.LiquidStaking.Proto.Input.blockchain:type_name -> TW.LiquidStaking.Proto.Blockchain
	4,  // 10: TW.LiquidStaking.Proto.Output.status:type_name -> TW.LiquidStaking.Proto.Status
	11, // 11: TW.LiquidStaking.Proto.Output.ethereum:type_name -> TW.Ethereum.Proto.SigningInput
	12, // 12: TW.LiquidStaking.Proto.Output.cosmos:type_name -> TW.Cosmos.Proto.SigningInput
	13, // 13: TW.LiquidStaking.Proto.Output.aptos:type_name -> TW.Aptos.Proto.SigningInput
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_LiquidStaking_proto_init() }
func file_LiquidStaking_proto_init() {
	if File_LiquidStaking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_LiquidStaking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LiquidStaking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LiquidStaking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LiquidStaking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unstake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LiquidStaking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LiquidStaking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LiquidStaking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_LiquidStaking_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Input_Stake)(nil),
		(*Input_Unstake)(nil),
		(*Input_Withdraw)(nil),
	}
	file_LiquidStaking_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Output_Ethereum)(nil),
		(*Output_Cosmos)(nil),
		(*Output_Aptos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_LiquidStaking_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_LiquidStaking_proto_goTypes,
		DependencyIndexes: file_LiquidStaking_proto_depIdxs,
		EnumInfos:         file_LiquidStaking_proto_enumTypes,
		MessageInfos:      file_LiquidStaking_proto_msgTypes,
	}.Build()
	File_LiquidStaking_proto = out.File
	file_LiquidStaking_proto_rawDesc = nil
	file_LiquidStaking_proto_goTypes = nil
	file_LiquidStaking_proto_depIdxs = nil
}
