// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: IoTeX.proto

package iotex

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A transfer
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount (as string)
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Destination address
	Recipient string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Payload data
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *Transfer) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// A Staking message
type Staking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the payload message
	//
	// Types that are assignable to Message:
	//
	//	*Staking_StakeCreate
	//	*Staking_StakeUnstake
	//	*Staking_StakeWithdraw
	//	*Staking_StakeAddDeposit
	//	*Staking_StakeRestake
	//	*Staking_StakeChangeCandidate
	//	*Staking_StakeTransferOwnership
	//	*Staking_CandidateRegister_
	//	*Staking_CandidateUpdate
	Message isStaking_Message `protobuf_oneof:"message"`
}

func (x *Staking) Reset() {
	*x = Staking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking) ProtoMessage() {}

func (x *Staking) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking.ProtoReflect.Descriptor instead.
func (*Staking) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1}
}

func (m *Staking) GetMessage() isStaking_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Staking) GetStakeCreate() *Staking_Create {
	if x, ok := x.GetMessage().(*Staking_StakeCreate); ok {
		return x.StakeCreate
	}
	return nil
}

func (x *Staking) GetStakeUnstake() *Staking_Reclaim {
	if x, ok := x.GetMessage().(*Staking_StakeUnstake); ok {
		return x.StakeUnstake
	}
	return nil
}

func (x *Staking) GetStakeWithdraw() *Staking_Reclaim {
	if x, ok := x.GetMessage().(*Staking_StakeWithdraw); ok {
		return x.StakeWithdraw
	}
	return nil
}

func (x *Staking) GetStakeAddDeposit() *Staking_AddDeposit {
	if x, ok := x.GetMessage().(*Staking_StakeAddDeposit); ok {
		return x.StakeAddDeposit
	}
	return nil
}

func (x *Staking) GetStakeRestake() *Staking_Restake {
	if x, ok := x.GetMessage().(*Staking_StakeRestake); ok {
		return x.StakeRestake
	}
	return nil
}

func (x *Staking) GetStakeChangeCandidate() *Staking_ChangeCandidate {
	if x, ok := x.GetMessage().(*Staking_StakeChangeCandidate); ok {
		return x.StakeChangeCandidate
	}
	return nil
}

func (x *Staking) GetStakeTransferOwnership() *Staking_TransferOwnership {
	if x, ok := x.GetMessage().(*Staking_StakeTransferOwnership); ok {
		return x.StakeTransferOwnership
	}
	return nil
}

func (x *Staking) GetCandidateRegister() *Staking_CandidateRegister {
	if x, ok := x.GetMessage().(*Staking_CandidateRegister_); ok {
		return x.CandidateRegister
	}
	return nil
}

func (x *Staking) GetCandidateUpdate() *Staking_CandidateBasicInfo {
	if x, ok := x.GetMessage().(*Staking_CandidateUpdate); ok {
		return x.CandidateUpdate
	}
	return nil
}

type isStaking_Message interface {
	isStaking_Message()
}

type Staking_StakeCreate struct {
	StakeCreate *Staking_Create `protobuf:"bytes,1,opt,name=stakeCreate,proto3,oneof"`
}

type Staking_StakeUnstake struct {
	StakeUnstake *Staking_Reclaim `protobuf:"bytes,2,opt,name=stakeUnstake,proto3,oneof"`
}

type Staking_StakeWithdraw struct {
	StakeWithdraw *Staking_Reclaim `protobuf:"bytes,3,opt,name=stakeWithdraw,proto3,oneof"`
}

type Staking_StakeAddDeposit struct {
	StakeAddDeposit *Staking_AddDeposit `protobuf:"bytes,4,opt,name=stakeAddDeposit,proto3,oneof"`
}

type Staking_StakeRestake struct {
	StakeRestake *Staking_Restake `protobuf:"bytes,5,opt,name=stakeRestake,proto3,oneof"`
}

type Staking_StakeChangeCandidate struct {
	StakeChangeCandidate *Staking_ChangeCandidate `protobuf:"bytes,6,opt,name=stakeChangeCandidate,proto3,oneof"`
}

type Staking_StakeTransferOwnership struct {
	StakeTransferOwnership *Staking_TransferOwnership `protobuf:"bytes,7,opt,name=stakeTransferOwnership,proto3,oneof"`
}

type Staking_CandidateRegister_ struct {
	CandidateRegister *Staking_CandidateRegister `protobuf:"bytes,8,opt,name=candidateRegister,proto3,oneof"`
}

type Staking_CandidateUpdate struct {
	CandidateUpdate *Staking_CandidateBasicInfo `protobuf:"bytes,9,opt,name=candidateUpdate,proto3,oneof"`
}

func (*Staking_StakeCreate) isStaking_Message() {}

func (*Staking_StakeUnstake) isStaking_Message() {}

func (*Staking_StakeWithdraw) isStaking_Message() {}

func (*Staking_StakeAddDeposit) isStaking_Message() {}

func (*Staking_StakeRestake) isStaking_Message() {}

func (*Staking_StakeChangeCandidate) isStaking_Message() {}

func (*Staking_StakeTransferOwnership) isStaking_Message() {}

func (*Staking_CandidateRegister_) isStaking_Message() {}

func (*Staking_CandidateUpdate) isStaking_Message() {}

// Arbitrary contract call
type ContractCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// contract address
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	// payload data
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ContractCall) Reset() {
	*x = ContractCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCall) ProtoMessage() {}

func (x *ContractCall) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCall.ProtoReflect.Descriptor instead.
func (*ContractCall) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{2}
}

func (x *ContractCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ContractCall) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ContractCall) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction version
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Nonce (should be larger than in the last transaction of the account)
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Limit for the gas used
	GasLimit uint64 `protobuf:"varint,3,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	// Gas price
	GasPrice string `protobuf:"bytes,4,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	// The chain id of blockchain
	ChainID uint32 `protobuf:"varint,5,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,6,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	// Payload transfer
	//
	// Types that are assignable to Action:
	//
	//	*SigningInput_Transfer
	//	*SigningInput_Call
	//	*SigningInput_StakeCreate
	//	*SigningInput_StakeUnstake
	//	*SigningInput_StakeWithdraw
	//	*SigningInput_StakeAddDeposit
	//	*SigningInput_StakeRestake
	//	*SigningInput_StakeChangeCandidate
	//	*SigningInput_StakeTransferOwnership
	//	*SigningInput_CandidateRegister
	//	*SigningInput_CandidateUpdate
	Action isSigningInput_Action `protobuf_oneof:"action"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{3}
}

func (x *SigningInput) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SigningInput) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SigningInput) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SigningInput) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *SigningInput) GetChainID() uint32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (m *SigningInput) GetAction() isSigningInput_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *SigningInput) GetTransfer() *Transfer {
	if x, ok := x.GetAction().(*SigningInput_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *SigningInput) GetCall() *ContractCall {
	if x, ok := x.GetAction().(*SigningInput_Call); ok {
		return x.Call
	}
	return nil
}

func (x *SigningInput) GetStakeCreate() *Staking_Create {
	if x, ok := x.GetAction().(*SigningInput_StakeCreate); ok {
		return x.StakeCreate
	}
	return nil
}

func (x *SigningInput) GetStakeUnstake() *Staking_Reclaim {
	if x, ok := x.GetAction().(*SigningInput_StakeUnstake); ok {
		return x.StakeUnstake
	}
	return nil
}

func (x *SigningInput) GetStakeWithdraw() *Staking_Reclaim {
	if x, ok := x.GetAction().(*SigningInput_StakeWithdraw); ok {
		return x.StakeWithdraw
	}
	return nil
}

func (x *SigningInput) GetStakeAddDeposit() *Staking_AddDeposit {
	if x, ok := x.GetAction().(*SigningInput_StakeAddDeposit); ok {
		return x.StakeAddDeposit
	}
	return nil
}

func (x *SigningInput) GetStakeRestake() *Staking_Restake {
	if x, ok := x.GetAction().(*SigningInput_StakeRestake); ok {
		return x.StakeRestake
	}
	return nil
}

func (x *SigningInput) GetStakeChangeCandidate() *Staking_ChangeCandidate {
	if x, ok := x.GetAction().(*SigningInput_StakeChangeCandidate); ok {
		return x.StakeChangeCandidate
	}
	return nil
}

func (x *SigningInput) GetStakeTransferOwnership() *Staking_TransferOwnership {
	if x, ok := x.GetAction().(*SigningInput_StakeTransferOwnership); ok {
		return x.StakeTransferOwnership
	}
	return nil
}

func (x *SigningInput) GetCandidateRegister() *Staking_CandidateRegister {
	if x, ok := x.GetAction().(*SigningInput_CandidateRegister); ok {
		return x.CandidateRegister
	}
	return nil
}

func (x *SigningInput) GetCandidateUpdate() *Staking_CandidateBasicInfo {
	if x, ok := x.GetAction().(*SigningInput_CandidateUpdate); ok {
		return x.CandidateUpdate
	}
	return nil
}

type isSigningInput_Action interface {
	isSigningInput_Action()
}

type SigningInput_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,10,opt,name=transfer,proto3,oneof"`
}

type SigningInput_Call struct {
	Call *ContractCall `protobuf:"bytes,12,opt,name=call,proto3,oneof"`
}

type SigningInput_StakeCreate struct {
	// Native staking
	StakeCreate *Staking_Create `protobuf:"bytes,40,opt,name=stakeCreate,proto3,oneof"`
}

type SigningInput_StakeUnstake struct {
	StakeUnstake *Staking_Reclaim `protobuf:"bytes,41,opt,name=stakeUnstake,proto3,oneof"`
}

type SigningInput_StakeWithdraw struct {
	StakeWithdraw *Staking_Reclaim `protobuf:"bytes,42,opt,name=stakeWithdraw,proto3,oneof"`
}

type SigningInput_StakeAddDeposit struct {
	StakeAddDeposit *Staking_AddDeposit `protobuf:"bytes,43,opt,name=stakeAddDeposit,proto3,oneof"`
}

type SigningInput_StakeRestake struct {
	StakeRestake *Staking_Restake `protobuf:"bytes,44,opt,name=stakeRestake,proto3,oneof"`
}

type SigningInput_StakeChangeCandidate struct {
	StakeChangeCandidate *Staking_ChangeCandidate `protobuf:"bytes,45,opt,name=stakeChangeCandidate,proto3,oneof"`
}

type SigningInput_StakeTransferOwnership struct {
	StakeTransferOwnership *Staking_TransferOwnership `protobuf:"bytes,46,opt,name=stakeTransferOwnership,proto3,oneof"`
}

type SigningInput_CandidateRegister struct {
	CandidateRegister *Staking_CandidateRegister `protobuf:"bytes,47,opt,name=candidateRegister,proto3,oneof"`
}

type SigningInput_CandidateUpdate struct {
	CandidateUpdate *Staking_CandidateBasicInfo `protobuf:"bytes,48,opt,name=candidateUpdate,proto3,oneof"`
}

func (*SigningInput_Transfer) isSigningInput_Action() {}

func (*SigningInput_Call) isSigningInput_Action() {}

func (*SigningInput_StakeCreate) isSigningInput_Action() {}

func (*SigningInput_StakeUnstake) isSigningInput_Action() {}

func (*SigningInput_StakeWithdraw) isSigningInput_Action() {}

func (*SigningInput_StakeAddDeposit) isSigningInput_Action() {}

func (*SigningInput_StakeRestake) isSigningInput_Action() {}

func (*SigningInput_StakeChangeCandidate) isSigningInput_Action() {}

func (*SigningInput_StakeTransferOwnership) isSigningInput_Action() {}

func (*SigningInput_CandidateRegister) isSigningInput_Action() {}

func (*SigningInput_CandidateUpdate) isSigningInput_Action() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed and encoded Action bytes
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Signed Action hash
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{4}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// An Action structure
// Used internally
type ActionCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version number
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Nonce (should be larger than in the last transaction of the account)
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Gas limit
	GasLimit uint64 `protobuf:"varint,3,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	// Gas price
	GasPrice string `protobuf:"bytes,4,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	// Chain ID
	ChainID uint32 `protobuf:"varint,5,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// action payload
	//
	// Types that are assignable to Action:
	//
	//	*ActionCore_Transfer
	//	*ActionCore_Execution
	//	*ActionCore_StakeCreate
	//	*ActionCore_StakeUnstake
	//	*ActionCore_StakeWithdraw
	//	*ActionCore_StakeAddDeposit
	//	*ActionCore_StakeRestake
	//	*ActionCore_StakeChangeCandidate
	//	*ActionCore_StakeTransferOwnership
	//	*ActionCore_CandidateRegister
	//	*ActionCore_CandidateUpdate
	Action isActionCore_Action `protobuf_oneof:"action"`
}

func (x *ActionCore) Reset() {
	*x = ActionCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCore) ProtoMessage() {}

func (x *ActionCore) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCore.ProtoReflect.Descriptor instead.
func (*ActionCore) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{5}
}

func (x *ActionCore) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ActionCore) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ActionCore) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ActionCore) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *ActionCore) GetChainID() uint32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (m *ActionCore) GetAction() isActionCore_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionCore) GetTransfer() *Transfer {
	if x, ok := x.GetAction().(*ActionCore_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ActionCore) GetExecution() *ContractCall {
	if x, ok := x.GetAction().(*ActionCore_Execution); ok {
		return x.Execution
	}
	return nil
}

func (x *ActionCore) GetStakeCreate() *Staking_Create {
	if x, ok := x.GetAction().(*ActionCore_StakeCreate); ok {
		return x.StakeCreate
	}
	return nil
}

func (x *ActionCore) GetStakeUnstake() *Staking_Reclaim {
	if x, ok := x.GetAction().(*ActionCore_StakeUnstake); ok {
		return x.StakeUnstake
	}
	return nil
}

func (x *ActionCore) GetStakeWithdraw() *Staking_Reclaim {
	if x, ok := x.GetAction().(*ActionCore_StakeWithdraw); ok {
		return x.StakeWithdraw
	}
	return nil
}

func (x *ActionCore) GetStakeAddDeposit() *Staking_AddDeposit {
	if x, ok := x.GetAction().(*ActionCore_StakeAddDeposit); ok {
		return x.StakeAddDeposit
	}
	return nil
}

func (x *ActionCore) GetStakeRestake() *Staking_Restake {
	if x, ok := x.GetAction().(*ActionCore_StakeRestake); ok {
		return x.StakeRestake
	}
	return nil
}

func (x *ActionCore) GetStakeChangeCandidate() *Staking_ChangeCandidate {
	if x, ok := x.GetAction().(*ActionCore_StakeChangeCandidate); ok {
		return x.StakeChangeCandidate
	}
	return nil
}

func (x *ActionCore) GetStakeTransferOwnership() *Staking_TransferOwnership {
	if x, ok := x.GetAction().(*ActionCore_StakeTransferOwnership); ok {
		return x.StakeTransferOwnership
	}
	return nil
}

func (x *ActionCore) GetCandidateRegister() *Staking_CandidateRegister {
	if x, ok := x.GetAction().(*ActionCore_CandidateRegister); ok {
		return x.CandidateRegister
	}
	return nil
}

func (x *ActionCore) GetCandidateUpdate() *Staking_CandidateBasicInfo {
	if x, ok := x.GetAction().(*ActionCore_CandidateUpdate); ok {
		return x.CandidateUpdate
	}
	return nil
}

type isActionCore_Action interface {
	isActionCore_Action()
}

type ActionCore_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,10,opt,name=transfer,proto3,oneof"`
}

type ActionCore_Execution struct {
	Execution *ContractCall `protobuf:"bytes,12,opt,name=execution,proto3,oneof"`
}

type ActionCore_StakeCreate struct {
	// Native staking
	StakeCreate *Staking_Create `protobuf:"bytes,40,opt,name=stakeCreate,proto3,oneof"`
}

type ActionCore_StakeUnstake struct {
	StakeUnstake *Staking_Reclaim `protobuf:"bytes,41,opt,name=stakeUnstake,proto3,oneof"`
}

type ActionCore_StakeWithdraw struct {
	StakeWithdraw *Staking_Reclaim `protobuf:"bytes,42,opt,name=stakeWithdraw,proto3,oneof"`
}

type ActionCore_StakeAddDeposit struct {
	StakeAddDeposit *Staking_AddDeposit `protobuf:"bytes,43,opt,name=stakeAddDeposit,proto3,oneof"`
}

type ActionCore_StakeRestake struct {
	StakeRestake *Staking_Restake `protobuf:"bytes,44,opt,name=stakeRestake,proto3,oneof"`
}

type ActionCore_StakeChangeCandidate struct {
	StakeChangeCandidate *Staking_ChangeCandidate `protobuf:"bytes,45,opt,name=stakeChangeCandidate,proto3,oneof"`
}

type ActionCore_StakeTransferOwnership struct {
	StakeTransferOwnership *Staking_TransferOwnership `protobuf:"bytes,46,opt,name=stakeTransferOwnership,proto3,oneof"`
}

type ActionCore_CandidateRegister struct {
	CandidateRegister *Staking_CandidateRegister `protobuf:"bytes,47,opt,name=candidateRegister,proto3,oneof"`
}

type ActionCore_CandidateUpdate struct {
	CandidateUpdate *Staking_CandidateBasicInfo `protobuf:"bytes,48,opt,name=candidateUpdate,proto3,oneof"`
}

func (*ActionCore_Transfer) isActionCore_Action() {}

func (*ActionCore_Execution) isActionCore_Action() {}

func (*ActionCore_StakeCreate) isActionCore_Action() {}

func (*ActionCore_StakeUnstake) isActionCore_Action() {}

func (*ActionCore_StakeWithdraw) isActionCore_Action() {}

func (*ActionCore_StakeAddDeposit) isActionCore_Action() {}

func (*ActionCore_StakeRestake) isActionCore_Action() {}

func (*ActionCore_StakeChangeCandidate) isActionCore_Action() {}

func (*ActionCore_StakeTransferOwnership) isActionCore_Action() {}

func (*ActionCore_CandidateRegister) isActionCore_Action() {}

func (*ActionCore_CandidateUpdate) isActionCore_Action() {}

// Signed Action
// Used internally
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action details
	Core *ActionCore `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	// public key
	SenderPubKey []byte `protobuf:"bytes,2,opt,name=senderPubKey,proto3" json:"senderPubKey,omitempty"`
	// the signature
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{6}
}

func (x *Action) GetCore() *ActionCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *Action) GetSenderPubKey() []byte {
	if x != nil {
		return x.SenderPubKey
	}
	return nil
}

func (x *Action) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// create stake
type Staking_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// validator name
	CandidateName string `protobuf:"bytes,1,opt,name=candidateName,proto3" json:"candidateName,omitempty"`
	// amount to be staked
	StakedAmount string `protobuf:"bytes,2,opt,name=stakedAmount,proto3" json:"stakedAmount,omitempty"`
	// duration
	StakedDuration uint32 `protobuf:"varint,3,opt,name=stakedDuration,proto3" json:"stakedDuration,omitempty"`
	// auto-restake
	AutoStake bool `protobuf:"varint,4,opt,name=autoStake,proto3" json:"autoStake,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_Create) Reset() {
	*x = Staking_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Create) ProtoMessage() {}

func (x *Staking_Create) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Create.ProtoReflect.Descriptor instead.
func (*Staking_Create) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Staking_Create) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *Staking_Create) GetStakedAmount() string {
	if x != nil {
		return x.StakedAmount
	}
	return ""
}

func (x *Staking_Create) GetStakedDuration() uint32 {
	if x != nil {
		return x.StakedDuration
	}
	return 0
}

func (x *Staking_Create) GetAutoStake() bool {
	if x != nil {
		return x.AutoStake
	}
	return false
}

func (x *Staking_Create) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// unstake or withdraw
type Staking_Reclaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index to claim
	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_Reclaim) Reset() {
	*x = Staking_Reclaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Reclaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Reclaim) ProtoMessage() {}

func (x *Staking_Reclaim) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Reclaim.ProtoReflect.Descriptor instead.
func (*Staking_Reclaim) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Staking_Reclaim) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *Staking_Reclaim) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// add the amount of bucket
type Staking_AddDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index
	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	// amount to add
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_AddDeposit) Reset() {
	*x = Staking_AddDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_AddDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_AddDeposit) ProtoMessage() {}

func (x *Staking_AddDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_AddDeposit.ProtoReflect.Descriptor instead.
func (*Staking_AddDeposit) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Staking_AddDeposit) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *Staking_AddDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Staking_AddDeposit) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// restake the duration and autoStake flag of bucket
type Staking_Restake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index
	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	// stake duration
	StakedDuration uint32 `protobuf:"varint,2,opt,name=stakedDuration,proto3" json:"stakedDuration,omitempty"`
	// auto re-stake
	AutoStake bool `protobuf:"varint,3,opt,name=autoStake,proto3" json:"autoStake,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_Restake) Reset() {
	*x = Staking_Restake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Restake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Restake) ProtoMessage() {}

func (x *Staking_Restake) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Restake.ProtoReflect.Descriptor instead.
func (*Staking_Restake) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Staking_Restake) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *Staking_Restake) GetStakedDuration() uint32 {
	if x != nil {
		return x.StakedDuration
	}
	return 0
}

func (x *Staking_Restake) GetAutoStake() bool {
	if x != nil {
		return x.AutoStake
	}
	return false
}

func (x *Staking_Restake) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// move the bucket to vote for another candidate or transfer the ownership of bucket to another voters
type Staking_ChangeCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index
	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	// validator name
	CandidateName string `protobuf:"bytes,2,opt,name=candidateName,proto3" json:"candidateName,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_ChangeCandidate) Reset() {
	*x = Staking_ChangeCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ChangeCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ChangeCandidate) ProtoMessage() {}

func (x *Staking_ChangeCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ChangeCandidate.ProtoReflect.Descriptor instead.
func (*Staking_ChangeCandidate) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Staking_ChangeCandidate) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *Staking_ChangeCandidate) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *Staking_ChangeCandidate) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// transfer ownserhip of stake
type Staking_TransferOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index
	BucketIndex uint64 `protobuf:"varint,1,opt,name=bucketIndex,proto3" json:"bucketIndex,omitempty"`
	// address of voter
	VoterAddress string `protobuf:"bytes,2,opt,name=voterAddress,proto3" json:"voterAddress,omitempty"`
	// payload data
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_TransferOwnership) Reset() {
	*x = Staking_TransferOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_TransferOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_TransferOwnership) ProtoMessage() {}

func (x *Staking_TransferOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_TransferOwnership.ProtoReflect.Descriptor instead.
func (*Staking_TransferOwnership) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Staking_TransferOwnership) GetBucketIndex() uint64 {
	if x != nil {
		return x.BucketIndex
	}
	return 0
}

func (x *Staking_TransferOwnership) GetVoterAddress() string {
	if x != nil {
		return x.VoterAddress
	}
	return ""
}

func (x *Staking_TransferOwnership) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Candidate (validator) info
type Staking_CandidateBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OperatorAddress string `protobuf:"bytes,2,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
	RewardAddress   string `protobuf:"bytes,3,opt,name=rewardAddress,proto3" json:"rewardAddress,omitempty"`
}

func (x *Staking_CandidateBasicInfo) Reset() {
	*x = Staking_CandidateBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_CandidateBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_CandidateBasicInfo) ProtoMessage() {}

func (x *Staking_CandidateBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_CandidateBasicInfo.ProtoReflect.Descriptor instead.
func (*Staking_CandidateBasicInfo) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Staking_CandidateBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Staking_CandidateBasicInfo) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *Staking_CandidateBasicInfo) GetRewardAddress() string {
	if x != nil {
		return x.RewardAddress
	}
	return ""
}

// Register a Candidate
type Staking_CandidateRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate      *Staking_CandidateBasicInfo `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	StakedAmount   string                      `protobuf:"bytes,2,opt,name=stakedAmount,proto3" json:"stakedAmount,omitempty"`
	StakedDuration uint32                      `protobuf:"varint,3,opt,name=stakedDuration,proto3" json:"stakedDuration,omitempty"`
	AutoStake      bool                        `protobuf:"varint,4,opt,name=autoStake,proto3" json:"autoStake,omitempty"`
	OwnerAddress   string                      `protobuf:"bytes,5,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"` // if ownerAddress is absent, owner of candidate is the sender
	Payload        []byte                      `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Staking_CandidateRegister) Reset() {
	*x = Staking_CandidateRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_IoTeX_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_CandidateRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_CandidateRegister) ProtoMessage() {}

func (x *Staking_CandidateRegister) ProtoReflect() protoreflect.Message {
	mi := &file_IoTeX_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_CandidateRegister.ProtoReflect.Descriptor instead.
func (*Staking_CandidateRegister) Descriptor() ([]byte, []int) {
	return file_IoTeX_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Staking_CandidateRegister) GetCandidate() *Staking_CandidateBasicInfo {
	if x != nil {
		return x.Candidate
	}
	return nil
}

func (x *Staking_CandidateRegister) GetStakedAmount() string {
	if x != nil {
		return x.StakedAmount
	}
	return ""
}

func (x *Staking_CandidateRegister) GetStakedDuration() uint32 {
	if x != nil {
		return x.StakedDuration
	}
	return 0
}

func (x *Staking_CandidateRegister) GetAutoStake() bool {
	if x != nil {
		return x.AutoStake
	}
	return false
}

func (x *Staking_CandidateRegister) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *Staking_CandidateRegister) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_IoTeX_proto protoreflect.FileDescriptor

var file_IoTeX_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x54,
	0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x08, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xce, 0x0e, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f,
	0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x47,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54,
	0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a,
	0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x59, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65,
	0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x45, 0x0a, 0x07, 0x52, 0x65,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x60, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x8b, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x73, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x73, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a,
	0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x78, 0x0a, 0x12, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x85, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x88, 0x08, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x49,
	0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x42, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x49,
	0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x49,
	0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f,
	0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x49,
	0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x59,
	0x0a, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x49,
	0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf0, 0x07, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f,
	0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65,
	0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x49,
	0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65,
	0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65,
	0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x59, 0x0a, 0x11, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65,
	0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x49, 0x6f, 0x54, 0x65, 0x58, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_IoTeX_proto_rawDescOnce sync.Once
	file_IoTeX_proto_rawDescData = file_IoTeX_proto_rawDesc
)

func file_IoTeX_proto_rawDescGZIP() []byte {
	file_IoTeX_proto_rawDescOnce.Do(func() {
		file_IoTeX_proto_rawDescData = protoimpl.X.CompressGZIP(file_IoTeX_proto_rawDescData)
	})
	return file_IoTeX_proto_rawDescData
}

var file_IoTeX_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_IoTeX_proto_goTypes = []interface{}{
	(*Transfer)(nil),                   // 0: TW.IoTeX.Proto.Transfer
	(*Staking)(nil),                    // 1: TW.IoTeX.Proto.Staking
	(*ContractCall)(nil),               // 2: TW.IoTeX.Proto.ContractCall
	(*SigningInput)(nil),               // 3: TW.IoTeX.Proto.SigningInput
	(*SigningOutput)(nil),              // 4: TW.IoTeX.Proto.SigningOutput
	(*ActionCore)(nil),                 // 5: TW.IoTeX.Proto.ActionCore
	(*Action)(nil),                     // 6: TW.IoTeX.Proto.Action
	(*Staking_Create)(nil),             // 7: TW.IoTeX.Proto.Staking.Create
	(*Staking_Reclaim)(nil),            // 8: TW.IoTeX.Proto.Staking.Reclaim
	(*Staking_AddDeposit)(nil),         // 9: TW.IoTeX.Proto.Staking.AddDeposit
	(*Staking_Restake)(nil),            // 10: TW.IoTeX.Proto.Staking.Restake
	(*Staking_ChangeCandidate)(nil),    // 11: TW.IoTeX.Proto.Staking.ChangeCandidate
	(*Staking_TransferOwnership)(nil),  // 12: TW.IoTeX.Proto.Staking.TransferOwnership
	(*Staking_CandidateBasicInfo)(nil), // 13: TW.IoTeX.Proto.Staking.CandidateBasicInfo
	(*Staking_CandidateRegister)(nil),  // 14: TW.IoTeX.Proto.Staking.CandidateRegister
	(common.SigningError)(0),           // 15: TW.Common.Proto.SigningError
}
var file_IoTeX_proto_depIdxs = []int32{
	7,  // 0: TW.IoTeX.Proto.Staking.stakeCreate:type_name -> TW.IoTeX.Proto.Staking.Create
	8,  // 1: TW.IoTeX.Proto.Staking.stakeUnstake:type_name -> TW.IoTeX.Proto.Staking.Reclaim
	8,  // 2: TW.IoTeX.Proto.Staking.stakeWithdraw:type_name -> TW.IoTeX.Proto.Staking.Reclaim
	9,  // 3: TW.IoTeX.Proto.Staking.stakeAddDeposit:type_name -> TW.IoTeX.Proto.Staking.AddDeposit
	10, // 4: TW.IoTeX.Proto.Staking.stakeRestake:type_name -> TW.IoTeX.Proto.Staking.Restake
	11, // 5: TW.IoTeX.Proto.Staking.stakeChangeCandidate:type_name -> TW.IoTeX.Proto.Staking.ChangeCandidate
	12, // 6: TW.IoTeX.Proto.Staking.stakeTransferOwnership:type_name -> TW.IoTeX.Proto.Staking.TransferOwnership
	14, // 7: TW.IoTeX.Proto.Staking.candidateRegister:type_name -> TW.IoTeX.Proto.Staking.CandidateRegister
	13, // 8: TW.IoTeX.Proto.Staking.candidateUpdate:type_name -> TW.IoTeX.Proto.Staking.CandidateBasicInfo
	0,  // 9: TW.IoTeX.Proto.SigningInput.transfer:type_name -> TW.IoTeX.Proto.Transfer
	2,  // 10: TW.IoTeX.Proto.SigningInput.call:type_name -> TW.IoTeX.Proto.ContractCall
	7,  // 11: TW.IoTeX.Proto.SigningInput.stakeCreate:type_name -> TW.IoTeX.Proto.Staking.Create
	8,  // 12: TW.IoTeX.Proto.SigningInput.stakeUnstake:type_name -> TW.IoTeX.Proto.Staking.Reclaim
	8,  // 13: TW.IoTeX.Proto.SigningInput.stakeWithdraw:type_name -> TW.IoTeX.Proto.Staking.Reclaim
	9,  // 14: TW.IoTeX.Proto.SigningInput.stakeAddDeposit:type_name -> TW.IoTeX.Proto.Staking.AddDeposit
	10, // 15: TW.IoTeX.Proto.SigningInput.stakeRestake:type_name -> TW.IoTeX.Proto.Staking.Restake
	11, // 16: TW.IoTeX.Proto.SigningInput.stakeChangeCandidate:type_name -> TW.IoTeX.Proto.Staking.ChangeCandidate
	12, // 17: TW.IoTeX.Proto.SigningInput.stakeTransferOwnership:type_name -> TW.IoTeX.Proto.Staking.TransferOwnership
	14, // 18: TW.IoTeX.Proto.SigningInput.candidateRegister:type_name -> TW.IoTeX.Proto.Staking.CandidateRegister
	13, // 19: TW.IoTeX.Proto.SigningInput.candidateUpdate:type_name -> TW.IoTeX.Proto.Staking.CandidateBasicInfo
	15, // 20: TW.IoTeX.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	0,  // 21: TW.IoTeX.Proto.ActionCore.transfer:type_name -> TW.IoTeX.Proto.Transfer
	2,  // 22: TW.IoTeX.Proto.ActionCore.execution:type_name -> TW.IoTeX.Proto.ContractCall
	7,  // 23: TW.IoTeX.Proto.ActionCore.stakeCreate:type_name -> TW.IoTeX.Proto.Staking.Create
	8,  // 24: TW.IoTeX.Proto.ActionCore.stakeUnstake:type_name -> TW.IoTeX.Proto.Staking.Reclaim
	8,  // 25: TW.IoTeX.Proto.ActionCore.stakeWithdraw:type_name -> TW.IoTeX.Proto.Staking.Reclaim
	9,  // 26: TW.IoTeX.Proto.ActionCore.stakeAddDeposit:type_name -> TW.IoTeX.Proto.Staking.AddDeposit
	10, // 27: TW.IoTeX.Proto.ActionCore.stakeRestake:type_name -> TW.IoTeX.Proto.Staking.Restake
	11, // 28: TW.IoTeX.Proto.ActionCore.stakeChangeCandidate:type_name -> TW.IoTeX.Proto.Staking.ChangeCandidate
	12, // 29: TW.IoTeX.Proto.ActionCore.stakeTransferOwnership:type_name -> TW.IoTeX.Proto.Staking.TransferOwnership
	14, // 30: TW.IoTeX.Proto.ActionCore.candidateRegister:type_name -> TW.IoTeX.Proto.Staking.CandidateRegister
	13, // 31: TW.IoTeX.Proto.ActionCore.candidateUpdate:type_name -> TW.IoTeX.Proto.Staking.CandidateBasicInfo
	5,  // 32: TW.IoTeX.Proto.Action.core:type_name -> TW.IoTeX.Proto.ActionCore
	13, // 33: TW.IoTeX.Proto.Staking.CandidateRegister.candidate:type_name -> TW.IoTeX.Proto.Staking.CandidateBasicInfo
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_IoTeX_proto_init() }
func file_IoTeX_proto_init() {
	if File_IoTeX_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_IoTeX_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Reclaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_AddDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Restake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ChangeCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_TransferOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_CandidateBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_IoTeX_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_CandidateRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_IoTeX_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Staking_StakeCreate)(nil),
		(*Staking_StakeUnstake)(nil),
		(*Staking_StakeWithdraw)(nil),
		(*Staking_StakeAddDeposit)(nil),
		(*Staking_StakeRestake)(nil),
		(*Staking_StakeChangeCandidate)(nil),
		(*Staking_StakeTransferOwnership)(nil),
		(*Staking_CandidateRegister_)(nil),
		(*Staking_CandidateUpdate)(nil),
	}
	file_IoTeX_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SigningInput_Transfer)(nil),
		(*SigningInput_Call)(nil),
		(*SigningInput_StakeCreate)(nil),
		(*SigningInput_StakeUnstake)(nil),
		(*SigningInput_StakeWithdraw)(nil),
		(*SigningInput_StakeAddDeposit)(nil),
		(*SigningInput_StakeRestake)(nil),
		(*SigningInput_StakeChangeCandidate)(nil),
		(*SigningInput_StakeTransferOwnership)(nil),
		(*SigningInput_CandidateRegister)(nil),
		(*SigningInput_CandidateUpdate)(nil),
	}
	file_IoTeX_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ActionCore_Transfer)(nil),
		(*ActionCore_Execution)(nil),
		(*ActionCore_StakeCreate)(nil),
		(*ActionCore_StakeUnstake)(nil),
		(*ActionCore_StakeWithdraw)(nil),
		(*ActionCore_StakeAddDeposit)(nil),
		(*ActionCore_StakeRestake)(nil),
		(*ActionCore_StakeChangeCandidate)(nil),
		(*ActionCore_StakeTransferOwnership)(nil),
		(*ActionCore_CandidateRegister)(nil),
		(*ActionCore_CandidateUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_IoTeX_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_IoTeX_proto_goTypes,
		DependencyIndexes: file_IoTeX_proto_depIdxs,
		MessageInfos:      file_IoTeX_proto_msgTypes,
	}.Build()
	File_IoTeX_proto = out.File
	file_IoTeX_proto_rawDesc = nil
	file_IoTeX_proto_goTypes = nil
	file_IoTeX_proto_depIdxs = nil
}
