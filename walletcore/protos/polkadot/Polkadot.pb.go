// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: Polkadot.proto

package polkadot

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Destination options for reward
type RewardDestination int32

const (
	RewardDestination_STAKED     RewardDestination = 0
	RewardDestination_STASH      RewardDestination = 1
	RewardDestination_CONTROLLER RewardDestination = 2
)

// Enum value maps for RewardDestination.
var (
	RewardDestination_name = map[int32]string{
		0: "STAKED",
		1: "STASH",
		2: "CONTROLLER",
	}
	RewardDestination_value = map[string]int32{
		"STAKED":     0,
		"STASH":      1,
		"CONTROLLER": 2,
	}
)

func (x RewardDestination) Enum() *RewardDestination {
	p := new(RewardDestination)
	*p = x
	return p
}

func (x RewardDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_Polkadot_proto_enumTypes[0].Descriptor()
}

func (RewardDestination) Type() protoreflect.EnumType {
	return &file_Polkadot_proto_enumTypes[0]
}

func (x RewardDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardDestination.Descriptor instead.
func (RewardDestination) EnumDescriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{0}
}

// An era, a period defined by a starting block and length
type Era struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// recent block number (called phase in polkadot code), should match block hash
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// length of period, calculated from block number, e.g. 64
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Era) Reset() {
	*x = Era{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Era) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Era) ProtoMessage() {}

func (x *Era) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Era.ProtoReflect.Descriptor instead.
func (*Era) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{0}
}

func (x *Era) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Era) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

// Readable decoded call indices can be found at https://www.subscan.io/
type CustomCallIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Module index.
	ModuleIndex int32 `protobuf:"varint,4,opt,name=module_index,json=moduleIndex,proto3" json:"module_index,omitempty"`
	// Method index.
	MethodIndex int32 `protobuf:"varint,5,opt,name=method_index,json=methodIndex,proto3" json:"method_index,omitempty"`
}

func (x *CustomCallIndices) Reset() {
	*x = CustomCallIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCallIndices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCallIndices) ProtoMessage() {}

func (x *CustomCallIndices) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCallIndices.ProtoReflect.Descriptor instead.
func (*CustomCallIndices) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{1}
}

func (x *CustomCallIndices) GetModuleIndex() int32 {
	if x != nil {
		return x.ModuleIndex
	}
	return 0
}

func (x *CustomCallIndices) GetMethodIndex() int32 {
	if x != nil {
		return x.MethodIndex
	}
	return 0
}

// Optional call indices.
// Must be set if `SigningInput::network` is different from `Polkadot` and `Kusama`.
type CallIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*CallIndices_Custom
	Variant isCallIndices_Variant `protobuf_oneof:"variant"`
}

func (x *CallIndices) Reset() {
	*x = CallIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallIndices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallIndices) ProtoMessage() {}

func (x *CallIndices) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallIndices.ProtoReflect.Descriptor instead.
func (*CallIndices) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{2}
}

func (m *CallIndices) GetVariant() isCallIndices_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *CallIndices) GetCustom() *CustomCallIndices {
	if x, ok := x.GetVariant().(*CallIndices_Custom); ok {
		return x.Custom
	}
	return nil
}

type isCallIndices_Variant interface {
	isCallIndices_Variant()
}

type CallIndices_Custom struct {
	Custom *CustomCallIndices `protobuf:"bytes,1,opt,name=custom,proto3,oneof"`
}

func (*CallIndices_Custom) isCallIndices_Variant() {}

// Balance transfer transaction
type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageOneof:
	//
	//	*Balance_Transfer_
	//	*Balance_BatchTransfer_
	//	*Balance_AssetTransfer_
	//	*Balance_BatchAssetTransfer_
	MessageOneof isBalance_MessageOneof `protobuf_oneof:"message_oneof"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{3}
}

func (m *Balance) GetMessageOneof() isBalance_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *Balance) GetTransfer() *Balance_Transfer {
	if x, ok := x.GetMessageOneof().(*Balance_Transfer_); ok {
		return x.Transfer
	}
	return nil
}

func (x *Balance) GetBatchTransfer() *Balance_BatchTransfer {
	if x, ok := x.GetMessageOneof().(*Balance_BatchTransfer_); ok {
		return x.BatchTransfer
	}
	return nil
}

func (x *Balance) GetAssetTransfer() *Balance_AssetTransfer {
	if x, ok := x.GetMessageOneof().(*Balance_AssetTransfer_); ok {
		return x.AssetTransfer
	}
	return nil
}

func (x *Balance) GetBatchAssetTransfer() *Balance_BatchAssetTransfer {
	if x, ok := x.GetMessageOneof().(*Balance_BatchAssetTransfer_); ok {
		return x.BatchAssetTransfer
	}
	return nil
}

type isBalance_MessageOneof interface {
	isBalance_MessageOneof()
}

type Balance_Transfer_ struct {
	Transfer *Balance_Transfer `protobuf:"bytes,1,opt,name=transfer,proto3,oneof"`
}

type Balance_BatchTransfer_ struct {
	BatchTransfer *Balance_BatchTransfer `protobuf:"bytes,2,opt,name=batchTransfer,proto3,oneof"`
}

type Balance_AssetTransfer_ struct {
	AssetTransfer *Balance_AssetTransfer `protobuf:"bytes,3,opt,name=asset_transfer,json=assetTransfer,proto3,oneof"`
}

type Balance_BatchAssetTransfer_ struct {
	BatchAssetTransfer *Balance_BatchAssetTransfer `protobuf:"bytes,4,opt,name=batch_asset_transfer,json=batchAssetTransfer,proto3,oneof"`
}

func (*Balance_Transfer_) isBalance_MessageOneof() {}

func (*Balance_BatchTransfer_) isBalance_MessageOneof() {}

func (*Balance_AssetTransfer_) isBalance_MessageOneof() {}

func (*Balance_BatchAssetTransfer_) isBalance_MessageOneof() {}

// Staking transaction
type Staking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Payload messsage
	//
	// Types that are assignable to MessageOneof:
	//
	//	*Staking_Bond_
	//	*Staking_BondAndNominate_
	//	*Staking_BondExtra_
	//	*Staking_Unbond_
	//	*Staking_WithdrawUnbonded_
	//	*Staking_Nominate_
	//	*Staking_Chill_
	//	*Staking_ChillAndUnbond_
	//	*Staking_Rebond_
	MessageOneof isStaking_MessageOneof `protobuf_oneof:"message_oneof"`
}

func (x *Staking) Reset() {
	*x = Staking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking) ProtoMessage() {}

func (x *Staking) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking.ProtoReflect.Descriptor instead.
func (*Staking) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4}
}

func (m *Staking) GetMessageOneof() isStaking_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *Staking) GetBond() *Staking_Bond {
	if x, ok := x.GetMessageOneof().(*Staking_Bond_); ok {
		return x.Bond
	}
	return nil
}

func (x *Staking) GetBondAndNominate() *Staking_BondAndNominate {
	if x, ok := x.GetMessageOneof().(*Staking_BondAndNominate_); ok {
		return x.BondAndNominate
	}
	return nil
}

func (x *Staking) GetBondExtra() *Staking_BondExtra {
	if x, ok := x.GetMessageOneof().(*Staking_BondExtra_); ok {
		return x.BondExtra
	}
	return nil
}

func (x *Staking) GetUnbond() *Staking_Unbond {
	if x, ok := x.GetMessageOneof().(*Staking_Unbond_); ok {
		return x.Unbond
	}
	return nil
}

func (x *Staking) GetWithdrawUnbonded() *Staking_WithdrawUnbonded {
	if x, ok := x.GetMessageOneof().(*Staking_WithdrawUnbonded_); ok {
		return x.WithdrawUnbonded
	}
	return nil
}

func (x *Staking) GetNominate() *Staking_Nominate {
	if x, ok := x.GetMessageOneof().(*Staking_Nominate_); ok {
		return x.Nominate
	}
	return nil
}

func (x *Staking) GetChill() *Staking_Chill {
	if x, ok := x.GetMessageOneof().(*Staking_Chill_); ok {
		return x.Chill
	}
	return nil
}

func (x *Staking) GetChillAndUnbond() *Staking_ChillAndUnbond {
	if x, ok := x.GetMessageOneof().(*Staking_ChillAndUnbond_); ok {
		return x.ChillAndUnbond
	}
	return nil
}

func (x *Staking) GetRebond() *Staking_Rebond {
	if x, ok := x.GetMessageOneof().(*Staking_Rebond_); ok {
		return x.Rebond
	}
	return nil
}

type isStaking_MessageOneof interface {
	isStaking_MessageOneof()
}

type Staking_Bond_ struct {
	Bond *Staking_Bond `protobuf:"bytes,1,opt,name=bond,proto3,oneof"`
}

type Staking_BondAndNominate_ struct {
	BondAndNominate *Staking_BondAndNominate `protobuf:"bytes,2,opt,name=bond_and_nominate,json=bondAndNominate,proto3,oneof"`
}

type Staking_BondExtra_ struct {
	BondExtra *Staking_BondExtra `protobuf:"bytes,3,opt,name=bond_extra,json=bondExtra,proto3,oneof"`
}

type Staking_Unbond_ struct {
	Unbond *Staking_Unbond `protobuf:"bytes,4,opt,name=unbond,proto3,oneof"`
}

type Staking_WithdrawUnbonded_ struct {
	WithdrawUnbonded *Staking_WithdrawUnbonded `protobuf:"bytes,5,opt,name=withdraw_unbonded,json=withdrawUnbonded,proto3,oneof"`
}

type Staking_Nominate_ struct {
	Nominate *Staking_Nominate `protobuf:"bytes,6,opt,name=nominate,proto3,oneof"`
}

type Staking_Chill_ struct {
	Chill *Staking_Chill `protobuf:"bytes,7,opt,name=chill,proto3,oneof"`
}

type Staking_ChillAndUnbond_ struct {
	ChillAndUnbond *Staking_ChillAndUnbond `protobuf:"bytes,8,opt,name=chill_and_unbond,json=chillAndUnbond,proto3,oneof"`
}

type Staking_Rebond_ struct {
	Rebond *Staking_Rebond `protobuf:"bytes,9,opt,name=rebond,proto3,oneof"`
}

func (*Staking_Bond_) isStaking_MessageOneof() {}

func (*Staking_BondAndNominate_) isStaking_MessageOneof() {}

func (*Staking_BondExtra_) isStaking_MessageOneof() {}

func (*Staking_Unbond_) isStaking_MessageOneof() {}

func (*Staking_WithdrawUnbonded_) isStaking_MessageOneof() {}

func (*Staking_Nominate_) isStaking_MessageOneof() {}

func (*Staking_Chill_) isStaking_MessageOneof() {}

func (*Staking_ChillAndUnbond_) isStaking_MessageOneof() {}

func (*Staking_Rebond_) isStaking_MessageOneof() {}

// Identity module
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageOneof:
	//
	//	*Identity_JoinIdentityAsKey_
	//	*Identity_AddAuthorization_
	MessageOneof isIdentity_MessageOneof `protobuf_oneof:"message_oneof"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{5}
}

func (m *Identity) GetMessageOneof() isIdentity_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *Identity) GetJoinIdentityAsKey() *Identity_JoinIdentityAsKey {
	if x, ok := x.GetMessageOneof().(*Identity_JoinIdentityAsKey_); ok {
		return x.JoinIdentityAsKey
	}
	return nil
}

func (x *Identity) GetAddAuthorization() *Identity_AddAuthorization {
	if x, ok := x.GetMessageOneof().(*Identity_AddAuthorization_); ok {
		return x.AddAuthorization
	}
	return nil
}

type isIdentity_MessageOneof interface {
	isIdentity_MessageOneof()
}

type Identity_JoinIdentityAsKey_ struct {
	JoinIdentityAsKey *Identity_JoinIdentityAsKey `protobuf:"bytes,1,opt,name=join_identity_as_key,json=joinIdentityAsKey,proto3,oneof"`
}

type Identity_AddAuthorization_ struct {
	AddAuthorization *Identity_AddAuthorization `protobuf:"bytes,2,opt,name=add_authorization,json=addAuthorization,proto3,oneof"`
}

func (*Identity_JoinIdentityAsKey_) isIdentity_MessageOneof() {}

func (*Identity_AddAuthorization_) isIdentity_MessageOneof() {}

// Polymesh call
type PolymeshCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageOneof:
	//
	//	*PolymeshCall_IdentityCall
	MessageOneof isPolymeshCall_MessageOneof `protobuf_oneof:"message_oneof"`
}

func (x *PolymeshCall) Reset() {
	*x = PolymeshCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolymeshCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolymeshCall) ProtoMessage() {}

func (x *PolymeshCall) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolymeshCall.ProtoReflect.Descriptor instead.
func (*PolymeshCall) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{6}
}

func (m *PolymeshCall) GetMessageOneof() isPolymeshCall_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *PolymeshCall) GetIdentityCall() *Identity {
	if x, ok := x.GetMessageOneof().(*PolymeshCall_IdentityCall); ok {
		return x.IdentityCall
	}
	return nil
}

type isPolymeshCall_MessageOneof interface {
	isPolymeshCall_MessageOneof()
}

type PolymeshCall_IdentityCall struct {
	IdentityCall *Identity `protobuf:"bytes,2,opt,name=identity_call,json=identityCall,proto3,oneof"`
}

func (*PolymeshCall_IdentityCall) isPolymeshCall_MessageOneof() {}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recent block hash, or genesis hash if era is not set
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Genesis block hash (identifies the chain)
	GenesisHash []byte `protobuf:"bytes,2,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	// Current account nonce
	Nonce uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Specification version, e.g. 26.
	SpecVersion uint32 `protobuf:"varint,4,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// Transaction version, e.g. 5.
	TransactionVersion uint32 `protobuf:"varint,5,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	// Optional tip to pay, big integer
	Tip []byte `protobuf:"bytes,6,opt,name=tip,proto3" json:"tip,omitempty"`
	// Optional time validity limit, recommended, for replay-protection.  Empty means Immortal.
	Era *Era `protobuf:"bytes,7,opt,name=era,proto3" json:"era,omitempty"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,8,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Network type
	Network uint32 `protobuf:"varint,9,opt,name=network,proto3" json:"network,omitempty"`
	// Whether enable MultiAddress
	MultiAddress bool `protobuf:"varint,10,opt,name=multi_address,json=multiAddress,proto3" json:"multi_address,omitempty"`
	// Payload message
	//
	// Types that are assignable to MessageOneof:
	//
	//	*SigningInput_BalanceCall
	//	*SigningInput_StakingCall
	//	*SigningInput_PolymeshCall
	MessageOneof isSigningInput_MessageOneof `protobuf_oneof:"message_oneof"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{7}
}

func (x *SigningInput) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *SigningInput) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *SigningInput) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SigningInput) GetSpecVersion() uint32 {
	if x != nil {
		return x.SpecVersion
	}
	return 0
}

func (x *SigningInput) GetTransactionVersion() uint32 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *SigningInput) GetTip() []byte {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *SigningInput) GetEra() *Era {
	if x != nil {
		return x.Era
	}
	return nil
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetNetwork() uint32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *SigningInput) GetMultiAddress() bool {
	if x != nil {
		return x.MultiAddress
	}
	return false
}

func (m *SigningInput) GetMessageOneof() isSigningInput_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *SigningInput) GetBalanceCall() *Balance {
	if x, ok := x.GetMessageOneof().(*SigningInput_BalanceCall); ok {
		return x.BalanceCall
	}
	return nil
}

func (x *SigningInput) GetStakingCall() *Staking {
	if x, ok := x.GetMessageOneof().(*SigningInput_StakingCall); ok {
		return x.StakingCall
	}
	return nil
}

func (x *SigningInput) GetPolymeshCall() *PolymeshCall {
	if x, ok := x.GetMessageOneof().(*SigningInput_PolymeshCall); ok {
		return x.PolymeshCall
	}
	return nil
}

type isSigningInput_MessageOneof interface {
	isSigningInput_MessageOneof()
}

type SigningInput_BalanceCall struct {
	BalanceCall *Balance `protobuf:"bytes,11,opt,name=balance_call,json=balanceCall,proto3,oneof"`
}

type SigningInput_StakingCall struct {
	StakingCall *Staking `protobuf:"bytes,12,opt,name=staking_call,json=stakingCall,proto3,oneof"`
}

type SigningInput_PolymeshCall struct {
	PolymeshCall *PolymeshCall `protobuf:"bytes,13,opt,name=polymesh_call,json=polymeshCall,proto3,oneof"`
}

func (*SigningInput_BalanceCall) isSigningInput_MessageOneof() {}

func (*SigningInput_StakingCall) isSigningInput_MessageOneof() {}

func (*SigningInput_PolymeshCall) isSigningInput_MessageOneof() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed and encoded transaction bytes.
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{8}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// transfer
type Balance_Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// destination address
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// max 32 chars
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,4,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Balance_Transfer) Reset() {
	*x = Balance_Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance_Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance_Transfer) ProtoMessage() {}

func (x *Balance_Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance_Transfer.ProtoReflect.Descriptor instead.
func (*Balance_Transfer) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Balance_Transfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Balance_Transfer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Balance_Transfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Balance_Transfer) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// batch tranfer
type Balance_BatchTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call indices
	CallIndices *CallIndices        `protobuf:"bytes,1,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
	Transfers   []*Balance_Transfer `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *Balance_BatchTransfer) Reset() {
	*x = Balance_BatchTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance_BatchTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance_BatchTransfer) ProtoMessage() {}

func (x *Balance_BatchTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance_BatchTransfer.ProtoReflect.Descriptor instead.
func (*Balance_BatchTransfer) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Balance_BatchTransfer) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

func (x *Balance_BatchTransfer) GetTransfers() []*Balance_Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

// asset transfer
type Balance_AssetTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call indices
	CallIndices *CallIndices `protobuf:"bytes,1,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
	// destination
	ToAddress string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// value - BigInteger
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// asset identifier
	AssetId uint32 `protobuf:"varint,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// fee asset identifier
	FeeAssetId uint32 `protobuf:"varint,5,opt,name=fee_asset_id,json=feeAssetId,proto3" json:"fee_asset_id,omitempty"`
}

func (x *Balance_AssetTransfer) Reset() {
	*x = Balance_AssetTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance_AssetTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance_AssetTransfer) ProtoMessage() {}

func (x *Balance_AssetTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance_AssetTransfer.ProtoReflect.Descriptor instead.
func (*Balance_AssetTransfer) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Balance_AssetTransfer) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

func (x *Balance_AssetTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Balance_AssetTransfer) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Balance_AssetTransfer) GetAssetId() uint32 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *Balance_AssetTransfer) GetFeeAssetId() uint32 {
	if x != nil {
		return x.FeeAssetId
	}
	return 0
}

// batch asset transfer
type Balance_BatchAssetTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call indices
	CallIndices *CallIndices `protobuf:"bytes,1,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
	// fee asset identifier
	FeeAssetId uint32                   `protobuf:"varint,2,opt,name=fee_asset_id,json=feeAssetId,proto3" json:"fee_asset_id,omitempty"`
	Transfers  []*Balance_AssetTransfer `protobuf:"bytes,3,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *Balance_BatchAssetTransfer) Reset() {
	*x = Balance_BatchAssetTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance_BatchAssetTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance_BatchAssetTransfer) ProtoMessage() {}

func (x *Balance_BatchAssetTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance_BatchAssetTransfer.ProtoReflect.Descriptor instead.
func (*Balance_BatchAssetTransfer) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Balance_BatchAssetTransfer) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

func (x *Balance_BatchAssetTransfer) GetFeeAssetId() uint32 {
	if x != nil {
		return x.FeeAssetId
	}
	return 0
}

func (x *Balance_BatchAssetTransfer) GetTransfers() []*Balance_AssetTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

// Bond to a controller
type Staking_Bond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// controller ID (optional)
	Controller string `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// destination for rewards
	RewardDestination RewardDestination `protobuf:"varint,3,opt,name=reward_destination,json=rewardDestination,proto3,enum=TW.Polkadot.Proto.RewardDestination" json:"reward_destination,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,4,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_Bond) Reset() {
	*x = Staking_Bond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Bond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Bond) ProtoMessage() {}

func (x *Staking_Bond) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Bond.ProtoReflect.Descriptor instead.
func (*Staking_Bond) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Staking_Bond) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *Staking_Bond) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Staking_Bond) GetRewardDestination() RewardDestination {
	if x != nil {
		return x.RewardDestination
	}
	return RewardDestination_STAKED
}

func (x *Staking_Bond) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Bond to a controller, with nominators
type Staking_BondAndNominate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// controller ID (optional)
	Controller string `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// destination for rewards
	RewardDestination RewardDestination `protobuf:"varint,3,opt,name=reward_destination,json=rewardDestination,proto3,enum=TW.Polkadot.Proto.RewardDestination" json:"reward_destination,omitempty"`
	// list of nominators
	Nominators []string `protobuf:"bytes,4,rep,name=nominators,proto3" json:"nominators,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,5,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_BondAndNominate) Reset() {
	*x = Staking_BondAndNominate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_BondAndNominate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_BondAndNominate) ProtoMessage() {}

func (x *Staking_BondAndNominate) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_BondAndNominate.ProtoReflect.Descriptor instead.
func (*Staking_BondAndNominate) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Staking_BondAndNominate) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *Staking_BondAndNominate) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Staking_BondAndNominate) GetRewardDestination() RewardDestination {
	if x != nil {
		return x.RewardDestination
	}
	return RewardDestination_STAKED
}

func (x *Staking_BondAndNominate) GetNominators() []string {
	if x != nil {
		return x.Nominators
	}
	return nil
}

func (x *Staking_BondAndNominate) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Bond extra amount
type Staking_BondExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,2,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_BondExtra) Reset() {
	*x = Staking_BondExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_BondExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_BondExtra) ProtoMessage() {}

func (x *Staking_BondExtra) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_BondExtra.ProtoReflect.Descriptor instead.
func (*Staking_BondExtra) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Staking_BondExtra) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Staking_BondExtra) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Unbond
type Staking_Unbond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,2,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_Unbond) Reset() {
	*x = Staking_Unbond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Unbond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Unbond) ProtoMessage() {}

func (x *Staking_Unbond) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Unbond.ProtoReflect.Descriptor instead.
func (*Staking_Unbond) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Staking_Unbond) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Staking_Unbond) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Rebond
type Staking_Rebond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,2,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_Rebond) Reset() {
	*x = Staking_Rebond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Rebond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Rebond) ProtoMessage() {}

func (x *Staking_Rebond) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Rebond.ProtoReflect.Descriptor instead.
func (*Staking_Rebond) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Staking_Rebond) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Staking_Rebond) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Withdraw unbonded amounts
type Staking_WithdrawUnbonded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlashingSpans int32 `protobuf:"varint,1,opt,name=slashing_spans,json=slashingSpans,proto3" json:"slashing_spans,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,2,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_WithdrawUnbonded) Reset() {
	*x = Staking_WithdrawUnbonded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_WithdrawUnbonded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_WithdrawUnbonded) ProtoMessage() {}

func (x *Staking_WithdrawUnbonded) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_WithdrawUnbonded.ProtoReflect.Descriptor instead.
func (*Staking_WithdrawUnbonded) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Staking_WithdrawUnbonded) GetSlashingSpans() int32 {
	if x != nil {
		return x.SlashingSpans
	}
	return 0
}

func (x *Staking_WithdrawUnbonded) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Nominate
type Staking_Nominate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of nominators
	Nominators []string `protobuf:"bytes,1,rep,name=nominators,proto3" json:"nominators,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,2,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_Nominate) Reset() {
	*x = Staking_Nominate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Nominate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Nominate) ProtoMessage() {}

func (x *Staking_Nominate) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Nominate.ProtoReflect.Descriptor instead.
func (*Staking_Nominate) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Staking_Nominate) GetNominators() []string {
	if x != nil {
		return x.Nominators
	}
	return nil
}

func (x *Staking_Nominate) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Chill and unbound
type Staking_ChillAndUnbond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount (uint256, serialized big endian)
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// call indices
	CallIndices *CallIndices `protobuf:"bytes,2,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_ChillAndUnbond) Reset() {
	*x = Staking_ChillAndUnbond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ChillAndUnbond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ChillAndUnbond) ProtoMessage() {}

func (x *Staking_ChillAndUnbond) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ChillAndUnbond.ProtoReflect.Descriptor instead.
func (*Staking_ChillAndUnbond) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Staking_ChillAndUnbond) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Staking_ChillAndUnbond) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Chill
type Staking_Chill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call indices
	CallIndices *CallIndices `protobuf:"bytes,1,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
}

func (x *Staking_Chill) Reset() {
	*x = Staking_Chill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Chill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Chill) ProtoMessage() {}

func (x *Staking_Chill) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Chill.ProtoReflect.Descriptor instead.
func (*Staking_Chill) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{4, 8}
}

func (x *Staking_Chill) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

// Identity::join_identity_as_key call
type Identity_JoinIdentityAsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call indices
	CallIndices *CallIndices `protobuf:"bytes,1,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
	// auth id
	AuthId uint64 `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
}

func (x *Identity_JoinIdentityAsKey) Reset() {
	*x = Identity_JoinIdentityAsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_JoinIdentityAsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_JoinIdentityAsKey) ProtoMessage() {}

func (x *Identity_JoinIdentityAsKey) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_JoinIdentityAsKey.ProtoReflect.Descriptor instead.
func (*Identity_JoinIdentityAsKey) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Identity_JoinIdentityAsKey) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

func (x *Identity_JoinIdentityAsKey) GetAuthId() uint64 {
	if x != nil {
		return x.AuthId
	}
	return 0
}

// Identity::add_authorization call
type Identity_AddAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// call indices
	CallIndices *CallIndices `protobuf:"bytes,1,opt,name=call_indices,json=callIndices,proto3" json:"call_indices,omitempty"`
	// address that will be added to the Identity
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// authorization data, null means all permissions
	Data *Identity_AddAuthorization_AuthData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// expire time, unix seconds
	Expiry uint64 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *Identity_AddAuthorization) Reset() {
	*x = Identity_AddAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_AddAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_AddAuthorization) ProtoMessage() {}

func (x *Identity_AddAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_AddAuthorization.ProtoReflect.Descriptor instead.
func (*Identity_AddAuthorization) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Identity_AddAuthorization) GetCallIndices() *CallIndices {
	if x != nil {
		return x.CallIndices
	}
	return nil
}

func (x *Identity_AddAuthorization) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Identity_AddAuthorization) GetData() *Identity_AddAuthorization_AuthData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Identity_AddAuthorization) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type Identity_AddAuthorization_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Identity_AddAuthorization_Data) Reset() {
	*x = Identity_AddAuthorization_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_AddAuthorization_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_AddAuthorization_Data) ProtoMessage() {}

func (x *Identity_AddAuthorization_Data) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_AddAuthorization_Data.ProtoReflect.Descriptor instead.
func (*Identity_AddAuthorization_Data) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *Identity_AddAuthorization_Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Identity_AddAuthorization_AuthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authorization data, empty means all permissions, null means no permissions
	Asset *Identity_AddAuthorization_Data `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// authorization data, empty means all permissions, null means no permissions
	Extrinsic *Identity_AddAuthorization_Data `protobuf:"bytes,2,opt,name=extrinsic,proto3" json:"extrinsic,omitempty"`
	// authorization data, empty means all permissions, null means no permissions
	Portfolio *Identity_AddAuthorization_Data `protobuf:"bytes,3,opt,name=portfolio,proto3" json:"portfolio,omitempty"`
}

func (x *Identity_AddAuthorization_AuthData) Reset() {
	*x = Identity_AddAuthorization_AuthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Polkadot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_AddAuthorization_AuthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_AddAuthorization_AuthData) ProtoMessage() {}

func (x *Identity_AddAuthorization_AuthData) ProtoReflect() protoreflect.Message {
	mi := &file_Polkadot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_AddAuthorization_AuthData.ProtoReflect.Descriptor instead.
func (*Identity_AddAuthorization_AuthData) Descriptor() ([]byte, []int) {
	return file_Polkadot_proto_rawDescGZIP(), []int{5, 1, 1}
}

func (x *Identity_AddAuthorization_AuthData) GetAsset() *Identity_AddAuthorization_Data {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Identity_AddAuthorization_AuthData) GetExtrinsic() *Identity_AddAuthorization_Data {
	if x != nil {
		return x.Extrinsic
	}
	return nil
}

func (x *Identity_AddAuthorization_AuthData) GetPortfolio() *Identity_AddAuthorization_Data {
	if x != nil {
		return x.Portfolio
	}
	return nil
}

var File_Polkadot_proto protoreflect.FileDescriptor

var file_Polkadot_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x40, 0x0a, 0x03, 0x45, 0x72, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x22, 0x59, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x58,
	0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x09, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xa1, 0x08, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b,
	0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x14,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x54, 0x57, 0x2e,
	0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a,
	0x96, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57,
	0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x1a, 0xc4, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f,
	0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x65, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0xc1, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b,
	0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xc5, 0x0e, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x62, 0x6f, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b,
	0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6e, 0x64, 0x12,
	0x58, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x57, 0x2e,
	0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x6e, 0x64, 0x41, 0x6e,
	0x64, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x62, 0x6f, 0x6e,
	0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x3b, 0x0a, 0x06, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x5a, 0x0a,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f,
	0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57,
	0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x57,
	0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x69,
	0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x68, 0x69, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x3b, 0x0a,
	0x06, 0x72, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x1a, 0xd4, 0x01, 0x0a, 0x04, 0x42,
	0x6f, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61,
	0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0xff, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c,
	0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b,
	0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x64, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x06, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x06,
	0x52, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x7c, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x6d, 0x0a,
	0x08, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x0e,
	0x43, 0x68, 0x69, 0x6c, 0x6c, 0x41, 0x6e, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e,
	0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x6c,
	0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b,
	0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x22, 0xb2, 0x06, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x60, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x73, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x6f, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57,
	0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x64, 0x1a, 0xe4, 0x03, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x1a, 0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xf5, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x54,
	0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e,
	0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x54, 0x57, 0x2e, 0x50,
	0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x54, 0x57, 0x2e,
	0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x63, 0x0a, 0x0c, 0x50, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x0f, 0x0a,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xb1,
	0x04, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x28, 0x0a,
	0x03, 0x65, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x57, 0x2e,
	0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x72, 0x61, 0x52, 0x03, 0x65, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x50, 0x6f, 0x6c, 0x6b, 0x61, 0x64, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x3a, 0x0a, 0x11, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x52, 0x10, 0x02, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Polkadot_proto_rawDescOnce sync.Once
	file_Polkadot_proto_rawDescData = file_Polkadot_proto_rawDesc
)

func file_Polkadot_proto_rawDescGZIP() []byte {
	file_Polkadot_proto_rawDescOnce.Do(func() {
		file_Polkadot_proto_rawDescData = protoimpl.X.CompressGZIP(file_Polkadot_proto_rawDescData)
	})
	return file_Polkadot_proto_rawDescData
}

var file_Polkadot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Polkadot_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_Polkadot_proto_goTypes = []interface{}{
	(RewardDestination)(0),                     // 0: TW.Polkadot.Proto.RewardDestination
	(*Era)(nil),                                // 1: TW.Polkadot.Proto.Era
	(*CustomCallIndices)(nil),                  // 2: TW.Polkadot.Proto.CustomCallIndices
	(*CallIndices)(nil),                        // 3: TW.Polkadot.Proto.CallIndices
	(*Balance)(nil),                            // 4: TW.Polkadot.Proto.Balance
	(*Staking)(nil),                            // 5: TW.Polkadot.Proto.Staking
	(*Identity)(nil),                           // 6: TW.Polkadot.Proto.Identity
	(*PolymeshCall)(nil),                       // 7: TW.Polkadot.Proto.PolymeshCall
	(*SigningInput)(nil),                       // 8: TW.Polkadot.Proto.SigningInput
	(*SigningOutput)(nil),                      // 9: TW.Polkadot.Proto.SigningOutput
	(*Balance_Transfer)(nil),                   // 10: TW.Polkadot.Proto.Balance.Transfer
	(*Balance_BatchTransfer)(nil),              // 11: TW.Polkadot.Proto.Balance.BatchTransfer
	(*Balance_AssetTransfer)(nil),              // 12: TW.Polkadot.Proto.Balance.AssetTransfer
	(*Balance_BatchAssetTransfer)(nil),         // 13: TW.Polkadot.Proto.Balance.BatchAssetTransfer
	(*Staking_Bond)(nil),                       // 14: TW.Polkadot.Proto.Staking.Bond
	(*Staking_BondAndNominate)(nil),            // 15: TW.Polkadot.Proto.Staking.BondAndNominate
	(*Staking_BondExtra)(nil),                  // 16: TW.Polkadot.Proto.Staking.BondExtra
	(*Staking_Unbond)(nil),                     // 17: TW.Polkadot.Proto.Staking.Unbond
	(*Staking_Rebond)(nil),                     // 18: TW.Polkadot.Proto.Staking.Rebond
	(*Staking_WithdrawUnbonded)(nil),           // 19: TW.Polkadot.Proto.Staking.WithdrawUnbonded
	(*Staking_Nominate)(nil),                   // 20: TW.Polkadot.Proto.Staking.Nominate
	(*Staking_ChillAndUnbond)(nil),             // 21: TW.Polkadot.Proto.Staking.ChillAndUnbond
	(*Staking_Chill)(nil),                      // 22: TW.Polkadot.Proto.Staking.Chill
	(*Identity_JoinIdentityAsKey)(nil),         // 23: TW.Polkadot.Proto.Identity.JoinIdentityAsKey
	(*Identity_AddAuthorization)(nil),          // 24: TW.Polkadot.Proto.Identity.AddAuthorization
	(*Identity_AddAuthorization_Data)(nil),     // 25: TW.Polkadot.Proto.Identity.AddAuthorization.Data
	(*Identity_AddAuthorization_AuthData)(nil), // 26: TW.Polkadot.Proto.Identity.AddAuthorization.AuthData
	(common.SigningError)(0),                   // 27: TW.Common.Proto.SigningError
}
var file_Polkadot_proto_depIdxs = []int32{
	2,  // 0: TW.Polkadot.Proto.CallIndices.custom:type_name -> TW.Polkadot.Proto.CustomCallIndices
	10, // 1: TW.Polkadot.Proto.Balance.transfer:type_name -> TW.Polkadot.Proto.Balance.Transfer
	11, // 2: TW.Polkadot.Proto.Balance.batchTransfer:type_name -> TW.Polkadot.Proto.Balance.BatchTransfer
	12, // 3: TW.Polkadot.Proto.Balance.asset_transfer:type_name -> TW.Polkadot.Proto.Balance.AssetTransfer
	13, // 4: TW.Polkadot.Proto.Balance.batch_asset_transfer:type_name -> TW.Polkadot.Proto.Balance.BatchAssetTransfer
	14, // 5: TW.Polkadot.Proto.Staking.bond:type_name -> TW.Polkadot.Proto.Staking.Bond
	15, // 6: TW.Polkadot.Proto.Staking.bond_and_nominate:type_name -> TW.Polkadot.Proto.Staking.BondAndNominate
	16, // 7: TW.Polkadot.Proto.Staking.bond_extra:type_name -> TW.Polkadot.Proto.Staking.BondExtra
	17, // 8: TW.Polkadot.Proto.Staking.unbond:type_name -> TW.Polkadot.Proto.Staking.Unbond
	19, // 9: TW.Polkadot.Proto.Staking.withdraw_unbonded:type_name -> TW.Polkadot.Proto.Staking.WithdrawUnbonded
	20, // 10: TW.Polkadot.Proto.Staking.nominate:type_name -> TW.Polkadot.Proto.Staking.Nominate
	22, // 11: TW.Polkadot.Proto.Staking.chill:type_name -> TW.Polkadot.Proto.Staking.Chill
	21, // 12: TW.Polkadot.Proto.Staking.chill_and_unbond:type_name -> TW.Polkadot.Proto.Staking.ChillAndUnbond
	18, // 13: TW.Polkadot.Proto.Staking.rebond:type_name -> TW.Polkadot.Proto.Staking.Rebond
	23, // 14: TW.Polkadot.Proto.Identity.join_identity_as_key:type_name -> TW.Polkadot.Proto.Identity.JoinIdentityAsKey
	24, // 15: TW.Polkadot.Proto.Identity.add_authorization:type_name -> TW.Polkadot.Proto.Identity.AddAuthorization
	6,  // 16: TW.Polkadot.Proto.PolymeshCall.identity_call:type_name -> TW.Polkadot.Proto.Identity
	1,  // 17: TW.Polkadot.Proto.SigningInput.era:type_name -> TW.Polkadot.Proto.Era
	4,  // 18: TW.Polkadot.Proto.SigningInput.balance_call:type_name -> TW.Polkadot.Proto.Balance
	5,  // 19: TW.Polkadot.Proto.SigningInput.staking_call:type_name -> TW.Polkadot.Proto.Staking
	7,  // 20: TW.Polkadot.Proto.SigningInput.polymesh_call:type_name -> TW.Polkadot.Proto.PolymeshCall
	27, // 21: TW.Polkadot.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	3,  // 22: TW.Polkadot.Proto.Balance.Transfer.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 23: TW.Polkadot.Proto.Balance.BatchTransfer.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	10, // 24: TW.Polkadot.Proto.Balance.BatchTransfer.transfers:type_name -> TW.Polkadot.Proto.Balance.Transfer
	3,  // 25: TW.Polkadot.Proto.Balance.AssetTransfer.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 26: TW.Polkadot.Proto.Balance.BatchAssetTransfer.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	12, // 27: TW.Polkadot.Proto.Balance.BatchAssetTransfer.transfers:type_name -> TW.Polkadot.Proto.Balance.AssetTransfer
	0,  // 28: TW.Polkadot.Proto.Staking.Bond.reward_destination:type_name -> TW.Polkadot.Proto.RewardDestination
	3,  // 29: TW.Polkadot.Proto.Staking.Bond.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	0,  // 30: TW.Polkadot.Proto.Staking.BondAndNominate.reward_destination:type_name -> TW.Polkadot.Proto.RewardDestination
	3,  // 31: TW.Polkadot.Proto.Staking.BondAndNominate.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 32: TW.Polkadot.Proto.Staking.BondExtra.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 33: TW.Polkadot.Proto.Staking.Unbond.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 34: TW.Polkadot.Proto.Staking.Rebond.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 35: TW.Polkadot.Proto.Staking.WithdrawUnbonded.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 36: TW.Polkadot.Proto.Staking.Nominate.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 37: TW.Polkadot.Proto.Staking.ChillAndUnbond.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 38: TW.Polkadot.Proto.Staking.Chill.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 39: TW.Polkadot.Proto.Identity.JoinIdentityAsKey.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	3,  // 40: TW.Polkadot.Proto.Identity.AddAuthorization.call_indices:type_name -> TW.Polkadot.Proto.CallIndices
	26, // 41: TW.Polkadot.Proto.Identity.AddAuthorization.data:type_name -> TW.Polkadot.Proto.Identity.AddAuthorization.AuthData
	25, // 42: TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.asset:type_name -> TW.Polkadot.Proto.Identity.AddAuthorization.Data
	25, // 43: TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.extrinsic:type_name -> TW.Polkadot.Proto.Identity.AddAuthorization.Data
	25, // 44: TW.Polkadot.Proto.Identity.AddAuthorization.AuthData.portfolio:type_name -> TW.Polkadot.Proto.Identity.AddAuthorization.Data
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_Polkadot_proto_init() }
func file_Polkadot_proto_init() {
	if File_Polkadot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Polkadot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Era); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomCallIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolymeshCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance_Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance_BatchTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance_AssetTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance_BatchAssetTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Bond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_BondAndNominate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_BondExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Unbond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Rebond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_WithdrawUnbonded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Nominate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ChillAndUnbond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Chill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_JoinIdentityAsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_AddAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_AddAuthorization_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Polkadot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_AddAuthorization_AuthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Polkadot_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CallIndices_Custom)(nil),
	}
	file_Polkadot_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Balance_Transfer_)(nil),
		(*Balance_BatchTransfer_)(nil),
		(*Balance_AssetTransfer_)(nil),
		(*Balance_BatchAssetTransfer_)(nil),
	}
	file_Polkadot_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Staking_Bond_)(nil),
		(*Staking_BondAndNominate_)(nil),
		(*Staking_BondExtra_)(nil),
		(*Staking_Unbond_)(nil),
		(*Staking_WithdrawUnbonded_)(nil),
		(*Staking_Nominate_)(nil),
		(*Staking_Chill_)(nil),
		(*Staking_ChillAndUnbond_)(nil),
		(*Staking_Rebond_)(nil),
	}
	file_Polkadot_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Identity_JoinIdentityAsKey_)(nil),
		(*Identity_AddAuthorization_)(nil),
	}
	file_Polkadot_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PolymeshCall_IdentityCall)(nil),
	}
	file_Polkadot_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SigningInput_BalanceCall)(nil),
		(*SigningInput_StakingCall)(nil),
		(*SigningInput_PolymeshCall)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Polkadot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Polkadot_proto_goTypes,
		DependencyIndexes: file_Polkadot_proto_depIdxs,
		EnumInfos:         file_Polkadot_proto_enumTypes,
		MessageInfos:      file_Polkadot_proto_msgTypes,
	}.Build()
	File_Polkadot_proto = out.File
	file_Polkadot_proto_rawDesc = nil
	file_Polkadot_proto_goTypes = nil
	file_Polkadot_proto_depIdxs = nil
}
