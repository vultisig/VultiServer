// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: THORChainSwap.proto

package thorchainswap

import (
	binance "github.com/vultisig/vultisigner/walletcore/protos/binance"
	bitcoin "github.com/vultisig/vultisigner/walletcore/protos/bitcoin"
	cosmos "github.com/vultisig/vultisigner/walletcore/protos/cosmos"
	ethereum "github.com/vultisig/vultisigner/walletcore/protos/ethereum"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported blockchains
type Chain int32

const (
	Chain_THOR Chain = 0
	Chain_BTC  Chain = 1
	Chain_ETH  Chain = 2
	Chain_BNB  Chain = 3
	Chain_DOGE Chain = 4
	Chain_BCH  Chain = 5
	Chain_LTC  Chain = 6
	Chain_ATOM Chain = 7
	Chain_AVAX Chain = 8
	Chain_BSC  Chain = 9
)

// Enum value maps for Chain.
var (
	Chain_name = map[int32]string{
		0: "THOR",
		1: "BTC",
		2: "ETH",
		3: "BNB",
		4: "DOGE",
		5: "BCH",
		6: "LTC",
		7: "ATOM",
		8: "AVAX",
		9: "BSC",
	}
	Chain_value = map[string]int32{
		"THOR": 0,
		"BTC":  1,
		"ETH":  2,
		"BNB":  3,
		"DOGE": 4,
		"BCH":  5,
		"LTC":  6,
		"ATOM": 7,
		"AVAX": 8,
		"BSC":  9,
	}
)

func (x Chain) Enum() *Chain {
	p := new(Chain)
	*p = x
	return p
}

func (x Chain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chain) Descriptor() protoreflect.EnumDescriptor {
	return file_THORChainSwap_proto_enumTypes[0].Descriptor()
}

func (Chain) Type() protoreflect.EnumType {
	return &file_THORChainSwap_proto_enumTypes[0]
}

func (x Chain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chain.Descriptor instead.
func (Chain) EnumDescriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{0}
}

// Predefined error codes
type ErrorCode int32

const (
	// OK
	ErrorCode_OK                                ErrorCode = 0
	ErrorCode_Error_general                     ErrorCode = 1
	ErrorCode_Error_Input_proto_deserialization ErrorCode = 2
	ErrorCode_Error_Unsupported_from_chain      ErrorCode = 13
	ErrorCode_Error_Unsupported_to_chain        ErrorCode = 14
	ErrorCode_Error_Invalid_from_address        ErrorCode = 15
	ErrorCode_Error_Invalid_to_address          ErrorCode = 16
	ErrorCode_Error_Invalid_vault_address       ErrorCode = 21
	ErrorCode_Error_Invalid_router_address      ErrorCode = 22
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "OK",
		1:  "Error_general",
		2:  "Error_Input_proto_deserialization",
		13: "Error_Unsupported_from_chain",
		14: "Error_Unsupported_to_chain",
		15: "Error_Invalid_from_address",
		16: "Error_Invalid_to_address",
		21: "Error_Invalid_vault_address",
		22: "Error_Invalid_router_address",
	}
	ErrorCode_value = map[string]int32{
		"OK":                                0,
		"Error_general":                     1,
		"Error_Input_proto_deserialization": 2,
		"Error_Unsupported_from_chain":      13,
		"Error_Unsupported_to_chain":        14,
		"Error_Invalid_from_address":        15,
		"Error_Invalid_to_address":          16,
		"Error_Invalid_vault_address":       21,
		"Error_Invalid_router_address":      22,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_THORChainSwap_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_THORChainSwap_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{1}
}

// An error code + a free text
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code of the error
	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=TW.THORChainSwap.Proto.ErrorCode" json:"code,omitempty"`
	// optional error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_THORChainSwap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_THORChainSwap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_OK
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Represents an asset.  Examples: BNB.BNB, RUNE.RUNE, BNB.RUNE-67C
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain ID
	Chain Chain `protobuf:"varint,1,opt,name=chain,proto3,enum=TW.THORChainSwap.Proto.Chain" json:"chain,omitempty"`
	// Symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The ID of the token (blockchain-specific format)
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_THORChainSwap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_THORChainSwap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetChain() Chain {
	if x != nil {
		return x.Chain
	}
	return Chain_THOR
}

func (x *Asset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Asset) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type StreamParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional Swap Interval ncy in blocks.
	// The default is 1 - time-optimised means getting the trade done quickly, regardless of the cost.
	Interval string `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Optional Swap Quantity. Swap interval times every Interval blocks.
	// The default is 0 - network will determine the number of swaps.
	Quantity string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *StreamParams) Reset() {
	*x = StreamParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_THORChainSwap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamParams) ProtoMessage() {}

func (x *StreamParams) ProtoReflect() protoreflect.Message {
	mi := &file_THORChainSwap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamParams.ProtoReflect.Descriptor instead.
func (*StreamParams) Descriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{2}
}

func (x *StreamParams) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *StreamParams) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

// Input for a swap between source and destination chains; for creating a TX on the source chain.
type SwapInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source chain
	FromAsset *Asset `protobuf:"bytes,1,opt,name=from_asset,json=fromAsset,proto3" json:"from_asset,omitempty"`
	// Source address, on source chain
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// Destination chain+asset, on destination chain
	ToAsset *Asset `protobuf:"bytes,3,opt,name=to_asset,json=toAsset,proto3" json:"to_asset,omitempty"`
	// Destination address, on destination chain
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// ThorChainSwap vault, on the source chain. Should be queried afresh, as it may change
	VaultAddress string `protobuf:"bytes,5,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// ThorChain router, only in case of Ethereum source network
	RouterAddress string `protobuf:"bytes,6,opt,name=router_address,json=routerAddress,proto3" json:"router_address,omitempty"`
	// The source amount, integer as string, in the smallest native unit of the chain
	FromAmount string `protobuf:"bytes,7,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	// Optional minimum accepted destination amount.  Actual destination amount will depend on current rates, limit amount can be used to prevent using very unfavorable rates.
	// The default is 0 - no price limit.
	ToAmountLimit string `protobuf:"bytes,8,opt,name=to_amount_limit,json=toAmountLimit,proto3" json:"to_amount_limit,omitempty"`
	// Optional affiliate fee destination address.  A Rune address.
	AffiliateFeeAddress string `protobuf:"bytes,9,opt,name=affiliate_fee_address,json=affiliateFeeAddress,proto3" json:"affiliate_fee_address,omitempty"`
	// Optional affiliate fee, percentage base points, e.g. 100 means 1%, 0 - 1000, as string. Empty means to ignore it.
	AffiliateFeeRateBp string `protobuf:"bytes,10,opt,name=affiliate_fee_rate_bp,json=affiliateFeeRateBp,proto3" json:"affiliate_fee_rate_bp,omitempty"`
	// Optional extra custom memo, reserved for later use.
	ExtraMemo string `protobuf:"bytes,11,opt,name=extra_memo,json=extraMemo,proto3" json:"extra_memo,omitempty"`
	// Optional expirationTime, will be now() + 15 min if not set
	ExpirationTime uint64 `protobuf:"varint,12,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// Optional streaming parameters. Use Streaming Swaps and Swap Optimisation strategy if set.
	// https://docs.thorchain.org/thorchain-finance/continuous-liquidity-pools#streaming-swaps-and-swap-optimisation
	StreamParams *StreamParams `protobuf:"bytes,13,opt,name=stream_params,json=streamParams,proto3" json:"stream_params,omitempty"`
}

func (x *SwapInput) Reset() {
	*x = SwapInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_THORChainSwap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapInput) ProtoMessage() {}

func (x *SwapInput) ProtoReflect() protoreflect.Message {
	mi := &file_THORChainSwap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapInput.ProtoReflect.Descriptor instead.
func (*SwapInput) Descriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{3}
}

func (x *SwapInput) GetFromAsset() *Asset {
	if x != nil {
		return x.FromAsset
	}
	return nil
}

func (x *SwapInput) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SwapInput) GetToAsset() *Asset {
	if x != nil {
		return x.ToAsset
	}
	return nil
}

func (x *SwapInput) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SwapInput) GetVaultAddress() string {
	if x != nil {
		return x.VaultAddress
	}
	return ""
}

func (x *SwapInput) GetRouterAddress() string {
	if x != nil {
		return x.RouterAddress
	}
	return ""
}

func (x *SwapInput) GetFromAmount() string {
	if x != nil {
		return x.FromAmount
	}
	return ""
}

func (x *SwapInput) GetToAmountLimit() string {
	if x != nil {
		return x.ToAmountLimit
	}
	return ""
}

func (x *SwapInput) GetAffiliateFeeAddress() string {
	if x != nil {
		return x.AffiliateFeeAddress
	}
	return ""
}

func (x *SwapInput) GetAffiliateFeeRateBp() string {
	if x != nil {
		return x.AffiliateFeeRateBp
	}
	return ""
}

func (x *SwapInput) GetExtraMemo() string {
	if x != nil {
		return x.ExtraMemo
	}
	return ""
}

func (x *SwapInput) GetExpirationTime() uint64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *SwapInput) GetStreamParams() *StreamParams {
	if x != nil {
		return x.StreamParams
	}
	return nil
}

// Result of the swap, a SigningInput struct for the specific chain
type SwapOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source chain
	FromChain Chain `protobuf:"varint,1,opt,name=from_chain,json=fromChain,proto3,enum=TW.THORChainSwap.Proto.Chain" json:"from_chain,omitempty"`
	// Destination chain
	ToChain Chain `protobuf:"varint,2,opt,name=to_chain,json=toChain,proto3,enum=TW.THORChainSwap.Proto.Chain" json:"to_chain,omitempty"`
	// Error code, filled in case of error, OK/empty on success
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Prepared unsigned transaction input, on the source chain, to THOR.  Some fields must be completed, and it has to be signed.
	//
	// Types that are assignable to SigningInputOneof:
	//
	//	*SwapOutput_Bitcoin
	//	*SwapOutput_Ethereum
	//	*SwapOutput_Binance
	//	*SwapOutput_Cosmos
	SigningInputOneof isSwapOutput_SigningInputOneof `protobuf_oneof:"signing_input_oneof"`
}

func (x *SwapOutput) Reset() {
	*x = SwapOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_THORChainSwap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapOutput) ProtoMessage() {}

func (x *SwapOutput) ProtoReflect() protoreflect.Message {
	mi := &file_THORChainSwap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapOutput.ProtoReflect.Descriptor instead.
func (*SwapOutput) Descriptor() ([]byte, []int) {
	return file_THORChainSwap_proto_rawDescGZIP(), []int{4}
}

func (x *SwapOutput) GetFromChain() Chain {
	if x != nil {
		return x.FromChain
	}
	return Chain_THOR
}

func (x *SwapOutput) GetToChain() Chain {
	if x != nil {
		return x.ToChain
	}
	return Chain_THOR
}

func (x *SwapOutput) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (m *SwapOutput) GetSigningInputOneof() isSwapOutput_SigningInputOneof {
	if m != nil {
		return m.SigningInputOneof
	}
	return nil
}

func (x *SwapOutput) GetBitcoin() *bitcoin.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*SwapOutput_Bitcoin); ok {
		return x.Bitcoin
	}
	return nil
}

func (x *SwapOutput) GetEthereum() *ethereum.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*SwapOutput_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *SwapOutput) GetBinance() *binance.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*SwapOutput_Binance); ok {
		return x.Binance
	}
	return nil
}

func (x *SwapOutput) GetCosmos() *cosmos.SigningInput {
	if x, ok := x.GetSigningInputOneof().(*SwapOutput_Cosmos); ok {
		return x.Cosmos
	}
	return nil
}

type isSwapOutput_SigningInputOneof interface {
	isSwapOutput_SigningInputOneof()
}

type SwapOutput_Bitcoin struct {
	Bitcoin *bitcoin.SigningInput `protobuf:"bytes,4,opt,name=bitcoin,proto3,oneof"`
}

type SwapOutput_Ethereum struct {
	Ethereum *ethereum.SigningInput `protobuf:"bytes,5,opt,name=ethereum,proto3,oneof"`
}

type SwapOutput_Binance struct {
	Binance *binance.SigningInput `protobuf:"bytes,6,opt,name=binance,proto3,oneof"`
}

type SwapOutput_Cosmos struct {
	Cosmos *cosmos.SigningInput `protobuf:"bytes,7,opt,name=cosmos,proto3,oneof"`
}

func (*SwapOutput_Bitcoin) isSwapOutput_SigningInputOneof() {}

func (*SwapOutput_Ethereum) isSwapOutput_SigningInputOneof() {}

func (*SwapOutput_Binance) isSwapOutput_SigningInputOneof() {}

func (*SwapOutput_Cosmos) isSwapOutput_SigningInputOneof() {}

var File_THORChainSwap_proto protoreflect.FileDescriptor

var file_THORChainSwap_proto_rawDesc = []byte{
	0x0a, 0x13, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57,
	0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd4, 0x04, 0x0a,
	0x09, 0x53, 0x77, 0x61, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x74,
	0x6f, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x07, 0x74, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x42, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77,
	0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0xc0, 0x03, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x54, 0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x07, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x54,
	0x48, 0x4f, 0x52, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x3a, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x57, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x65, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x43,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x4e, 0x42, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x47, 0x45, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x43, 0x48, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x43, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x54, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x56,
	0x41, 0x58, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x43, 0x10, 0x09, 0x2a, 0x90, 0x02,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x0d, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x0e, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x0f, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x10, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x15, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x16,
	0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_THORChainSwap_proto_rawDescOnce sync.Once
	file_THORChainSwap_proto_rawDescData = file_THORChainSwap_proto_rawDesc
)

func file_THORChainSwap_proto_rawDescGZIP() []byte {
	file_THORChainSwap_proto_rawDescOnce.Do(func() {
		file_THORChainSwap_proto_rawDescData = protoimpl.X.CompressGZIP(file_THORChainSwap_proto_rawDescData)
	})
	return file_THORChainSwap_proto_rawDescData
}

var file_THORChainSwap_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_THORChainSwap_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_THORChainSwap_proto_goTypes = []interface{}{
	(Chain)(0),                    // 0: TW.THORChainSwap.Proto.Chain
	(ErrorCode)(0),                // 1: TW.THORChainSwap.Proto.ErrorCode
	(*Error)(nil),                 // 2: TW.THORChainSwap.Proto.Error
	(*Asset)(nil),                 // 3: TW.THORChainSwap.Proto.Asset
	(*StreamParams)(nil),          // 4: TW.THORChainSwap.Proto.StreamParams
	(*SwapInput)(nil),             // 5: TW.THORChainSwap.Proto.SwapInput
	(*SwapOutput)(nil),            // 6: TW.THORChainSwap.Proto.SwapOutput
	(*bitcoin.SigningInput)(nil),  // 7: TW.Bitcoin.Proto.SigningInput
	(*ethereum.SigningInput)(nil), // 8: TW.Ethereum.Proto.SigningInput
	(*binance.SigningInput)(nil),  // 9: TW.Binance.Proto.SigningInput
	(*cosmos.SigningInput)(nil),   // 10: TW.Cosmos.Proto.SigningInput
}
var file_THORChainSwap_proto_depIdxs = []int32{
	1,  // 0: TW.THORChainSwap.Proto.Error.code:type_name -> TW.THORChainSwap.Proto.ErrorCode
	0,  // 1: TW.THORChainSwap.Proto.Asset.chain:type_name -> TW.THORChainSwap.Proto.Chain
	3,  // 2: TW.THORChainSwap.Proto.SwapInput.from_asset:type_name -> TW.THORChainSwap.Proto.Asset
	3,  // 3: TW.THORChainSwap.Proto.SwapInput.to_asset:type_name -> TW.THORChainSwap.Proto.Asset
	4,  // 4: TW.THORChainSwap.Proto.SwapInput.stream_params:type_name -> TW.THORChainSwap.Proto.StreamParams
	0,  // 5: TW.THORChainSwap.Proto.SwapOutput.from_chain:type_name -> TW.THORChainSwap.Proto.Chain
	0,  // 6: TW.THORChainSwap.Proto.SwapOutput.to_chain:type_name -> TW.THORChainSwap.Proto.Chain
	2,  // 7: TW.THORChainSwap.Proto.SwapOutput.error:type_name -> TW.THORChainSwap.Proto.Error
	7,  // 8: TW.THORChainSwap.Proto.SwapOutput.bitcoin:type_name -> TW.Bitcoin.Proto.SigningInput
	8,  // 9: TW.THORChainSwap.Proto.SwapOutput.ethereum:type_name -> TW.Ethereum.Proto.SigningInput
	9,  // 10: TW.THORChainSwap.Proto.SwapOutput.binance:type_name -> TW.Binance.Proto.SigningInput
	10, // 11: TW.THORChainSwap.Proto.SwapOutput.cosmos:type_name -> TW.Cosmos.Proto.SigningInput
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_THORChainSwap_proto_init() }
func file_THORChainSwap_proto_init() {
	if File_THORChainSwap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_THORChainSwap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_THORChainSwap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_THORChainSwap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_THORChainSwap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_THORChainSwap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_THORChainSwap_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SwapOutput_Bitcoin)(nil),
		(*SwapOutput_Ethereum)(nil),
		(*SwapOutput_Binance)(nil),
		(*SwapOutput_Cosmos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_THORChainSwap_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_THORChainSwap_proto_goTypes,
		DependencyIndexes: file_THORChainSwap_proto_depIdxs,
		EnumInfos:         file_THORChainSwap_proto_enumTypes,
		MessageInfos:      file_THORChainSwap_proto_msgTypes,
	}.Build()
	File_THORChainSwap_proto = out.File
	file_THORChainSwap_proto_rawDesc = nil
	file_THORChainSwap_proto_goTypes = nil
	file_THORChainSwap_proto_depIdxs = nil
}
