// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: Cardano.proto

package cardano

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A transaction output that can be used as input
type OutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// The index of this output within the transaction
	OutputIndex uint64 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{0}
}

func (x *OutPoint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *OutPoint) GetOutputIndex() uint64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

// Represents a token and an amount. Token is identified by PolicyID and name.
type TokenAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy ID of the token, as hex string (28x2 digits)
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The name of the asset (within the policy)
	AssetName string `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// The amount (uint256, serialized big endian)
	Amount []byte `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The name of the asset (hex encoded). Ignored if `asset_name` is set
	AssetNameHex string `protobuf:"bytes,4,opt,name=asset_name_hex,json=assetNameHex,proto3" json:"asset_name_hex,omitempty"`
}

func (x *TokenAmount) Reset() {
	*x = TokenAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAmount) ProtoMessage() {}

func (x *TokenAmount) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAmount.ProtoReflect.Descriptor instead.
func (*TokenAmount) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{1}
}

func (x *TokenAmount) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *TokenAmount) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TokenAmount) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TokenAmount) GetAssetNameHex() string {
	if x != nil {
		return x.AssetNameHex
	}
	return ""
}

// One input for a transaction
type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UTXO
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The owner address (string)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// ADA amount in the UTXO
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// optional token amounts in the UTXO
	TokenAmount []*TokenAmount `protobuf:"bytes,4,rep,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{2}
}

func (x *TxInput) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *TxInput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxInput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TxInput) GetTokenAmount() []*TokenAmount {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

// One output for a transaction
type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination address (string)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// ADA amount
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// optional token amounts
	TokenAmount []*TokenAmount `protobuf:"bytes,3,rep,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{3}
}

func (x *TxOutput) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxOutput) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TxOutput) GetTokenAmount() []*TokenAmount {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

// Collection of tokens with amount
type TokenBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []*TokenAmount `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenBundle) Reset() {
	*x = TokenBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBundle) ProtoMessage() {}

func (x *TokenBundle) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBundle.ProtoReflect.Descriptor instead.
func (*TokenBundle) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBundle) GetToken() []*TokenAmount {
	if x != nil {
		return x.Token
	}
	return nil
}

// Message for simple Transfer tx
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination address as string
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Requested ADA amount to be transferred. Output can be different only in use_max_amount case.
	// Note that Cardano has a minimum amount per UTXO, see TWCardanoMinAdaAmount.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional token(s) to be transferred
	// Currently only one token type to be transferred per transaction is supported
	TokenAmount *TokenBundle `protobuf:"bytes,4,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	// Request max amount option. If set, tx will send all possible amounts from all inputs, including all tokens; there will be no change; requested amount and token_amount is disregarded in this case.
	UseMaxAmount bool `protobuf:"varint,5,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
	// Optional fee overriding. If left to 0, optimal fee will be calculated. If set, exactly this value will be used as fee.
	// Use it with care, it may result in underfunded or wasteful fee.
	ForceFee uint64 `protobuf:"varint,6,opt,name=force_fee,json=forceFee,proto3" json:"force_fee,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{5}
}

func (x *Transfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Transfer) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetTokenAmount() *TokenBundle {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

func (x *Transfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

func (x *Transfer) GetForceFee() uint64 {
	if x != nil {
		return x.ForceFee
	}
	return 0
}

// Register a staking key for the account, prerequisite for Staking.
// Note: staking messages are typically used with a 1-output-to-self transaction.
type RegisterStakingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// Amount deposited in this TX. Should be 2 ADA (2000000). If not set correctly, TX will be rejected. See also Delegate.deposit_amount.
	DepositAmount uint64 `protobuf:"varint,2,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
}

func (x *RegisterStakingKey) Reset() {
	*x = RegisterStakingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterStakingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStakingKey) ProtoMessage() {}

func (x *RegisterStakingKey) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStakingKey.ProtoReflect.Descriptor instead.
func (*RegisterStakingKey) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterStakingKey) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *RegisterStakingKey) GetDepositAmount() uint64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

// Deregister staking key. can be done when staking is stopped completely. The Staking deposit is returned at this time.
type DeregisterStakingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// Amount undeposited in this TX. Should be 2 ADA (2000000). If not set correctly, TX will be rejected. See also RegisterStakingKey.deposit_amount.
	UndepositAmount uint64 `protobuf:"varint,2,opt,name=undeposit_amount,json=undepositAmount,proto3" json:"undeposit_amount,omitempty"`
}

func (x *DeregisterStakingKey) Reset() {
	*x = DeregisterStakingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregisterStakingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterStakingKey) ProtoMessage() {}

func (x *DeregisterStakingKey) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterStakingKey.ProtoReflect.Descriptor instead.
func (*DeregisterStakingKey) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{7}
}

func (x *DeregisterStakingKey) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *DeregisterStakingKey) GetUndepositAmount() uint64 {
	if x != nil {
		return x.UndepositAmount
	}
	return 0
}

// Delegate funds in this account to a specified staking pool.
type Delegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// PoolID of staking pool
	PoolId []byte `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Amount deposited in this TX. Should be 0. If not set correctly, TX will be rejected. See also RegisterStakingKey.deposit_amount.
	DepositAmount uint64 `protobuf:"varint,3,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`
}

func (x *Delegate) Reset() {
	*x = Delegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegate) ProtoMessage() {}

func (x *Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegate.ProtoReflect.Descriptor instead.
func (*Delegate) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{8}
}

func (x *Delegate) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *Delegate) GetPoolId() []byte {
	if x != nil {
		return x.PoolId
	}
	return nil
}

func (x *Delegate) GetDepositAmount() uint64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

// Withdraw earned staking reward.
type Withdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Staking address (as string)
	StakingAddress string `protobuf:"bytes,1,opt,name=staking_address,json=stakingAddress,proto3" json:"staking_address,omitempty"`
	// Withdrawal amount. Should match the real value of the earned reward.
	WithdrawAmount uint64 `protobuf:"varint,2,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{9}
}

func (x *Withdraw) GetStakingAddress() string {
	if x != nil {
		return x.StakingAddress
	}
	return ""
}

func (x *Withdraw) GetWithdrawAmount() uint64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

// Describes a preliminary transaction plan.
type TransactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total coins in the utxos
	AvailableAmount uint64 `protobuf:"varint,1,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	// coins in the output UTXO
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// coin amount deducted as fee
	Fee uint64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// coins in the change UTXO
	Change uint64 `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
	// coins deposited (going to deposit) in this TX
	Deposit uint64 `protobuf:"varint,10,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// coins undeposited (coming from deposit) in this TX
	Undeposit uint64 `protobuf:"varint,11,opt,name=undeposit,proto3" json:"undeposit,omitempty"`
	// total tokens in the utxos (optional)
	AvailableTokens []*TokenAmount `protobuf:"bytes,5,rep,name=available_tokens,json=availableTokens,proto3" json:"available_tokens,omitempty"`
	// tokens in the output (optional)
	OutputTokens []*TokenAmount `protobuf:"bytes,6,rep,name=output_tokens,json=outputTokens,proto3" json:"output_tokens,omitempty"`
	// tokens in the change (optional)
	ChangeTokens []*TokenAmount `protobuf:"bytes,7,rep,name=change_tokens,json=changeTokens,proto3" json:"change_tokens,omitempty"`
	// The selected UTXOs, subset ot the input UTXOs
	Utxos []*TxInput `protobuf:"bytes,8,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,9,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Optional additional destination addresses, additional to first to_address output
	ExtraOutputs []*TxOutput `protobuf:"bytes,12,rep,name=extra_outputs,json=extraOutputs,proto3" json:"extra_outputs,omitempty"`
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionPlan) GetAvailableAmount() uint64 {
	if x != nil {
		return x.AvailableAmount
	}
	return 0
}

func (x *TransactionPlan) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionPlan) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionPlan) GetChange() uint64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *TransactionPlan) GetDeposit() uint64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *TransactionPlan) GetUndeposit() uint64 {
	if x != nil {
		return x.Undeposit
	}
	return 0
}

func (x *TransactionPlan) GetAvailableTokens() []*TokenAmount {
	if x != nil {
		return x.AvailableTokens
	}
	return nil
}

func (x *TransactionPlan) GetOutputTokens() []*TokenAmount {
	if x != nil {
		return x.OutputTokens
	}
	return nil
}

func (x *TransactionPlan) GetChangeTokens() []*TokenAmount {
	if x != nil {
		return x.ChangeTokens
	}
	return nil
}

func (x *TransactionPlan) GetUtxos() []*TxInput {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *TransactionPlan) GetExtraOutputs() []*TxOutput {
	if x != nil {
		return x.ExtraOutputs
	}
	return nil
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available input UTXOs
	Utxos []*TxInput `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"`
	// Available private keys (double extended keys); every input UTXO address should be covered
	// In case of Plan only, keys should be present, in correct number
	PrivateKey [][]byte `protobuf:"bytes,2,rep,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Later this can be made oneof if more message types are supported
	TransferMessage *Transfer `protobuf:"bytes,3,opt,name=transfer_message,json=transferMessage,proto3" json:"transfer_message,omitempty"`
	// Optional, used in case of Staking Key registration (prerequisite for Staking)
	RegisterStakingKey *RegisterStakingKey `protobuf:"bytes,6,opt,name=register_staking_key,json=registerStakingKey,proto3" json:"register_staking_key,omitempty"`
	// Optional, used in case of (re)delegation
	Delegate *Delegate `protobuf:"bytes,7,opt,name=delegate,proto3" json:"delegate,omitempty"`
	// Optional, used in case of withdraw
	Withdraw *Withdraw `protobuf:"bytes,8,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	// Optional
	DeregisterStakingKey *DeregisterStakingKey `protobuf:"bytes,9,opt,name=deregister_staking_key,json=deregisterStakingKey,proto3" json:"deregister_staking_key,omitempty"`
	// Time-to-live time of the TX
	Ttl uint64 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional plan, if missing it will be computed
	Plan *TransactionPlan `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	// extra output UTXOs
	ExtraOutputs []*TxOutput `protobuf:"bytes,10,rep,name=extra_outputs,json=extraOutputs,proto3" json:"extra_outputs,omitempty"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{11}
}

func (x *SigningInput) GetUtxos() []*TxInput {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *SigningInput) GetPrivateKey() [][]byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetTransferMessage() *Transfer {
	if x != nil {
		return x.TransferMessage
	}
	return nil
}

func (x *SigningInput) GetRegisterStakingKey() *RegisterStakingKey {
	if x != nil {
		return x.RegisterStakingKey
	}
	return nil
}

func (x *SigningInput) GetDelegate() *Delegate {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *SigningInput) GetWithdraw() *Withdraw {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

func (x *SigningInput) GetDeregisterStakingKey() *DeregisterStakingKey {
	if x != nil {
		return x.DeregisterStakingKey
	}
	return nil
}

func (x *SigningInput) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *SigningInput) GetPlan() *TransactionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *SigningInput) GetExtraOutputs() []*TxOutput {
	if x != nil {
		return x.ExtraOutputs
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoded transaction bytes
	Encoded []byte `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// TxID, derived from transaction data, also needed for submission
	TxId []byte `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Cardano_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Cardano_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Cardano_proto_rawDescGZIP(), []int{12}
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetTxId() []byte {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_Cardano_proto protoreflect.FileDescriptor

var file_Cardano_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x46, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x65,
	0x78, 0x22, 0xb6, 0x01, 0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7e, 0x0a, 0x08, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xed,
	0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x65, 0x65, 0x22, 0x64,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x14, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x75, 0x6e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x73, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xd7, 0x04, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x56, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x08, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x5c, 0x0a, 0x16, 0x64, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52,
	0x14, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x3f,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22,
	0x98, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Cardano_proto_rawDescOnce sync.Once
	file_Cardano_proto_rawDescData = file_Cardano_proto_rawDesc
)

func file_Cardano_proto_rawDescGZIP() []byte {
	file_Cardano_proto_rawDescOnce.Do(func() {
		file_Cardano_proto_rawDescData = protoimpl.X.CompressGZIP(file_Cardano_proto_rawDescData)
	})
	return file_Cardano_proto_rawDescData
}

var file_Cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Cardano_proto_goTypes = []interface{}{
	(*OutPoint)(nil),             // 0: TW.Cardano.Proto.OutPoint
	(*TokenAmount)(nil),          // 1: TW.Cardano.Proto.TokenAmount
	(*TxInput)(nil),              // 2: TW.Cardano.Proto.TxInput
	(*TxOutput)(nil),             // 3: TW.Cardano.Proto.TxOutput
	(*TokenBundle)(nil),          // 4: TW.Cardano.Proto.TokenBundle
	(*Transfer)(nil),             // 5: TW.Cardano.Proto.Transfer
	(*RegisterStakingKey)(nil),   // 6: TW.Cardano.Proto.RegisterStakingKey
	(*DeregisterStakingKey)(nil), // 7: TW.Cardano.Proto.DeregisterStakingKey
	(*Delegate)(nil),             // 8: TW.Cardano.Proto.Delegate
	(*Withdraw)(nil),             // 9: TW.Cardano.Proto.Withdraw
	(*TransactionPlan)(nil),      // 10: TW.Cardano.Proto.TransactionPlan
	(*SigningInput)(nil),         // 11: TW.Cardano.Proto.SigningInput
	(*SigningOutput)(nil),        // 12: TW.Cardano.Proto.SigningOutput
	(common.SigningError)(0),     // 13: TW.Common.Proto.SigningError
}
var file_Cardano_proto_depIdxs = []int32{
	0,  // 0: TW.Cardano.Proto.TxInput.out_point:type_name -> TW.Cardano.Proto.OutPoint
	1,  // 1: TW.Cardano.Proto.TxInput.token_amount:type_name -> TW.Cardano.Proto.TokenAmount
	1,  // 2: TW.Cardano.Proto.TxOutput.token_amount:type_name -> TW.Cardano.Proto.TokenAmount
	1,  // 3: TW.Cardano.Proto.TokenBundle.token:type_name -> TW.Cardano.Proto.TokenAmount
	4,  // 4: TW.Cardano.Proto.Transfer.token_amount:type_name -> TW.Cardano.Proto.TokenBundle
	1,  // 5: TW.Cardano.Proto.TransactionPlan.available_tokens:type_name -> TW.Cardano.Proto.TokenAmount
	1,  // 6: TW.Cardano.Proto.TransactionPlan.output_tokens:type_name -> TW.Cardano.Proto.TokenAmount
	1,  // 7: TW.Cardano.Proto.TransactionPlan.change_tokens:type_name -> TW.Cardano.Proto.TokenAmount
	2,  // 8: TW.Cardano.Proto.TransactionPlan.utxos:type_name -> TW.Cardano.Proto.TxInput
	13, // 9: TW.Cardano.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	3,  // 10: TW.Cardano.Proto.TransactionPlan.extra_outputs:type_name -> TW.Cardano.Proto.TxOutput
	2,  // 11: TW.Cardano.Proto.SigningInput.utxos:type_name -> TW.Cardano.Proto.TxInput
	5,  // 12: TW.Cardano.Proto.SigningInput.transfer_message:type_name -> TW.Cardano.Proto.Transfer
	6,  // 13: TW.Cardano.Proto.SigningInput.register_staking_key:type_name -> TW.Cardano.Proto.RegisterStakingKey
	8,  // 14: TW.Cardano.Proto.SigningInput.delegate:type_name -> TW.Cardano.Proto.Delegate
	9,  // 15: TW.Cardano.Proto.SigningInput.withdraw:type_name -> TW.Cardano.Proto.Withdraw
	7,  // 16: TW.Cardano.Proto.SigningInput.deregister_staking_key:type_name -> TW.Cardano.Proto.DeregisterStakingKey
	10, // 17: TW.Cardano.Proto.SigningInput.plan:type_name -> TW.Cardano.Proto.TransactionPlan
	3,  // 18: TW.Cardano.Proto.SigningInput.extra_outputs:type_name -> TW.Cardano.Proto.TxOutput
	13, // 19: TW.Cardano.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_Cardano_proto_init() }
func file_Cardano_proto_init() {
	if File_Cardano_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Cardano_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterStakingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregisterStakingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Cardano_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Cardano_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Cardano_proto_goTypes,
		DependencyIndexes: file_Cardano_proto_depIdxs,
		MessageInfos:      file_Cardano_proto_msgTypes,
	}.Build()
	File_Cardano_proto = out.File
	file_Cardano_proto_rawDesc = nil
	file_Cardano_proto_goTypes = nil
	file_Cardano_proto_depIdxs = nil
}
