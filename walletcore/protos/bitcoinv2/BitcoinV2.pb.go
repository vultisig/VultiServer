// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: BitcoinV2.proto

package bitcoinv2

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InputSelector int32

const (
	// Automatically select enough inputs in an ascending order to cover the outputs of the transaction.
	InputSelector_SelectAscending InputSelector = 0
	// Automatically select enough inputs in the given order to cover the outputs of the transaction.
	InputSelector_SelectInOrder InputSelector = 1
	// Automatically select enough inputs in an descending order to cover the outputs of the transaction.
	InputSelector_SelectDescending InputSelector = 2
	// Use all the inputs provided in the given order.
	InputSelector_UseAll InputSelector = 10
)

// Enum value maps for InputSelector.
var (
	InputSelector_name = map[int32]string{
		0:  "SelectAscending",
		1:  "SelectInOrder",
		2:  "SelectDescending",
		10: "UseAll",
	}
	InputSelector_value = map[string]int32{
		"SelectAscending":  0,
		"SelectInOrder":    1,
		"SelectDescending": 2,
		"UseAll":           10,
	}
)

func (x InputSelector) Enum() *InputSelector {
	p := new(InputSelector)
	*p = x
	return p
}

func (x InputSelector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputSelector) Descriptor() protoreflect.EnumDescriptor {
	return file_BitcoinV2_proto_enumTypes[0].Descriptor()
}

func (InputSelector) Type() protoreflect.EnumType {
	return &file_BitcoinV2_proto_enumTypes[0]
}

func (x InputSelector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputSelector.Descriptor instead.
func (InputSelector) EnumDescriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{0}
}

type TransactionVersion int32

const (
	// V1 is used by default.
	TransactionVersion_UseDefault TransactionVersion = 0
	// Original transaction version.
	TransactionVersion_V1 TransactionVersion = 1
	// https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki#specification
	TransactionVersion_V2 TransactionVersion = 2
)

// Enum value maps for TransactionVersion.
var (
	TransactionVersion_name = map[int32]string{
		0: "UseDefault",
		1: "V1",
		2: "V2",
	}
	TransactionVersion_value = map[string]int32{
		"UseDefault": 0,
		"V1":         1,
		"V2":         2,
	}
)

func (x TransactionVersion) Enum() *TransactionVersion {
	p := new(TransactionVersion)
	*p = x
	return p
}

func (x TransactionVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_BitcoinV2_proto_enumTypes[1].Descriptor()
}

func (TransactionVersion) Type() protoreflect.EnumType {
	return &file_BitcoinV2_proto_enumTypes[1]
}

func (x TransactionVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionVersion.Descriptor instead.
func (TransactionVersion) EnumDescriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{1}
}

type PreSigningOutput_SigningMethod int32

const (
	// Used for P2SH and P2PKH - standard ecdsa secp256k1 signing
	PreSigningOutput_Legacy PreSigningOutput_SigningMethod = 0
	// Used for P2WSH and P2WPKH - standard ecdsa secp256k1 signing
	PreSigningOutput_Segwit PreSigningOutput_SigningMethod = 1
	// Used for P2TR key-path and P2TR script-pay - schnorr signing
	PreSigningOutput_Taproot PreSigningOutput_SigningMethod = 2
)

// Enum value maps for PreSigningOutput_SigningMethod.
var (
	PreSigningOutput_SigningMethod_name = map[int32]string{
		0: "Legacy",
		1: "Segwit",
		2: "Taproot",
	}
	PreSigningOutput_SigningMethod_value = map[string]int32{
		"Legacy":  0,
		"Segwit":  1,
		"Taproot": 2,
	}
)

func (x PreSigningOutput_SigningMethod) Enum() *PreSigningOutput_SigningMethod {
	p := new(PreSigningOutput_SigningMethod)
	*p = x
	return p
}

func (x PreSigningOutput_SigningMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreSigningOutput_SigningMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_BitcoinV2_proto_enumTypes[2].Descriptor()
}

func (PreSigningOutput_SigningMethod) Type() protoreflect.EnumType {
	return &file_BitcoinV2_proto_enumTypes[2]
}

func (x PreSigningOutput_SigningMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreSigningOutput_SigningMethod.Descriptor instead.
func (PreSigningOutput_SigningMethod) EnumDescriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{8, 0}
}

// Either a public key or public key hash.
type PublicKeyOrHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*PublicKeyOrHash_Pubkey
	//	*PublicKeyOrHash_Hash
	Variant isPublicKeyOrHash_Variant `protobuf_oneof:"variant"`
}

func (x *PublicKeyOrHash) Reset() {
	*x = PublicKeyOrHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyOrHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyOrHash) ProtoMessage() {}

func (x *PublicKeyOrHash) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyOrHash.ProtoReflect.Descriptor instead.
func (*PublicKeyOrHash) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{0}
}

func (m *PublicKeyOrHash) GetVariant() isPublicKeyOrHash_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *PublicKeyOrHash) GetPubkey() []byte {
	if x, ok := x.GetVariant().(*PublicKeyOrHash_Pubkey); ok {
		return x.Pubkey
	}
	return nil
}

func (x *PublicKeyOrHash) GetHash() []byte {
	if x, ok := x.GetVariant().(*PublicKeyOrHash_Hash); ok {
		return x.Hash
	}
	return nil
}

type isPublicKeyOrHash_Variant interface {
	isPublicKeyOrHash_Variant()
}

type PublicKeyOrHash_Pubkey struct {
	// Public key bytes.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3,oneof"`
}

type PublicKeyOrHash_Hash struct {
	// Public key hash.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*PublicKeyOrHash_Pubkey) isPublicKeyOrHash_Variant() {}

func (*PublicKeyOrHash_Hash) isPublicKeyOrHash_Variant() {}

// Bitcoin transaction out-point reference.
type OutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the referenced transaction (network byte order, usually needs to be reversed).
	// The referenced transaction ID in REVERSED order.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The position in the previous transactions output that this input references.
	Vout uint32 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{1}
}

func (x *OutPoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *OutPoint) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the previous transaction's output.
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The amount of satoshis of this input.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The sighash type, normally `All`.
	// See `TWBitcoinSigHashType` enum.
	SighashType uint32 `protobuf:"varint,3,opt,name=sighash_type,json=sighashType,proto3" json:"sighash_type,omitempty"`
	// Optional sequence number, used for timelocks, replace-by-fee, etc.
	// Leave empty to use a default 4294967295 (0xFFFFFFFF) value.
	Sequence *Input_Sequence `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Script for claiming this UTXO.
	//
	// Types that are assignable to ClaimingScript:
	//
	//	*Input_ScriptBuilder
	//	*Input_ScriptData
	//	*Input_ReceiverAddress
	ClaimingScript isInput_ClaimingScript `protobuf_oneof:"claiming_script"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2}
}

func (x *Input) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *Input) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Input) GetSighashType() uint32 {
	if x != nil {
		return x.SighashType
	}
	return 0
}

func (x *Input) GetSequence() *Input_Sequence {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (m *Input) GetClaimingScript() isInput_ClaimingScript {
	if m != nil {
		return m.ClaimingScript
	}
	return nil
}

func (x *Input) GetScriptBuilder() *Input_InputBuilder {
	if x, ok := x.GetClaimingScript().(*Input_ScriptBuilder); ok {
		return x.ScriptBuilder
	}
	return nil
}

func (x *Input) GetScriptData() []byte {
	if x, ok := x.GetClaimingScript().(*Input_ScriptData); ok {
		return x.ScriptData
	}
	return nil
}

func (x *Input) GetReceiverAddress() string {
	if x, ok := x.GetClaimingScript().(*Input_ReceiverAddress); ok {
		return x.ReceiverAddress
	}
	return ""
}

type isInput_ClaimingScript interface {
	isInput_ClaimingScript()
}

type Input_ScriptBuilder struct {
	// Construct claiming script with a builder pattern.
	ScriptBuilder *Input_InputBuilder `protobuf:"bytes,5,opt,name=script_builder,json=scriptBuilder,proto3,oneof"`
}

type Input_ScriptData struct {
	// Spending script pubkey data.
	// Use this variant if the UTXO claiming script is known already, otherwise use `InputBuilder`.
	// Please note that the signing method (eg "legacy" or "segwit") will be determined by parsing the script data as:
	// - P2PK, P2PKH - legacy signing method;
	// - P2WPKH - segwit signing method.
	ScriptData []byte `protobuf:"bytes,6,opt,name=script_data,json=scriptData,proto3,oneof"`
}

type Input_ReceiverAddress struct {
	// Derive a spending script pubkey from a receiver address.
	// E.g "bc1" segwit address will be P2WPKH claiming script.
	// TODO consider deprecating this because we can't determine if the script pubkey is P2PK or P2PKH actually.
	ReceiverAddress string `protobuf:"bytes,7,opt,name=receiver_address,json=receiverAddress,proto3,oneof"`
}

func (*Input_ScriptBuilder) isInput_ClaimingScript() {}

func (*Input_ScriptData) isInput_ClaimingScript() {}

func (*Input_ReceiverAddress) isInput_ClaimingScript() {}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of satoshis to send.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Types that are assignable to ToRecipient:
	//
	//	*Output_Builder
	//	*Output_CustomScriptPubkey
	//	*Output_ToAddress
	ToRecipient isOutput_ToRecipient `protobuf_oneof:"to_recipient"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3}
}

func (x *Output) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (m *Output) GetToRecipient() isOutput_ToRecipient {
	if m != nil {
		return m.ToRecipient
	}
	return nil
}

func (x *Output) GetBuilder() *Output_OutputBuilder {
	if x, ok := x.GetToRecipient().(*Output_Builder); ok {
		return x.Builder
	}
	return nil
}

func (x *Output) GetCustomScriptPubkey() []byte {
	if x, ok := x.GetToRecipient().(*Output_CustomScriptPubkey); ok {
		return x.CustomScriptPubkey
	}
	return nil
}

func (x *Output) GetToAddress() string {
	if x, ok := x.GetToRecipient().(*Output_ToAddress); ok {
		return x.ToAddress
	}
	return ""
}

type isOutput_ToRecipient interface {
	isOutput_ToRecipient()
}

type Output_Builder struct {
	// Construct output with builder pattern.
	Builder *Output_OutputBuilder `protobuf:"bytes,2,opt,name=builder,proto3,oneof"`
}

type Output_CustomScriptPubkey struct {
	// Construct output by providing the scriptPubkey directly.
	CustomScriptPubkey []byte `protobuf:"bytes,3,opt,name=custom_script_pubkey,json=customScriptPubkey,proto3,oneof"`
}

type Output_ToAddress struct {
	// Derive the expected output from the provided address.
	ToAddress string `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3,oneof"`
}

func (*Output_Builder) isOutput_ToRecipient() {}

func (*Output_CustomScriptPubkey) isOutput_ToRecipient() {}

func (*Output_ToAddress) isOutput_ToRecipient() {}

type ChainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// P2PKH prefix for this chain.
	P2PkhPrefix uint32 `protobuf:"varint,1,opt,name=p2pkh_prefix,json=p2pkhPrefix,proto3" json:"p2pkh_prefix,omitempty"`
	// P2SH prefix for this coin type
	P2ShPrefix uint32 `protobuf:"varint,2,opt,name=p2sh_prefix,json=p2shPrefix,proto3" json:"p2sh_prefix,omitempty"`
}

func (x *ChainInfo) Reset() {
	*x = ChainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInfo) ProtoMessage() {}

func (x *ChainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInfo.ProtoReflect.Descriptor instead.
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{4}
}

func (x *ChainInfo) GetP2PkhPrefix() uint32 {
	if x != nil {
		return x.P2PkhPrefix
	}
	return 0
}

func (x *ChainInfo) GetP2ShPrefix() uint32 {
	if x != nil {
		return x.P2ShPrefix
	}
	return 0
}

type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction version.
	Version TransactionVersion `protobuf:"varint,1,opt,name=version,proto3,enum=TW.BitcoinV2.Proto.TransactionVersion" json:"version,omitempty"`
	// User private keys.
	// Only required if the `sign` method is called.
	PrivateKeys [][]byte `protobuf:"bytes,2,rep,name=private_keys,json=privateKeys,proto3" json:"private_keys,omitempty"`
	// User public keys.
	// Only required if the `plan`, `preImageHash` methods are called.
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// (optional) Block height or timestamp indicating at what point transactions can be included in a block.
	// Zero by default.
	LockTime uint32 `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// The inputs to spend.
	Inputs []*Input `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The output of the transaction. Note that the change output is specified
	// in the `change_output` field.
	Outputs []*Output `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// How the inputs should be selected.
	InputSelector InputSelector `protobuf:"varint,7,opt,name=input_selector,json=inputSelector,proto3,enum=TW.BitcoinV2.Proto.InputSelector" json:"input_selector,omitempty"`
	// The amount of satoshis per vbyte ("satVb"), used for fee calculation.
	// Can be satoshis per byte ("satB") **ONLY** when transaction does not contain segwit UTXOs.
	FeePerVb int64 `protobuf:"varint,8,opt,name=fee_per_vb,json=feePerVb,proto3" json:"fee_per_vb,omitempty"`
	// (optional) The change output to be added (return to sender) at the end of the outputs list.
	// The `Output.value` will be overwritten, leave default.
	// Note there can be no change output if the change amount is less than dust threshold.
	// Leave empty to explicitly disable change output creation.
	ChangeOutput *Output `protobuf:"bytes,9,opt,name=change_output,json=changeOutput,proto3" json:"change_output,omitempty"`
	// The only output with a max available amount to be send.
	// If set, `SigningInput.outputs` and `SigningInput.change` will be ignored.
	// The `Output.value` will be overwritten, leave default.
	MaxAmountOutput *Output `protobuf:"bytes,10,opt,name=max_amount_output,json=maxAmountOutput,proto3" json:"max_amount_output,omitempty"`
	// Chain info includes p2pkh, p2sh address prefixes.
	// The parameter needs to be set if an input/output has a receiver address pattern.
	ChainInfo *ChainInfo `protobuf:"bytes,13,opt,name=chain_info,json=chainInfo,proto3" json:"chain_info,omitempty"`
	// One of the "Dust" amount policies.
	// Later, we plan to add support for `DynamicDust` policy with a `min_relay_fee` amount.
	//
	// Types that are assignable to DustPolicy:
	//
	//	*SigningInput_FixedDustThreshold
	DustPolicy isSigningInput_DustPolicy `protobuf_oneof:"dust_policy"`
	// Whether disable auxiliary random data when signing.
	// Use for testing **ONLY**.
	DangerousUseFixedSchnorrRng bool `protobuf:"varint,20,opt,name=dangerous_use_fixed_schnorr_rng,json=dangerousUseFixedSchnorrRng,proto3" json:"dangerous_use_fixed_schnorr_rng,omitempty"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{5}
}

func (x *SigningInput) GetVersion() TransactionVersion {
	if x != nil {
		return x.Version
	}
	return TransactionVersion_UseDefault
}

func (x *SigningInput) GetPrivateKeys() [][]byte {
	if x != nil {
		return x.PrivateKeys
	}
	return nil
}

func (x *SigningInput) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *SigningInput) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *SigningInput) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SigningInput) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *SigningInput) GetInputSelector() InputSelector {
	if x != nil {
		return x.InputSelector
	}
	return InputSelector_SelectAscending
}

func (x *SigningInput) GetFeePerVb() int64 {
	if x != nil {
		return x.FeePerVb
	}
	return 0
}

func (x *SigningInput) GetChangeOutput() *Output {
	if x != nil {
		return x.ChangeOutput
	}
	return nil
}

func (x *SigningInput) GetMaxAmountOutput() *Output {
	if x != nil {
		return x.MaxAmountOutput
	}
	return nil
}

func (x *SigningInput) GetChainInfo() *ChainInfo {
	if x != nil {
		return x.ChainInfo
	}
	return nil
}

func (m *SigningInput) GetDustPolicy() isSigningInput_DustPolicy {
	if m != nil {
		return m.DustPolicy
	}
	return nil
}

func (x *SigningInput) GetFixedDustThreshold() int64 {
	if x, ok := x.GetDustPolicy().(*SigningInput_FixedDustThreshold); ok {
		return x.FixedDustThreshold
	}
	return 0
}

func (x *SigningInput) GetDangerousUseFixedSchnorrRng() bool {
	if x != nil {
		return x.DangerousUseFixedSchnorrRng
	}
	return false
}

type isSigningInput_DustPolicy interface {
	isSigningInput_DustPolicy()
}

type SigningInput_FixedDustThreshold struct {
	// Use a constant "Dust" threshold.
	FixedDustThreshold int64 `protobuf:"varint,14,opt,name=fixed_dust_threshold,json=fixedDustThreshold,proto3,oneof"`
}

func (*SigningInput_FixedDustThreshold) isSigningInput_DustPolicy() {}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The protocol version, is currently expected to be 1 or 2 (BIP68).
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Block height or timestamp indicating at what point transactions can be included in a block.
	// Zero by default.
	LockTime uint32 `protobuf:"varint,2,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// The transaction inputs.
	Inputs []*Transaction_TransactionInput `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The transaction outputs.
	Outputs []*Transaction_TransactionOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{6}
}

func (x *Transaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Transaction) GetInputs() []*Transaction_TransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Transaction) GetOutputs() []*Transaction_TransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type TransactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,1,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// / Error description.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Selected unspent transaction outputs (subset of all input UTXOs).
	Inputs []*Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Transaction outputs including a change output if applied.
	Outputs []*Output `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Maximum available amount in all the transaction input UTXOs.
	// That is an amount that will be spent by this transaction.
	AvailableAmount int64 `protobuf:"varint,5,opt,name=available_amount,json=availableAmount,proto3" json:"available_amount,omitempty"`
	// Total sending amount in all the transaction outputs.
	// That is an amount that will be sent (including change output if applied).
	SendAmount int64 `protobuf:"varint,6,opt,name=send_amount,json=sendAmount,proto3" json:"send_amount,omitempty"`
	// The estimated `vsize` in `vbytes`.
	// It is used to compare how much blockweight needs to be allocated to confirm a transaction.
	// For non-segwit transactions, `vsize` = `size`.
	VsizeEstimate uint64 `protobuf:"varint,7,opt,name=vsize_estimate,json=vsizeEstimate,proto3" json:"vsize_estimate,omitempty"`
	// The estimated fees of the transaction in satoshis.
	FeeEstimate int64 `protobuf:"varint,8,opt,name=fee_estimate,json=feeEstimate,proto3" json:"fee_estimate,omitempty"`
	// Remaining change.
	// Zero if not applied.
	Change int64 `protobuf:"varint,9,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *TransactionPlan) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TransactionPlan) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TransactionPlan) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionPlan) GetAvailableAmount() int64 {
	if x != nil {
		return x.AvailableAmount
	}
	return 0
}

func (x *TransactionPlan) GetSendAmount() int64 {
	if x != nil {
		return x.SendAmount
	}
	return 0
}

func (x *TransactionPlan) GetVsizeEstimate() uint64 {
	if x != nil {
		return x.VsizeEstimate
	}
	return 0
}

func (x *TransactionPlan) GetFeeEstimate() int64 {
	if x != nil {
		return x.FeeEstimate
	}
	return 0
}

func (x *TransactionPlan) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

type PreSigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,1,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// / The sighashes to be signed; ECDSA for legacy and Segwit, Schnorr for Taproot.
	Sighashes []*PreSigningOutput_Sighash `protobuf:"bytes,4,rep,name=sighashes,proto3" json:"sighashes,omitempty"`
}

func (x *PreSigningOutput) Reset() {
	*x = PreSigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput) ProtoMessage() {}

func (x *PreSigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput.ProtoReflect.Descriptor instead.
func (*PreSigningOutput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{8}
}

func (x *PreSigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *PreSigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PreSigningOutput) GetSighashes() []*PreSigningOutput_Sighash {
	if x != nil {
		return x.Sighashes
	}
	return nil
}

type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A possible error, `OK` if none.
	Error common.SigningError `protobuf:"varint,1,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error description.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Resulting transaction.
	Transaction *Transaction `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The encoded transaction that submitted to the network.
	Encoded []byte `protobuf:"bytes,4,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// The transaction ID (hash).
	Txid []byte `protobuf:"bytes,5,opt,name=txid,proto3" json:"txid,omitempty"`
	// The total `vsize` in `vbytes`.
	// It is used to compare how much blockweight needs to be allocated to confirm a transaction.
	// For non-segwit transactions, `vsize` = `size`.
	Vsize uint64 `protobuf:"varint,6,opt,name=vsize,proto3" json:"vsize,omitempty"`
	// Transaction weight is defined as Base transaction size * 3 + Total transaction size
	// (ie. the same method as calculating Block weight from Base size and Total size).
	Weight uint64 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// The total and final fee of the transaction in satoshis.
	Fee int64 `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{9}
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SigningOutput) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SigningOutput) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

func (x *SigningOutput) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *SigningOutput) GetVsize() uint64 {
	if x != nil {
		return x.Vsize
	}
	return 0
}

func (x *SigningOutput) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SigningOutput) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

// Optional sequence number, used for timelocks, replace-by-fee, etc.
type Input_Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *Input_Sequence) Reset() {
	*x = Input_Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input_Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_Sequence) ProtoMessage() {}

func (x *Input_Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_Sequence.ProtoReflect.Descriptor instead.
func (*Input_Sequence) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Input_Sequence) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type Input_InputBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*Input_InputBuilder_P2Pk
	//	*Input_InputBuilder_P2Pkh
	//	*Input_InputBuilder_P2Wpkh
	//	*Input_InputBuilder_P2TrKeyPath
	//	*Input_InputBuilder_Brc20Inscribe
	Variant isInput_InputBuilder_Variant `protobuf_oneof:"variant"`
}

func (x *Input_InputBuilder) Reset() {
	*x = Input_InputBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input_InputBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_InputBuilder) ProtoMessage() {}

func (x *Input_InputBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_InputBuilder.ProtoReflect.Descriptor instead.
func (*Input_InputBuilder) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 1}
}

func (m *Input_InputBuilder) GetVariant() isInput_InputBuilder_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Input_InputBuilder) GetP2Pk() []byte {
	if x, ok := x.GetVariant().(*Input_InputBuilder_P2Pk); ok {
		return x.P2Pk
	}
	return nil
}

func (x *Input_InputBuilder) GetP2Pkh() *PublicKeyOrHash {
	if x, ok := x.GetVariant().(*Input_InputBuilder_P2Pkh); ok {
		return x.P2Pkh
	}
	return nil
}

func (x *Input_InputBuilder) GetP2Wpkh() *PublicKeyOrHash {
	if x, ok := x.GetVariant().(*Input_InputBuilder_P2Wpkh); ok {
		return x.P2Wpkh
	}
	return nil
}

func (x *Input_InputBuilder) GetP2TrKeyPath() []byte {
	if x, ok := x.GetVariant().(*Input_InputBuilder_P2TrKeyPath); ok {
		return x.P2TrKeyPath
	}
	return nil
}

func (x *Input_InputBuilder) GetBrc20Inscribe() *Input_InputBrc20Inscription {
	if x, ok := x.GetVariant().(*Input_InputBuilder_Brc20Inscribe); ok {
		return x.Brc20Inscribe
	}
	return nil
}

type isInput_InputBuilder_Variant interface {
	isInput_InputBuilder_Variant()
}

type Input_InputBuilder_P2Pk struct {
	// Pay-to-Public-Key, specify the public key.
	P2Pk []byte `protobuf:"bytes,2,opt,name=p2pk,proto3,oneof"`
}

type Input_InputBuilder_P2Pkh struct {
	// Pay-to-Public-Key-Hash, specify the public key.
	P2Pkh *PublicKeyOrHash `protobuf:"bytes,3,opt,name=p2pkh,proto3,oneof"`
}

type Input_InputBuilder_P2Wpkh struct {
	// Pay-to-Public-Key-Hash, specify the public key.
	P2Wpkh *PublicKeyOrHash `protobuf:"bytes,5,opt,name=p2wpkh,proto3,oneof"`
}

type Input_InputBuilder_P2TrKeyPath struct {
	// Pay-to-Taproot-key-path (balance transfers), specify the public key.
	P2TrKeyPath []byte `protobuf:"bytes,7,opt,name=p2tr_key_path,json=p2trKeyPath,proto3,oneof"`
}

type Input_InputBuilder_Brc20Inscribe struct {
	// Create a BRC20 inscription.
	Brc20Inscribe *Input_InputBrc20Inscription `protobuf:"bytes,9,opt,name=brc20_inscribe,json=brc20Inscribe,proto3,oneof"`
}

func (*Input_InputBuilder_P2Pk) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_P2Pkh) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_P2Wpkh) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_P2TrKeyPath) isInput_InputBuilder_Variant() {}

func (*Input_InputBuilder_Brc20Inscribe) isInput_InputBuilder_Variant() {}

type Input_InputTaprootScriptPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The payload of the Taproot transaction.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// The control block of the Taproot transaction required for claiming.
	ControlBlock []byte `protobuf:"bytes,3,opt,name=control_block,json=controlBlock,proto3" json:"control_block,omitempty"`
}

func (x *Input_InputTaprootScriptPath) Reset() {
	*x = Input_InputTaprootScriptPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input_InputTaprootScriptPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_InputTaprootScriptPath) ProtoMessage() {}

func (x *Input_InputTaprootScriptPath) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_InputTaprootScriptPath.ProtoReflect.Descriptor instead.
func (*Input_InputTaprootScriptPath) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Input_InputTaprootScriptPath) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Input_InputTaprootScriptPath) GetControlBlock() []byte {
	if x != nil {
		return x.ControlBlock
	}
	return nil
}

type Input_InputBrc20Inscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The recipient of the inscription, usually the sender.
	InscribeTo []byte `protobuf:"bytes,2,opt,name=inscribe_to,json=inscribeTo,proto3" json:"inscribe_to,omitempty"`
	// The ticker of the BRC20 inscription.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// The BRC20 token transfer amount.
	TransferAmount string `protobuf:"bytes,4,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
}

func (x *Input_InputBrc20Inscription) Reset() {
	*x = Input_InputBrc20Inscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input_InputBrc20Inscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input_InputBrc20Inscription) ProtoMessage() {}

func (x *Input_InputBrc20Inscription) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input_InputBrc20Inscription.ProtoReflect.Descriptor instead.
func (*Input_InputBrc20Inscription) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Input_InputBrc20Inscription) GetInscribeTo() []byte {
	if x != nil {
		return x.InscribeTo
	}
	return nil
}

func (x *Input_InputBrc20Inscription) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Input_InputBrc20Inscription) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

type Output_OutputBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*Output_OutputBuilder_P2Sh
	//	*Output_OutputBuilder_P2Pk
	//	*Output_OutputBuilder_P2Pkh
	//	*Output_OutputBuilder_P2Wsh
	//	*Output_OutputBuilder_P2Wpkh
	//	*Output_OutputBuilder_P2TrKeyPath
	//	*Output_OutputBuilder_P2TrScriptPath
	//	*Output_OutputBuilder_P2TrDangerousAssumeTweaked
	//	*Output_OutputBuilder_Brc20Inscribe
	//	*Output_OutputBuilder_OpReturn
	Variant isOutput_OutputBuilder_Variant `protobuf_oneof:"variant"`
}

func (x *Output_OutputBuilder) Reset() {
	*x = Output_OutputBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output_OutputBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_OutputBuilder) ProtoMessage() {}

func (x *Output_OutputBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_OutputBuilder.ProtoReflect.Descriptor instead.
func (*Output_OutputBuilder) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 0}
}

func (m *Output_OutputBuilder) GetVariant() isOutput_OutputBuilder_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Sh() *Output_RedeemScriptOrHash {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2Sh); ok {
		return x.P2Sh
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Pk() []byte {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2Pk); ok {
		return x.P2Pk
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Pkh() *PublicKeyOrHash {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2Pkh); ok {
		return x.P2Pkh
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Wsh() *Output_RedeemScriptOrHash {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2Wsh); ok {
		return x.P2Wsh
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2Wpkh() *PublicKeyOrHash {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2Wpkh); ok {
		return x.P2Wpkh
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2TrKeyPath() []byte {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2TrKeyPath); ok {
		return x.P2TrKeyPath
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2TrScriptPath() *Output_OutputTaprootScriptPath {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2TrScriptPath); ok {
		return x.P2TrScriptPath
	}
	return nil
}

func (x *Output_OutputBuilder) GetP2TrDangerousAssumeTweaked() []byte {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_P2TrDangerousAssumeTweaked); ok {
		return x.P2TrDangerousAssumeTweaked
	}
	return nil
}

func (x *Output_OutputBuilder) GetBrc20Inscribe() *Output_OutputBrc20Inscription {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_Brc20Inscribe); ok {
		return x.Brc20Inscribe
	}
	return nil
}

func (x *Output_OutputBuilder) GetOpReturn() []byte {
	if x, ok := x.GetVariant().(*Output_OutputBuilder_OpReturn); ok {
		return x.OpReturn
	}
	return nil
}

type isOutput_OutputBuilder_Variant interface {
	isOutput_OutputBuilder_Variant()
}

type Output_OutputBuilder_P2Sh struct {
	// Pay-to-Script-Hash, specify the redeem script or its hash.
	P2Sh *Output_RedeemScriptOrHash `protobuf:"bytes,1,opt,name=p2sh,proto3,oneof"`
}

type Output_OutputBuilder_P2Pk struct {
	// Pay-to-Public-Key, specify the public key.
	P2Pk []byte `protobuf:"bytes,2,opt,name=p2pk,proto3,oneof"`
}

type Output_OutputBuilder_P2Pkh struct {
	// Pay-to-Public-Key-Hash, specify the public key or its hash.
	P2Pkh *PublicKeyOrHash `protobuf:"bytes,3,opt,name=p2pkh,proto3,oneof"`
}

type Output_OutputBuilder_P2Wsh struct {
	// Pay-to-Witness-Script-Hash, specify the redeem script or its hash.
	P2Wsh *Output_RedeemScriptOrHash `protobuf:"bytes,4,opt,name=p2wsh,proto3,oneof"`
}

type Output_OutputBuilder_P2Wpkh struct {
	// Pay-to-Public-Key-Hash, specify the public key or its hash.
	P2Wpkh *PublicKeyOrHash `protobuf:"bytes,5,opt,name=p2wpkh,proto3,oneof"`
}

type Output_OutputBuilder_P2TrKeyPath struct {
	// Pay-to-Taproot-key-path (balance transfers), specify the public key.
	P2TrKeyPath []byte `protobuf:"bytes,6,opt,name=p2tr_key_path,json=p2trKeyPath,proto3,oneof"`
}

type Output_OutputBuilder_P2TrScriptPath struct {
	// Pay-to-Taproot-script-path (complex transfers)
	P2TrScriptPath *Output_OutputTaprootScriptPath `protobuf:"bytes,7,opt,name=p2tr_script_path,json=p2trScriptPath,proto3,oneof"`
}

type Output_OutputBuilder_P2TrDangerousAssumeTweaked struct {
	P2TrDangerousAssumeTweaked []byte `protobuf:"bytes,8,opt,name=p2tr_dangerous_assume_tweaked,json=p2trDangerousAssumeTweaked,proto3,oneof"`
}

type Output_OutputBuilder_Brc20Inscribe struct {
	Brc20Inscribe *Output_OutputBrc20Inscription `protobuf:"bytes,9,opt,name=brc20_inscribe,json=brc20Inscribe,proto3,oneof"`
}

type Output_OutputBuilder_OpReturn struct {
	// OP_RETURN output. In most cases, with a zero-amount.
	OpReturn []byte `protobuf:"bytes,12,opt,name=op_return,json=opReturn,proto3,oneof"`
}

func (*Output_OutputBuilder_P2Sh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Pk) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Pkh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Wsh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2Wpkh) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2TrKeyPath) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2TrScriptPath) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_P2TrDangerousAssumeTweaked) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_Brc20Inscribe) isOutput_OutputBuilder_Variant() {}

func (*Output_OutputBuilder_OpReturn) isOutput_OutputBuilder_Variant() {}

// Either a redeem script or its hash.
type Output_RedeemScriptOrHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Variant:
	//
	//	*Output_RedeemScriptOrHash_RedeemScript
	//	*Output_RedeemScriptOrHash_Hash
	Variant isOutput_RedeemScriptOrHash_Variant `protobuf_oneof:"variant"`
}

func (x *Output_RedeemScriptOrHash) Reset() {
	*x = Output_RedeemScriptOrHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output_RedeemScriptOrHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_RedeemScriptOrHash) ProtoMessage() {}

func (x *Output_RedeemScriptOrHash) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_RedeemScriptOrHash.ProtoReflect.Descriptor instead.
func (*Output_RedeemScriptOrHash) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 1}
}

func (m *Output_RedeemScriptOrHash) GetVariant() isOutput_RedeemScriptOrHash_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Output_RedeemScriptOrHash) GetRedeemScript() []byte {
	if x, ok := x.GetVariant().(*Output_RedeemScriptOrHash_RedeemScript); ok {
		return x.RedeemScript
	}
	return nil
}

func (x *Output_RedeemScriptOrHash) GetHash() []byte {
	if x, ok := x.GetVariant().(*Output_RedeemScriptOrHash_Hash); ok {
		return x.Hash
	}
	return nil
}

type isOutput_RedeemScriptOrHash_Variant interface {
	isOutput_RedeemScriptOrHash_Variant()
}

type Output_RedeemScriptOrHash_RedeemScript struct {
	// Redeem script bytes.
	RedeemScript []byte `protobuf:"bytes,1,opt,name=redeem_script,json=redeemScript,proto3,oneof"`
}

type Output_RedeemScriptOrHash_Hash struct {
	// Public key hash.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*Output_RedeemScriptOrHash_RedeemScript) isOutput_RedeemScriptOrHash_Variant() {}

func (*Output_RedeemScriptOrHash_Hash) isOutput_RedeemScriptOrHash_Variant() {}

type Output_OutputTaprootScriptPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal key, usually the public key of the recipient.
	InternalKey []byte `protobuf:"bytes,1,opt,name=internal_key,json=internalKey,proto3" json:"internal_key,omitempty"`
	// The merkle root of the Taproot script(s), required to compute the sighash.
	MerkleRoot []byte `protobuf:"bytes,2,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (x *Output_OutputTaprootScriptPath) Reset() {
	*x = Output_OutputTaprootScriptPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output_OutputTaprootScriptPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_OutputTaprootScriptPath) ProtoMessage() {}

func (x *Output_OutputTaprootScriptPath) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_OutputTaprootScriptPath.ProtoReflect.Descriptor instead.
func (*Output_OutputTaprootScriptPath) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Output_OutputTaprootScriptPath) GetInternalKey() []byte {
	if x != nil {
		return x.InternalKey
	}
	return nil
}

func (x *Output_OutputTaprootScriptPath) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

type Output_OutputBrc20Inscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The recipient of the inscription, usually the sender.
	InscribeTo []byte `protobuf:"bytes,1,opt,name=inscribe_to,json=inscribeTo,proto3" json:"inscribe_to,omitempty"`
	// The ticker of the BRC20 inscription.
	Ticker string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// The BRC20 token transfer amount.
	TransferAmount string `protobuf:"bytes,3,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
}

func (x *Output_OutputBrc20Inscription) Reset() {
	*x = Output_OutputBrc20Inscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output_OutputBrc20Inscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output_OutputBrc20Inscription) ProtoMessage() {}

func (x *Output_OutputBrc20Inscription) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output_OutputBrc20Inscription.ProtoReflect.Descriptor instead.
func (*Output_OutputBrc20Inscription) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Output_OutputBrc20Inscription) GetInscribeTo() []byte {
	if x != nil {
		return x.InscribeTo
	}
	return nil
}

func (x *Output_OutputBrc20Inscription) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Output_OutputBrc20Inscription) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

type Transaction_TransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the previous transaction's output.
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// The sequence number, used for timelocks, replace-by-fee, etc.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The script for claiming the input (non-Segwit/non-Taproot).
	ScriptSig []byte `protobuf:"bytes,3,opt,name=script_sig,json=scriptSig,proto3" json:"script_sig,omitempty"`
	// The script for claiming the input (Segit/Taproot).
	WitnessItems [][]byte `protobuf:"bytes,4,rep,name=witness_items,json=witnessItems,proto3" json:"witness_items,omitempty"`
}

func (x *Transaction_TransactionInput) Reset() {
	*x = Transaction_TransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_TransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_TransactionInput) ProtoMessage() {}

func (x *Transaction_TransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_TransactionInput.ProtoReflect.Descriptor instead.
func (*Transaction_TransactionInput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Transaction_TransactionInput) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *Transaction_TransactionInput) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Transaction_TransactionInput) GetScriptSig() []byte {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *Transaction_TransactionInput) GetWitnessItems() [][]byte {
	if x != nil {
		return x.WitnessItems
	}
	return nil
}

type Transaction_TransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The condition for claiming the output.
	ScriptPubkey []byte `protobuf:"bytes,1,opt,name=script_pubkey,json=scriptPubkey,proto3" json:"script_pubkey,omitempty"`
	// The amount of satoshis to spend.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Transaction_TransactionOutput) Reset() {
	*x = Transaction_TransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_TransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_TransactionOutput) ProtoMessage() {}

func (x *Transaction_TransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_TransactionOutput.ProtoReflect.Descriptor instead.
func (*Transaction_TransactionOutput) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Transaction_TransactionOutput) GetScriptPubkey() []byte {
	if x != nil {
		return x.ScriptPubkey
	}
	return nil
}

func (x *Transaction_TransactionOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PreSigningOutput_Sighash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key used for signing.
	// Please note it can be tweaked in case of P2TR scriptPubkey.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The sighash to be signed.
	Sighash []byte `protobuf:"bytes,2,opt,name=sighash,proto3" json:"sighash,omitempty"`
	// Signing method to be used to sign the sighash.
	SigningMethod PreSigningOutput_SigningMethod `protobuf:"varint,3,opt,name=signing_method,json=signingMethod,proto3,enum=TW.BitcoinV2.Proto.PreSigningOutput_SigningMethod" json:"signing_method,omitempty"`
	// Taproot tweak if `Taproot` signing method is used.
	// Empty if there is no need to tweak the private to sign the sighash.
	Tweak *PreSigningOutput_TaprootTweak `protobuf:"bytes,4,opt,name=tweak,proto3" json:"tweak,omitempty"`
}

func (x *PreSigningOutput_Sighash) Reset() {
	*x = PreSigningOutput_Sighash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSigningOutput_Sighash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput_Sighash) ProtoMessage() {}

func (x *PreSigningOutput_Sighash) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput_Sighash.ProtoReflect.Descriptor instead.
func (*PreSigningOutput_Sighash) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PreSigningOutput_Sighash) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PreSigningOutput_Sighash) GetSighash() []byte {
	if x != nil {
		return x.Sighash
	}
	return nil
}

func (x *PreSigningOutput_Sighash) GetSigningMethod() PreSigningOutput_SigningMethod {
	if x != nil {
		return x.SigningMethod
	}
	return PreSigningOutput_Legacy
}

func (x *PreSigningOutput_Sighash) GetTweak() *PreSigningOutput_TaprootTweak {
	if x != nil {
		return x.Tweak
	}
	return nil
}

type PreSigningOutput_TaprootTweak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 32 bytes merkle root of the script tree.
	// Empty if there are no scripts, and the private key should be tweaked without a merkle root.
	MerkleRoot []byte `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (x *PreSigningOutput_TaprootTweak) Reset() {
	*x = PreSigningOutput_TaprootTweak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BitcoinV2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSigningOutput_TaprootTweak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput_TaprootTweak) ProtoMessage() {}

func (x *PreSigningOutput_TaprootTweak) ProtoReflect() protoreflect.Message {
	mi := &file_BitcoinV2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput_TaprootTweak.ProtoReflect.Descriptor instead.
func (*PreSigningOutput_TaprootTweak) Descriptor() ([]byte, []int) {
	return file_BitcoinV2_proto_rawDescGZIP(), []int{8, 1}
}

func (x *PreSigningOutput_TaprootTweak) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

var File_BitcoinV2_proto protoreflect.FileDescriptor

var file_BitcoinV2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x4f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0x32, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x76, 0x6f, 0x75, 0x74, 0x22, 0x99, 0x07, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x39, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x57,
	0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x26, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xab, 0x02, 0x0a,
	0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x04, 0x70, 0x32, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x32, 0x70, 0x6b, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x32, 0x70, 0x6b, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x4f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x05, 0x70, 0x32, 0x70, 0x6b, 0x68,
	0x12, 0x3d, 0x0a, 0x06, 0x70, 0x32, 0x77, 0x70, 0x6b, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x06, 0x70, 0x32, 0x77, 0x70, 0x6b, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x32, 0x74, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x32, 0x74, 0x72, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x0e, 0x62, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x69,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x72,
	0x63, 0x32, 0x30, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x62, 0x72, 0x63, 0x32, 0x30, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0x57, 0x0a, 0x16, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x1a, 0x79, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x72, 0x63, 0x32,
	0x30, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0x83, 0x09, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfe, 0x04,
	0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x04, 0x70, 0x32, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x32, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x32, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x70, 0x32, 0x70, 0x6b, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x32,
	0x70, 0x6b, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x32, 0x70, 0x6b, 0x68, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x32, 0x77, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x05, 0x70, 0x32, 0x77, 0x73, 0x68, 0x12, 0x3d,
	0x0a, 0x06, 0x70, 0x32, 0x77, 0x70, 0x6b, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x06, 0x70, 0x32, 0x77, 0x70, 0x6b, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x32, 0x74, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x32, 0x74, 0x72, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x10, 0x70, 0x32, 0x74, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x32, 0x74, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1d, 0x70, 0x32, 0x74, 0x72, 0x5f, 0x64, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x77, 0x65,
	0x61, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x32,
	0x74, 0x72, 0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x62, 0x72, 0x63, 0x32,
	0x30, 0x5f, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x72, 0x63, 0x32, 0x30, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x63, 0x32, 0x30, 0x49, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0x5c,
	0x0a, 0x12, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0x5d, 0x0a, 0x17,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x1a, 0x7a, 0x0a, 0x16, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x72, 0x63, 0x32, 0x30, 0x49, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x32, 0x70, 0x6b, 0x68, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x32, 0x70, 0x6b,
	0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x73, 0x68, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x32,
	0x73, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xd2, 0x05, 0x0a, 0x0c, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x54, 0x57, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x62, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x56, 0x62, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x46,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x57, 0x2e, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x75,
	0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x73, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x64, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x5f, 0x72, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x55, 0x73, 0x65, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x52, 0x6e, 0x67, 0x42, 0x0d,
	0x0a, 0x0b, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xdb, 0x03,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4b,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x39, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x4e, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x57, 0x2e, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x73, 0x69, 0x7a, 0x65, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x65, 0x65,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x88, 0x04, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x07,
	0x53, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x69, 0x67, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x59, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x54, 0x57, 0x2e, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x74,
	0x77, 0x65, 0x61, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x54, 0x57, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x2e, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x52, 0x05, 0x74,
	0x77, 0x65, 0x61, 0x6b, 0x1a, 0x2f, 0x0a, 0x0c, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x54,
	0x77, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x67, 0x77, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x61, 0x70, 0x72, 0x6f, 0x6f, 0x74, 0x10, 0x02, 0x22, 0x9a, 0x02, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54,
	0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54,
	0x57, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x2a, 0x59, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x10, 0x0a, 0x2a, 0x34, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x31, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x02, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BitcoinV2_proto_rawDescOnce sync.Once
	file_BitcoinV2_proto_rawDescData = file_BitcoinV2_proto_rawDesc
)

func file_BitcoinV2_proto_rawDescGZIP() []byte {
	file_BitcoinV2_proto_rawDescOnce.Do(func() {
		file_BitcoinV2_proto_rawDescData = protoimpl.X.CompressGZIP(file_BitcoinV2_proto_rawDescData)
	})
	return file_BitcoinV2_proto_rawDescData
}

var file_BitcoinV2_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_BitcoinV2_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_BitcoinV2_proto_goTypes = []interface{}{
	(InputSelector)(0),                     // 0: TW.BitcoinV2.Proto.InputSelector
	(TransactionVersion)(0),                // 1: TW.BitcoinV2.Proto.TransactionVersion
	(PreSigningOutput_SigningMethod)(0),    // 2: TW.BitcoinV2.Proto.PreSigningOutput.SigningMethod
	(*PublicKeyOrHash)(nil),                // 3: TW.BitcoinV2.Proto.PublicKeyOrHash
	(*OutPoint)(nil),                       // 4: TW.BitcoinV2.Proto.OutPoint
	(*Input)(nil),                          // 5: TW.BitcoinV2.Proto.Input
	(*Output)(nil),                         // 6: TW.BitcoinV2.Proto.Output
	(*ChainInfo)(nil),                      // 7: TW.BitcoinV2.Proto.ChainInfo
	(*SigningInput)(nil),                   // 8: TW.BitcoinV2.Proto.SigningInput
	(*Transaction)(nil),                    // 9: TW.BitcoinV2.Proto.Transaction
	(*TransactionPlan)(nil),                // 10: TW.BitcoinV2.Proto.TransactionPlan
	(*PreSigningOutput)(nil),               // 11: TW.BitcoinV2.Proto.PreSigningOutput
	(*SigningOutput)(nil),                  // 12: TW.BitcoinV2.Proto.SigningOutput
	(*Input_Sequence)(nil),                 // 13: TW.BitcoinV2.Proto.Input.Sequence
	(*Input_InputBuilder)(nil),             // 14: TW.BitcoinV2.Proto.Input.InputBuilder
	(*Input_InputTaprootScriptPath)(nil),   // 15: TW.BitcoinV2.Proto.Input.InputTaprootScriptPath
	(*Input_InputBrc20Inscription)(nil),    // 16: TW.BitcoinV2.Proto.Input.InputBrc20Inscription
	(*Output_OutputBuilder)(nil),           // 17: TW.BitcoinV2.Proto.Output.OutputBuilder
	(*Output_RedeemScriptOrHash)(nil),      // 18: TW.BitcoinV2.Proto.Output.RedeemScriptOrHash
	(*Output_OutputTaprootScriptPath)(nil), // 19: TW.BitcoinV2.Proto.Output.OutputTaprootScriptPath
	(*Output_OutputBrc20Inscription)(nil),  // 20: TW.BitcoinV2.Proto.Output.OutputBrc20Inscription
	(*Transaction_TransactionInput)(nil),   // 21: TW.BitcoinV2.Proto.Transaction.TransactionInput
	(*Transaction_TransactionOutput)(nil),  // 22: TW.BitcoinV2.Proto.Transaction.TransactionOutput
	(*PreSigningOutput_Sighash)(nil),       // 23: TW.BitcoinV2.Proto.PreSigningOutput.Sighash
	(*PreSigningOutput_TaprootTweak)(nil),  // 24: TW.BitcoinV2.Proto.PreSigningOutput.TaprootTweak
	(common.SigningError)(0),               // 25: TW.Common.Proto.SigningError
}
var file_BitcoinV2_proto_depIdxs = []int32{
	4,  // 0: TW.BitcoinV2.Proto.Input.out_point:type_name -> TW.BitcoinV2.Proto.OutPoint
	13, // 1: TW.BitcoinV2.Proto.Input.sequence:type_name -> TW.BitcoinV2.Proto.Input.Sequence
	14, // 2: TW.BitcoinV2.Proto.Input.script_builder:type_name -> TW.BitcoinV2.Proto.Input.InputBuilder
	17, // 3: TW.BitcoinV2.Proto.Output.builder:type_name -> TW.BitcoinV2.Proto.Output.OutputBuilder
	1,  // 4: TW.BitcoinV2.Proto.SigningInput.version:type_name -> TW.BitcoinV2.Proto.TransactionVersion
	5,  // 5: TW.BitcoinV2.Proto.SigningInput.inputs:type_name -> TW.BitcoinV2.Proto.Input
	6,  // 6: TW.BitcoinV2.Proto.SigningInput.outputs:type_name -> TW.BitcoinV2.Proto.Output
	0,  // 7: TW.BitcoinV2.Proto.SigningInput.input_selector:type_name -> TW.BitcoinV2.Proto.InputSelector
	6,  // 8: TW.BitcoinV2.Proto.SigningInput.change_output:type_name -> TW.BitcoinV2.Proto.Output
	6,  // 9: TW.BitcoinV2.Proto.SigningInput.max_amount_output:type_name -> TW.BitcoinV2.Proto.Output
	7,  // 10: TW.BitcoinV2.Proto.SigningInput.chain_info:type_name -> TW.BitcoinV2.Proto.ChainInfo
	21, // 11: TW.BitcoinV2.Proto.Transaction.inputs:type_name -> TW.BitcoinV2.Proto.Transaction.TransactionInput
	22, // 12: TW.BitcoinV2.Proto.Transaction.outputs:type_name -> TW.BitcoinV2.Proto.Transaction.TransactionOutput
	25, // 13: TW.BitcoinV2.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	5,  // 14: TW.BitcoinV2.Proto.TransactionPlan.inputs:type_name -> TW.BitcoinV2.Proto.Input
	6,  // 15: TW.BitcoinV2.Proto.TransactionPlan.outputs:type_name -> TW.BitcoinV2.Proto.Output
	25, // 16: TW.BitcoinV2.Proto.PreSigningOutput.error:type_name -> TW.Common.Proto.SigningError
	23, // 17: TW.BitcoinV2.Proto.PreSigningOutput.sighashes:type_name -> TW.BitcoinV2.Proto.PreSigningOutput.Sighash
	25, // 18: TW.BitcoinV2.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	9,  // 19: TW.BitcoinV2.Proto.SigningOutput.transaction:type_name -> TW.BitcoinV2.Proto.Transaction
	3,  // 20: TW.BitcoinV2.Proto.Input.InputBuilder.p2pkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	3,  // 21: TW.BitcoinV2.Proto.Input.InputBuilder.p2wpkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	16, // 22: TW.BitcoinV2.Proto.Input.InputBuilder.brc20_inscribe:type_name -> TW.BitcoinV2.Proto.Input.InputBrc20Inscription
	18, // 23: TW.BitcoinV2.Proto.Output.OutputBuilder.p2sh:type_name -> TW.BitcoinV2.Proto.Output.RedeemScriptOrHash
	3,  // 24: TW.BitcoinV2.Proto.Output.OutputBuilder.p2pkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	18, // 25: TW.BitcoinV2.Proto.Output.OutputBuilder.p2wsh:type_name -> TW.BitcoinV2.Proto.Output.RedeemScriptOrHash
	3,  // 26: TW.BitcoinV2.Proto.Output.OutputBuilder.p2wpkh:type_name -> TW.BitcoinV2.Proto.PublicKeyOrHash
	19, // 27: TW.BitcoinV2.Proto.Output.OutputBuilder.p2tr_script_path:type_name -> TW.BitcoinV2.Proto.Output.OutputTaprootScriptPath
	20, // 28: TW.BitcoinV2.Proto.Output.OutputBuilder.brc20_inscribe:type_name -> TW.BitcoinV2.Proto.Output.OutputBrc20Inscription
	4,  // 29: TW.BitcoinV2.Proto.Transaction.TransactionInput.out_point:type_name -> TW.BitcoinV2.Proto.OutPoint
	2,  // 30: TW.BitcoinV2.Proto.PreSigningOutput.Sighash.signing_method:type_name -> TW.BitcoinV2.Proto.PreSigningOutput.SigningMethod
	24, // 31: TW.BitcoinV2.Proto.PreSigningOutput.Sighash.tweak:type_name -> TW.BitcoinV2.Proto.PreSigningOutput.TaprootTweak
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_BitcoinV2_proto_init() }
func file_BitcoinV2_proto_init() {
	if File_BitcoinV2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BitcoinV2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyOrHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input_Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input_InputBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input_InputTaprootScriptPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input_InputBrc20Inscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output_OutputBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output_RedeemScriptOrHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output_OutputTaprootScriptPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output_OutputBrc20Inscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_TransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_TransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSigningOutput_Sighash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BitcoinV2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSigningOutput_TaprootTweak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_BitcoinV2_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PublicKeyOrHash_Pubkey)(nil),
		(*PublicKeyOrHash_Hash)(nil),
	}
	file_BitcoinV2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Input_ScriptBuilder)(nil),
		(*Input_ScriptData)(nil),
		(*Input_ReceiverAddress)(nil),
	}
	file_BitcoinV2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Output_Builder)(nil),
		(*Output_CustomScriptPubkey)(nil),
		(*Output_ToAddress)(nil),
	}
	file_BitcoinV2_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SigningInput_FixedDustThreshold)(nil),
	}
	file_BitcoinV2_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Input_InputBuilder_P2Pk)(nil),
		(*Input_InputBuilder_P2Pkh)(nil),
		(*Input_InputBuilder_P2Wpkh)(nil),
		(*Input_InputBuilder_P2TrKeyPath)(nil),
		(*Input_InputBuilder_Brc20Inscribe)(nil),
	}
	file_BitcoinV2_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Output_OutputBuilder_P2Sh)(nil),
		(*Output_OutputBuilder_P2Pk)(nil),
		(*Output_OutputBuilder_P2Pkh)(nil),
		(*Output_OutputBuilder_P2Wsh)(nil),
		(*Output_OutputBuilder_P2Wpkh)(nil),
		(*Output_OutputBuilder_P2TrKeyPath)(nil),
		(*Output_OutputBuilder_P2TrScriptPath)(nil),
		(*Output_OutputBuilder_P2TrDangerousAssumeTweaked)(nil),
		(*Output_OutputBuilder_Brc20Inscribe)(nil),
		(*Output_OutputBuilder_OpReturn)(nil),
	}
	file_BitcoinV2_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Output_RedeemScriptOrHash_RedeemScript)(nil),
		(*Output_RedeemScriptOrHash_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BitcoinV2_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BitcoinV2_proto_goTypes,
		DependencyIndexes: file_BitcoinV2_proto_depIdxs,
		EnumInfos:         file_BitcoinV2_proto_enumTypes,
		MessageInfos:      file_BitcoinV2_proto_msgTypes,
	}.Build()
	File_BitcoinV2_proto = out.File
	file_BitcoinV2_proto_rawDesc = nil
	file_BitcoinV2_proto_goTypes = nil
	file_BitcoinV2_proto_depIdxs = nil
}
