// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: Solana.proto

package solana

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TokenProgramId int32

const (
	TokenProgramId_TokenProgram     TokenProgramId = 0
	TokenProgramId_Token2022Program TokenProgramId = 1
)

// Enum value maps for TokenProgramId.
var (
	TokenProgramId_name = map[int32]string{
		0: "TokenProgram",
		1: "Token2022Program",
	}
	TokenProgramId_value = map[string]int32{
		"TokenProgram":     0,
		"Token2022Program": 1,
	}
)

func (x TokenProgramId) Enum() *TokenProgramId {
	p := new(TokenProgramId)
	*p = x
	return p
}

func (x TokenProgramId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenProgramId) Descriptor() protoreflect.EnumDescriptor {
	return file_Solana_proto_enumTypes[0].Descriptor()
}

func (TokenProgramId) Type() protoreflect.EnumType {
	return &file_Solana_proto_enumTypes[0]
}

func (x TokenProgramId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenProgramId.Descriptor instead.
func (TokenProgramId) EnumDescriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{0}
}

type Encoding int32

const (
	Encoding_Base58 Encoding = 0
	Encoding_Base64 Encoding = 1
)

// Enum value maps for Encoding.
var (
	Encoding_name = map[int32]string{
		0: "Base58",
		1: "Base64",
	}
	Encoding_value = map[string]int32{
		"Base58": 0,
		"Base64": 1,
	}
)

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_Solana_proto_enumTypes[1].Descriptor()
}

func (Encoding) Type() protoreflect.EnumType {
	return &file_Solana_proto_enumTypes[1]
}

func (x Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encoding.Descriptor instead.
func (Encoding) EnumDescriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{1}
}

// Transfer transaction
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// destination address
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// optional memo
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// optional referenced public keys
	References []string `protobuf:"bytes,4,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *Transfer) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Transfer) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

// Create and initialize a stake account, and delegate amount to it.
// Recommendation behavior is to not specify a stake account, and a new unique account will be created each time.
// Optionally a stake account pubkey can be specified, but it should not exist on chain.
type DelegateStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validator's public key
	ValidatorPubkey string `protobuf:"bytes,1,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
	// delegation amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// staking account
	StakeAccount string `protobuf:"bytes,3,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
}

func (x *DelegateStake) Reset() {
	*x = DelegateStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateStake) ProtoMessage() {}

func (x *DelegateStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateStake.ProtoReflect.Descriptor instead.
func (*DelegateStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{1}
}

func (x *DelegateStake) GetValidatorPubkey() string {
	if x != nil {
		return x.ValidatorPubkey
	}
	return ""
}

func (x *DelegateStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DelegateStake) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

// Deactivate staking on stake account
type DeactivateStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking account
	StakeAccount string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
}

func (x *DeactivateStake) Reset() {
	*x = DeactivateStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateStake) ProtoMessage() {}

func (x *DeactivateStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateStake.ProtoReflect.Descriptor instead.
func (*DeactivateStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{2}
}

func (x *DeactivateStake) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

// Deactivate staking on multiple stake account
type DeactivateAllStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking accounts
	StakeAccounts []string `protobuf:"bytes,1,rep,name=stake_accounts,json=stakeAccounts,proto3" json:"stake_accounts,omitempty"`
}

func (x *DeactivateAllStake) Reset() {
	*x = DeactivateAllStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAllStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAllStake) ProtoMessage() {}

func (x *DeactivateAllStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAllStake.ProtoReflect.Descriptor instead.
func (*DeactivateAllStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{3}
}

func (x *DeactivateAllStake) GetStakeAccounts() []string {
	if x != nil {
		return x.StakeAccounts
	}
	return nil
}

// Withdraw amount from stake account
type WithdrawStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking account
	StakeAccount string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	// withdrawal amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WithdrawStake) Reset() {
	*x = WithdrawStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawStake) ProtoMessage() {}

func (x *WithdrawStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawStake.ProtoReflect.Descriptor instead.
func (*WithdrawStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{4}
}

func (x *WithdrawStake) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *WithdrawStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Technical structure to group a staking account and an amount
type StakeAccountValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking account
	StakeAccount string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	// amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StakeAccountValue) Reset() {
	*x = StakeAccountValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccountValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccountValue) ProtoMessage() {}

func (x *StakeAccountValue) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccountValue.ProtoReflect.Descriptor instead.
func (*StakeAccountValue) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{5}
}

func (x *StakeAccountValue) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *StakeAccountValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Withdraw amounts from stake accounts
type WithdrawAllStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccounts []*StakeAccountValue `protobuf:"bytes,1,rep,name=stake_accounts,json=stakeAccounts,proto3" json:"stake_accounts,omitempty"`
}

func (x *WithdrawAllStake) Reset() {
	*x = WithdrawAllStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawAllStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawAllStake) ProtoMessage() {}

func (x *WithdrawAllStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawAllStake.ProtoReflect.Descriptor instead.
func (*WithdrawAllStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{6}
}

func (x *WithdrawAllStake) GetStakeAccounts() []*StakeAccountValue {
	if x != nil {
		return x.StakeAccounts
	}
	return nil
}

// Create a token account under a main account for a token type
type CreateTokenAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// main account -- can be same as signer, or other main account (if done on some other account's behalf)
	MainAddress string `protobuf:"bytes,1,opt,name=main_address,json=mainAddress,proto3" json:"main_address,omitempty"`
	// Token minting address
	TokenMintAddress string `protobuf:"bytes,2,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Token address
	TokenAddress string `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	// optional token program id
	TokenProgramId TokenProgramId `protobuf:"varint,4,opt,name=token_program_id,json=tokenProgramId,proto3,enum=TW.Solana.Proto.TokenProgramId" json:"token_program_id,omitempty"`
}

func (x *CreateTokenAccount) Reset() {
	*x = CreateTokenAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenAccount) ProtoMessage() {}

func (x *CreateTokenAccount) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenAccount.ProtoReflect.Descriptor instead.
func (*CreateTokenAccount) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTokenAccount) GetMainAddress() string {
	if x != nil {
		return x.MainAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenProgramId() TokenProgramId {
	if x != nil {
		return x.TokenProgramId
	}
	return TokenProgramId_TokenProgram
}

// Transfer tokens
type TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mint address of the token
	TokenMintAddress string `protobuf:"bytes,1,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Source address
	SenderTokenAddress string `protobuf:"bytes,2,opt,name=sender_token_address,json=senderTokenAddress,proto3" json:"sender_token_address,omitempty"`
	// Destination address
	RecipientTokenAddress string `protobuf:"bytes,3,opt,name=recipient_token_address,json=recipientTokenAddress,proto3" json:"recipient_token_address,omitempty"`
	// Amount
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Note: 8-bit value
	Decimals uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// optional memo§
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// optional referenced public keys
	References []string `protobuf:"bytes,7,rep,name=references,proto3" json:"references,omitempty"`
	// optional token program id
	TokenProgramId TokenProgramId `protobuf:"varint,8,opt,name=token_program_id,json=tokenProgramId,proto3,enum=TW.Solana.Proto.TokenProgramId" json:"token_program_id,omitempty"`
}

func (x *TokenTransfer) Reset() {
	*x = TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransfer) ProtoMessage() {}

func (x *TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransfer.ProtoReflect.Descriptor instead.
func (*TokenTransfer) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{8}
}

func (x *TokenTransfer) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *TokenTransfer) GetSenderTokenAddress() string {
	if x != nil {
		return x.SenderTokenAddress
	}
	return ""
}

func (x *TokenTransfer) GetRecipientTokenAddress() string {
	if x != nil {
		return x.RecipientTokenAddress
	}
	return ""
}

func (x *TokenTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenTransfer) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenTransfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TokenTransfer) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *TokenTransfer) GetTokenProgramId() TokenProgramId {
	if x != nil {
		return x.TokenProgramId
	}
	return TokenProgramId_TokenProgram
}

// CreateTokenAccount and TokenTransfer combined
type CreateAndTransferToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// main account -- can be same as signer, or other main account (if done on some other account's behalf)
	RecipientMainAddress string `protobuf:"bytes,1,opt,name=recipient_main_address,json=recipientMainAddress,proto3" json:"recipient_main_address,omitempty"`
	// Mint address of the token
	TokenMintAddress string `protobuf:"bytes,2,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Token address for the recipient, will be created first
	RecipientTokenAddress string `protobuf:"bytes,3,opt,name=recipient_token_address,json=recipientTokenAddress,proto3" json:"recipient_token_address,omitempty"`
	// Sender's token address
	SenderTokenAddress string `protobuf:"bytes,4,opt,name=sender_token_address,json=senderTokenAddress,proto3" json:"sender_token_address,omitempty"`
	// amount
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Note: 8-bit value
	Decimals uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// optional
	Memo string `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	// optional referenced public keys
	References []string `protobuf:"bytes,8,rep,name=references,proto3" json:"references,omitempty"`
	// optional token program id
	TokenProgramId TokenProgramId `protobuf:"varint,9,opt,name=token_program_id,json=tokenProgramId,proto3,enum=TW.Solana.Proto.TokenProgramId" json:"token_program_id,omitempty"`
}

func (x *CreateAndTransferToken) Reset() {
	*x = CreateAndTransferToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndTransferToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndTransferToken) ProtoMessage() {}

func (x *CreateAndTransferToken) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndTransferToken.ProtoReflect.Descriptor instead.
func (*CreateAndTransferToken) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{9}
}

func (x *CreateAndTransferToken) GetRecipientMainAddress() string {
	if x != nil {
		return x.RecipientMainAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetRecipientTokenAddress() string {
	if x != nil {
		return x.RecipientTokenAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetSenderTokenAddress() string {
	if x != nil {
		return x.SenderTokenAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateAndTransferToken) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *CreateAndTransferToken) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateAndTransferToken) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *CreateAndTransferToken) GetTokenProgramId() TokenProgramId {
	if x != nil {
		return x.TokenProgramId
	}
	return TokenProgramId_TokenProgram
}

type CreateNonceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required for building pre-signing hash of a transaction
	NonceAccount string `protobuf:"bytes,1,opt,name=nonce_account,json=nonceAccount,proto3" json:"nonce_account,omitempty"`
	Rent         uint64 `protobuf:"varint,2,opt,name=rent,proto3" json:"rent,omitempty"`
	// Optional for building pre-signing hash of a transaction
	NonceAccountPrivateKey []byte `protobuf:"bytes,3,opt,name=nonce_account_private_key,json=nonceAccountPrivateKey,proto3" json:"nonce_account_private_key,omitempty"`
}

func (x *CreateNonceAccount) Reset() {
	*x = CreateNonceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonceAccount) ProtoMessage() {}

func (x *CreateNonceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonceAccount.ProtoReflect.Descriptor instead.
func (*CreateNonceAccount) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{10}
}

func (x *CreateNonceAccount) GetNonceAccount() string {
	if x != nil {
		return x.NonceAccount
	}
	return ""
}

func (x *CreateNonceAccount) GetRent() uint64 {
	if x != nil {
		return x.Rent
	}
	return 0
}

func (x *CreateNonceAccount) GetNonceAccountPrivateKey() []byte {
	if x != nil {
		return x.NonceAccountPrivateKey
	}
	return nil
}

type WithdrawNonceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonceAccount string `protobuf:"bytes,1,opt,name=nonce_account,json=nonceAccount,proto3" json:"nonce_account,omitempty"`
	Recipient    string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Value        uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WithdrawNonceAccount) Reset() {
	*x = WithdrawNonceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawNonceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawNonceAccount) ProtoMessage() {}

func (x *WithdrawNonceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawNonceAccount.ProtoReflect.Descriptor instead.
func (*WithdrawNonceAccount) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawNonceAccount) GetNonceAccount() string {
	if x != nil {
		return x.NonceAccount
	}
	return ""
}

func (x *WithdrawNonceAccount) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *WithdrawNonceAccount) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AdvanceNonceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonceAccount string `protobuf:"bytes,1,opt,name=nonce_account,json=nonceAccount,proto3" json:"nonce_account,omitempty"`
}

func (x *AdvanceNonceAccount) Reset() {
	*x = AdvanceNonceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceNonceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceNonceAccount) ProtoMessage() {}

func (x *AdvanceNonceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceNonceAccount.ProtoReflect.Descriptor instead.
func (*AdvanceNonceAccount) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{12}
}

func (x *AdvanceNonceAccount) GetNonceAccount() string {
	if x != nil {
		return x.NonceAccount
	}
	return ""
}

type PubkeySignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// base58 encoded signature.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PubkeySignature) Reset() {
	*x = PubkeySignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubkeySignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubkeySignature) ProtoMessage() {}

func (x *PubkeySignature) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubkeySignature.ProtoReflect.Descriptor instead.
func (*PubkeySignature) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{13}
}

func (x *PubkeySignature) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *PubkeySignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type RawMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction signatures.
	// If private keys are set in `SigningInput`, corresponding signatures will be overriden.
	// It's also possible some or all the signatures are be used to compile a transaction if corresponding private keys are not set.
	Signatures []*PubkeySignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Types that are assignable to Message:
	//
	//	*RawMessage_Legacy
	//	*RawMessage_V0
	Message isRawMessage_Message `protobuf_oneof:"message"`
}

func (x *RawMessage) Reset() {
	*x = RawMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage) ProtoMessage() {}

func (x *RawMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage.ProtoReflect.Descriptor instead.
func (*RawMessage) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{14}
}

func (x *RawMessage) GetSignatures() []*PubkeySignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (m *RawMessage) GetMessage() isRawMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RawMessage) GetLegacy() *RawMessage_MessageLegacy {
	if x, ok := x.GetMessage().(*RawMessage_Legacy); ok {
		return x.Legacy
	}
	return nil
}

func (x *RawMessage) GetV0() *RawMessage_MessageV0 {
	if x, ok := x.GetMessage().(*RawMessage_V0); ok {
		return x.V0
	}
	return nil
}

type isRawMessage_Message interface {
	isRawMessage_Message()
}

type RawMessage_Legacy struct {
	Legacy *RawMessage_MessageLegacy `protobuf:"bytes,2,opt,name=legacy,proto3,oneof"`
}

type RawMessage_V0 struct {
	V0 *RawMessage_MessageV0 `protobuf:"bytes,3,opt,name=v0,proto3,oneof"`
}

func (*RawMessage_Legacy) isRawMessage_Message() {}

func (*RawMessage_V0) isRawMessage_Message() {}

type DecodingTransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decoded transaction info.
	Transaction *RawMessage `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error code description
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *DecodingTransactionOutput) Reset() {
	*x = DecodingTransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodingTransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodingTransactionOutput) ProtoMessage() {}

func (x *DecodingTransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodingTransactionOutput.ProtoReflect.Descriptor instead.
func (*DecodingTransactionOutput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{15}
}

func (x *DecodingTransactionOutput) GetTransaction() *RawMessage {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *DecodingTransactionOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *DecodingTransactionOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Specific compute unit limit that the transaction is allowed to consume.
type PriorityFeePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PriorityFeePrice) Reset() {
	*x = PriorityFeePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityFeePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityFeePrice) ProtoMessage() {}

func (x *PriorityFeePrice) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityFeePrice.ProtoReflect.Descriptor instead.
func (*PriorityFeePrice) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{16}
}

func (x *PriorityFeePrice) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// Compute unit price in "micro-lamports" to pay a higher transaction fee for higher transaction prioritization.
type PriorityFeeLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PriorityFeeLimit) Reset() {
	*x = PriorityFeeLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityFeeLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityFeeLimit) ProtoMessage() {}

func (x *PriorityFeeLimit) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityFeeLimit.ProtoReflect.Descriptor instead.
func (*PriorityFeeLimit) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{17}
}

func (x *PriorityFeeLimit) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Relatively recent block hash
	RecentBlockhash string `protobuf:"bytes,2,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	V0Msg           bool   `protobuf:"varint,3,opt,name=v0_msg,json=v0Msg,proto3" json:"v0_msg,omitempty"`
	// Payload message
	//
	// Types that are assignable to TransactionType:
	//
	//	*SigningInput_TransferTransaction
	//	*SigningInput_DelegateStakeTransaction
	//	*SigningInput_DeactivateStakeTransaction
	//	*SigningInput_DeactivateAllStakeTransaction
	//	*SigningInput_WithdrawTransaction
	//	*SigningInput_WithdrawAllTransaction
	//	*SigningInput_CreateTokenAccountTransaction
	//	*SigningInput_TokenTransferTransaction
	//	*SigningInput_CreateAndTransferTokenTransaction
	//	*SigningInput_CreateNonceAccount
	//	*SigningInput_WithdrawNonceAccount
	//	*SigningInput_AdvanceNonceAccount
	TransactionType isSigningInput_TransactionType `protobuf_oneof:"transaction_type"`
	// Required for building pre-signing hash of a transaction
	Sender string `protobuf:"bytes,14,opt,name=sender,proto3" json:"sender,omitempty"`
	// Required for using durable transaction nonce
	NonceAccount string `protobuf:"bytes,15,opt,name=nonce_account,json=nonceAccount,proto3" json:"nonce_account,omitempty"`
	// Optional external fee payer private key. support: TokenTransfer, CreateAndTransferToken
	FeePayerPrivateKey []byte `protobuf:"bytes,17,opt,name=fee_payer_private_key,json=feePayerPrivateKey,proto3" json:"fee_payer_private_key,omitempty"`
	// Optional external fee payer. support: TokenTransfer, CreateAndTransferToken
	FeePayer string `protobuf:"bytes,18,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	// Optional message plan. For signing an already prepared message.
	RawMessage *RawMessage `protobuf:"bytes,20,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
	// Output transaction encoding.
	TxEncoding Encoding `protobuf:"varint,21,opt,name=tx_encoding,json=txEncoding,proto3,enum=TW.Solana.Proto.Encoding" json:"tx_encoding,omitempty"`
	// Optional. Set a specific compute unit limit that the transaction is allowed to consume.
	// https://solana.com/docs/intro/transaction_fees#prioritization-fee
	PriorityFeePrice *PriorityFeePrice `protobuf:"bytes,22,opt,name=priority_fee_price,json=priorityFeePrice,proto3" json:"priority_fee_price,omitempty"`
	// Optional. Set a compute unit price in "micro-lamports" to pay a higher transaction
	// fee for higher transaction prioritization.
	// https://solana.com/docs/intro/transaction_fees#prioritization-fee
	PriorityFeeLimit *PriorityFeeLimit `protobuf:"bytes,23,opt,name=priority_fee_limit,json=priorityFeeLimit,proto3" json:"priority_fee_limit,omitempty"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{18}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *SigningInput) GetV0Msg() bool {
	if x != nil {
		return x.V0Msg
	}
	return false
}

func (m *SigningInput) GetTransactionType() isSigningInput_TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (x *SigningInput) GetTransferTransaction() *Transfer {
	if x, ok := x.GetTransactionType().(*SigningInput_TransferTransaction); ok {
		return x.TransferTransaction
	}
	return nil
}

func (x *SigningInput) GetDelegateStakeTransaction() *DelegateStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DelegateStakeTransaction); ok {
		return x.DelegateStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetDeactivateStakeTransaction() *DeactivateStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DeactivateStakeTransaction); ok {
		return x.DeactivateStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetDeactivateAllStakeTransaction() *DeactivateAllStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DeactivateAllStakeTransaction); ok {
		return x.DeactivateAllStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetWithdrawTransaction() *WithdrawStake {
	if x, ok := x.GetTransactionType().(*SigningInput_WithdrawTransaction); ok {
		return x.WithdrawTransaction
	}
	return nil
}

func (x *SigningInput) GetWithdrawAllTransaction() *WithdrawAllStake {
	if x, ok := x.GetTransactionType().(*SigningInput_WithdrawAllTransaction); ok {
		return x.WithdrawAllTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateTokenAccountTransaction() *CreateTokenAccount {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateTokenAccountTransaction); ok {
		return x.CreateTokenAccountTransaction
	}
	return nil
}

func (x *SigningInput) GetTokenTransferTransaction() *TokenTransfer {
	if x, ok := x.GetTransactionType().(*SigningInput_TokenTransferTransaction); ok {
		return x.TokenTransferTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateAndTransferTokenTransaction() *CreateAndTransferToken {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateAndTransferTokenTransaction); ok {
		return x.CreateAndTransferTokenTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateNonceAccount() *CreateNonceAccount {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateNonceAccount); ok {
		return x.CreateNonceAccount
	}
	return nil
}

func (x *SigningInput) GetWithdrawNonceAccount() *WithdrawNonceAccount {
	if x, ok := x.GetTransactionType().(*SigningInput_WithdrawNonceAccount); ok {
		return x.WithdrawNonceAccount
	}
	return nil
}

func (x *SigningInput) GetAdvanceNonceAccount() *AdvanceNonceAccount {
	if x, ok := x.GetTransactionType().(*SigningInput_AdvanceNonceAccount); ok {
		return x.AdvanceNonceAccount
	}
	return nil
}

func (x *SigningInput) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SigningInput) GetNonceAccount() string {
	if x != nil {
		return x.NonceAccount
	}
	return ""
}

func (x *SigningInput) GetFeePayerPrivateKey() []byte {
	if x != nil {
		return x.FeePayerPrivateKey
	}
	return nil
}

func (x *SigningInput) GetFeePayer() string {
	if x != nil {
		return x.FeePayer
	}
	return ""
}

func (x *SigningInput) GetRawMessage() *RawMessage {
	if x != nil {
		return x.RawMessage
	}
	return nil
}

func (x *SigningInput) GetTxEncoding() Encoding {
	if x != nil {
		return x.TxEncoding
	}
	return Encoding_Base58
}

func (x *SigningInput) GetPriorityFeePrice() *PriorityFeePrice {
	if x != nil {
		return x.PriorityFeePrice
	}
	return nil
}

func (x *SigningInput) GetPriorityFeeLimit() *PriorityFeeLimit {
	if x != nil {
		return x.PriorityFeeLimit
	}
	return nil
}

type isSigningInput_TransactionType interface {
	isSigningInput_TransactionType()
}

type SigningInput_TransferTransaction struct {
	TransferTransaction *Transfer `protobuf:"bytes,4,opt,name=transfer_transaction,json=transferTransaction,proto3,oneof"`
}

type SigningInput_DelegateStakeTransaction struct {
	DelegateStakeTransaction *DelegateStake `protobuf:"bytes,5,opt,name=delegate_stake_transaction,json=delegateStakeTransaction,proto3,oneof"`
}

type SigningInput_DeactivateStakeTransaction struct {
	DeactivateStakeTransaction *DeactivateStake `protobuf:"bytes,6,opt,name=deactivate_stake_transaction,json=deactivateStakeTransaction,proto3,oneof"`
}

type SigningInput_DeactivateAllStakeTransaction struct {
	DeactivateAllStakeTransaction *DeactivateAllStake `protobuf:"bytes,7,opt,name=deactivate_all_stake_transaction,json=deactivateAllStakeTransaction,proto3,oneof"`
}

type SigningInput_WithdrawTransaction struct {
	WithdrawTransaction *WithdrawStake `protobuf:"bytes,8,opt,name=withdraw_transaction,json=withdrawTransaction,proto3,oneof"`
}

type SigningInput_WithdrawAllTransaction struct {
	WithdrawAllTransaction *WithdrawAllStake `protobuf:"bytes,9,opt,name=withdraw_all_transaction,json=withdrawAllTransaction,proto3,oneof"`
}

type SigningInput_CreateTokenAccountTransaction struct {
	CreateTokenAccountTransaction *CreateTokenAccount `protobuf:"bytes,10,opt,name=create_token_account_transaction,json=createTokenAccountTransaction,proto3,oneof"`
}

type SigningInput_TokenTransferTransaction struct {
	TokenTransferTransaction *TokenTransfer `protobuf:"bytes,11,opt,name=token_transfer_transaction,json=tokenTransferTransaction,proto3,oneof"`
}

type SigningInput_CreateAndTransferTokenTransaction struct {
	CreateAndTransferTokenTransaction *CreateAndTransferToken `protobuf:"bytes,12,opt,name=create_and_transfer_token_transaction,json=createAndTransferTokenTransaction,proto3,oneof"`
}

type SigningInput_CreateNonceAccount struct {
	CreateNonceAccount *CreateNonceAccount `protobuf:"bytes,13,opt,name=create_nonce_account,json=createNonceAccount,proto3,oneof"`
}

type SigningInput_WithdrawNonceAccount struct {
	WithdrawNonceAccount *WithdrawNonceAccount `protobuf:"bytes,16,opt,name=withdraw_nonce_account,json=withdrawNonceAccount,proto3,oneof"`
}

type SigningInput_AdvanceNonceAccount struct {
	AdvanceNonceAccount *AdvanceNonceAccount `protobuf:"bytes,19,opt,name=advance_nonce_account,json=advanceNonceAccount,proto3,oneof"`
}

func (*SigningInput_TransferTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DelegateStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DeactivateStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DeactivateAllStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_WithdrawTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_WithdrawAllTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateTokenAccountTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_TokenTransferTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateAndTransferTokenTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateNonceAccount) isSigningInput_TransactionType() {}

func (*SigningInput_WithdrawNonceAccount) isSigningInput_TransactionType() {}

func (*SigningInput_AdvanceNonceAccount) isSigningInput_TransactionType() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded transaction
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,2,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The encoded message. Can be used to estimate a transaction fee required to execute the message.
	UnsignedTx string `protobuf:"bytes,4,opt,name=unsigned_tx,json=unsignedTx,proto3" json:"unsigned_tx,omitempty"`
	// Transaction signatures (may include external signatures).
	Signatures []*PubkeySignature `protobuf:"bytes,5,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{19}
}

func (x *SigningOutput) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SigningOutput) GetUnsignedTx() string {
	if x != nil {
		return x.UnsignedTx
	}
	return ""
}

func (x *SigningOutput) GetSignatures() []*PubkeySignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// / Transaction pre-signing output
type PreSigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signer list
	Signers [][]byte `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	// Pre-image data. There is no hashing for Solana presign image
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// Error code description
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *PreSigningOutput) Reset() {
	*x = PreSigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreSigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSigningOutput) ProtoMessage() {}

func (x *PreSigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSigningOutput.ProtoReflect.Descriptor instead.
func (*PreSigningOutput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{20}
}

func (x *PreSigningOutput) GetSigners() [][]byte {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *PreSigningOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PreSigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *PreSigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type RawMessage_MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequiredSignatures       uint32 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint32 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint32 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
}

func (x *RawMessage_MessageHeader) Reset() {
	*x = RawMessage_MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage_MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage_MessageHeader) ProtoMessage() {}

func (x *RawMessage_MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage_MessageHeader.ProtoReflect.Descriptor instead.
func (*RawMessage_MessageHeader) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RawMessage_MessageHeader) GetNumRequiredSignatures() uint32 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *RawMessage_MessageHeader) GetNumReadonlySignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *RawMessage_MessageHeader) GetNumReadonlyUnsignedAccounts() uint32 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

type RawMessage_Instruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramId   uint32   `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	Accounts    []uint32 `protobuf:"varint,2,rep,packed,name=accounts,proto3" json:"accounts,omitempty"`
	ProgramData []byte   `protobuf:"bytes,3,opt,name=program_data,json=programData,proto3" json:"program_data,omitempty"`
}

func (x *RawMessage_Instruction) Reset() {
	*x = RawMessage_Instruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage_Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage_Instruction) ProtoMessage() {}

func (x *RawMessage_Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage_Instruction.ProtoReflect.Descriptor instead.
func (*RawMessage_Instruction) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{14, 1}
}

func (x *RawMessage_Instruction) GetProgramId() uint32 {
	if x != nil {
		return x.ProgramId
	}
	return 0
}

func (x *RawMessage_Instruction) GetAccounts() []uint32 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *RawMessage_Instruction) GetProgramData() []byte {
	if x != nil {
		return x.ProgramData
	}
	return nil
}

type RawMessage_MessageAddressTableLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountKey      string   `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	WritableIndexes []uint32 `protobuf:"varint,2,rep,packed,name=writable_indexes,json=writableIndexes,proto3" json:"writable_indexes,omitempty"`
	ReadonlyIndexes []uint32 `protobuf:"varint,3,rep,packed,name=readonly_indexes,json=readonlyIndexes,proto3" json:"readonly_indexes,omitempty"`
}

func (x *RawMessage_MessageAddressTableLookup) Reset() {
	*x = RawMessage_MessageAddressTableLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage_MessageAddressTableLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage_MessageAddressTableLookup) ProtoMessage() {}

func (x *RawMessage_MessageAddressTableLookup) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage_MessageAddressTableLookup.ProtoReflect.Descriptor instead.
func (*RawMessage_MessageAddressTableLookup) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{14, 2}
}

func (x *RawMessage_MessageAddressTableLookup) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *RawMessage_MessageAddressTableLookup) GetWritableIndexes() []uint32 {
	if x != nil {
		return x.WritableIndexes
	}
	return nil
}

func (x *RawMessage_MessageAddressTableLookup) GetReadonlyIndexes() []uint32 {
	if x != nil {
		return x.ReadonlyIndexes
	}
	return nil
}

type RawMessage_MessageLegacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *RawMessage_MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AccountKeys []string                  `protobuf:"bytes,2,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	// Relatively recent block hash (base58 encoded).
	RecentBlockhash string                    `protobuf:"bytes,3,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	Instructions    []*RawMessage_Instruction `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *RawMessage_MessageLegacy) Reset() {
	*x = RawMessage_MessageLegacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage_MessageLegacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage_MessageLegacy) ProtoMessage() {}

func (x *RawMessage_MessageLegacy) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage_MessageLegacy.ProtoReflect.Descriptor instead.
func (*RawMessage_MessageLegacy) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{14, 3}
}

func (x *RawMessage_MessageLegacy) GetHeader() *RawMessage_MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RawMessage_MessageLegacy) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *RawMessage_MessageLegacy) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *RawMessage_MessageLegacy) GetInstructions() []*RawMessage_Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type RawMessage_MessageV0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *RawMessage_MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AccountKeys []string                  `protobuf:"bytes,2,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	// Relatively recent block hash (base58 encoded).
	RecentBlockhash     string                                  `protobuf:"bytes,3,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	Instructions        []*RawMessage_Instruction               `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions,omitempty"`
	AddressTableLookups []*RawMessage_MessageAddressTableLookup `protobuf:"bytes,5,rep,name=address_table_lookups,json=addressTableLookups,proto3" json:"address_table_lookups,omitempty"`
}

func (x *RawMessage_MessageV0) Reset() {
	*x = RawMessage_MessageV0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMessage_MessageV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMessage_MessageV0) ProtoMessage() {}

func (x *RawMessage_MessageV0) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMessage_MessageV0.ProtoReflect.Descriptor instead.
func (*RawMessage_MessageV0) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{14, 4}
}

func (x *RawMessage_MessageV0) GetHeader() *RawMessage_MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RawMessage_MessageV0) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *RawMessage_MessageV0) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *RawMessage_MessageV0) GetInstructions() []*RawMessage_Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *RawMessage_MessageV0) GetAddressTableLookups() []*RawMessage_MessageAddressTableLookup {
	if x != nil {
		return x.AddressTableLookups
	}
	return nil
}

var File_Solana_proto protoreflect.FileDescriptor

var file_Solana_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x75, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x3b, 0x0a, 0x12, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a,
	0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x11, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x10, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x49, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0xda, 0x02, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x99, 0x03,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x47, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xfc, 0x09, 0x0a, 0x0a, 0x52,
	0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x12, 0x37, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x56, 0x30, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30, 0x1a, 0xcd, 0x01, 0x0a, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x6f, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x9a, 0x01, 0x0a, 0x19, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd4, 0x02, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x30, 0x12, 0x41, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x28, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xc9, 0x0d, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x30, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x30, 0x4d, 0x73, 0x67, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x18,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1c, 0x64, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e,
	0x0a, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52,
	0x1d, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x18, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x16, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x25, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x57, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x74, 0x78, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x57,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x38, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x32, 0x30, 0x32, 0x32, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x01,
	0x2a, 0x22, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x10, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Solana_proto_rawDescOnce sync.Once
	file_Solana_proto_rawDescData = file_Solana_proto_rawDesc
)

func file_Solana_proto_rawDescGZIP() []byte {
	file_Solana_proto_rawDescOnce.Do(func() {
		file_Solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_Solana_proto_rawDescData)
	})
	return file_Solana_proto_rawDescData
}

var file_Solana_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_Solana_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_Solana_proto_goTypes = []interface{}{
	(TokenProgramId)(0),                          // 0: TW.Solana.Proto.TokenProgramId
	(Encoding)(0),                                // 1: TW.Solana.Proto.Encoding
	(*Transfer)(nil),                             // 2: TW.Solana.Proto.Transfer
	(*DelegateStake)(nil),                        // 3: TW.Solana.Proto.DelegateStake
	(*DeactivateStake)(nil),                      // 4: TW.Solana.Proto.DeactivateStake
	(*DeactivateAllStake)(nil),                   // 5: TW.Solana.Proto.DeactivateAllStake
	(*WithdrawStake)(nil),                        // 6: TW.Solana.Proto.WithdrawStake
	(*StakeAccountValue)(nil),                    // 7: TW.Solana.Proto.StakeAccountValue
	(*WithdrawAllStake)(nil),                     // 8: TW.Solana.Proto.WithdrawAllStake
	(*CreateTokenAccount)(nil),                   // 9: TW.Solana.Proto.CreateTokenAccount
	(*TokenTransfer)(nil),                        // 10: TW.Solana.Proto.TokenTransfer
	(*CreateAndTransferToken)(nil),               // 11: TW.Solana.Proto.CreateAndTransferToken
	(*CreateNonceAccount)(nil),                   // 12: TW.Solana.Proto.CreateNonceAccount
	(*WithdrawNonceAccount)(nil),                 // 13: TW.Solana.Proto.WithdrawNonceAccount
	(*AdvanceNonceAccount)(nil),                  // 14: TW.Solana.Proto.AdvanceNonceAccount
	(*PubkeySignature)(nil),                      // 15: TW.Solana.Proto.PubkeySignature
	(*RawMessage)(nil),                           // 16: TW.Solana.Proto.RawMessage
	(*DecodingTransactionOutput)(nil),            // 17: TW.Solana.Proto.DecodingTransactionOutput
	(*PriorityFeePrice)(nil),                     // 18: TW.Solana.Proto.PriorityFeePrice
	(*PriorityFeeLimit)(nil),                     // 19: TW.Solana.Proto.PriorityFeeLimit
	(*SigningInput)(nil),                         // 20: TW.Solana.Proto.SigningInput
	(*SigningOutput)(nil),                        // 21: TW.Solana.Proto.SigningOutput
	(*PreSigningOutput)(nil),                     // 22: TW.Solana.Proto.PreSigningOutput
	(*RawMessage_MessageHeader)(nil),             // 23: TW.Solana.Proto.RawMessage.MessageHeader
	(*RawMessage_Instruction)(nil),               // 24: TW.Solana.Proto.RawMessage.Instruction
	(*RawMessage_MessageAddressTableLookup)(nil), // 25: TW.Solana.Proto.RawMessage.MessageAddressTableLookup
	(*RawMessage_MessageLegacy)(nil),             // 26: TW.Solana.Proto.RawMessage.MessageLegacy
	(*RawMessage_MessageV0)(nil),                 // 27: TW.Solana.Proto.RawMessage.MessageV0
	(common.SigningError)(0),                     // 28: TW.Common.Proto.SigningError
}
var file_Solana_proto_depIdxs = []int32{
	7,  // 0: TW.Solana.Proto.WithdrawAllStake.stake_accounts:type_name -> TW.Solana.Proto.StakeAccountValue
	0,  // 1: TW.Solana.Proto.CreateTokenAccount.token_program_id:type_name -> TW.Solana.Proto.TokenProgramId
	0,  // 2: TW.Solana.Proto.TokenTransfer.token_program_id:type_name -> TW.Solana.Proto.TokenProgramId
	0,  // 3: TW.Solana.Proto.CreateAndTransferToken.token_program_id:type_name -> TW.Solana.Proto.TokenProgramId
	15, // 4: TW.Solana.Proto.RawMessage.signatures:type_name -> TW.Solana.Proto.PubkeySignature
	26, // 5: TW.Solana.Proto.RawMessage.legacy:type_name -> TW.Solana.Proto.RawMessage.MessageLegacy
	27, // 6: TW.Solana.Proto.RawMessage.v0:type_name -> TW.Solana.Proto.RawMessage.MessageV0
	16, // 7: TW.Solana.Proto.DecodingTransactionOutput.transaction:type_name -> TW.Solana.Proto.RawMessage
	28, // 8: TW.Solana.Proto.DecodingTransactionOutput.error:type_name -> TW.Common.Proto.SigningError
	2,  // 9: TW.Solana.Proto.SigningInput.transfer_transaction:type_name -> TW.Solana.Proto.Transfer
	3,  // 10: TW.Solana.Proto.SigningInput.delegate_stake_transaction:type_name -> TW.Solana.Proto.DelegateStake
	4,  // 11: TW.Solana.Proto.SigningInput.deactivate_stake_transaction:type_name -> TW.Solana.Proto.DeactivateStake
	5,  // 12: TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction:type_name -> TW.Solana.Proto.DeactivateAllStake
	6,  // 13: TW.Solana.Proto.SigningInput.withdraw_transaction:type_name -> TW.Solana.Proto.WithdrawStake
	8,  // 14: TW.Solana.Proto.SigningInput.withdraw_all_transaction:type_name -> TW.Solana.Proto.WithdrawAllStake
	9,  // 15: TW.Solana.Proto.SigningInput.create_token_account_transaction:type_name -> TW.Solana.Proto.CreateTokenAccount
	10, // 16: TW.Solana.Proto.SigningInput.token_transfer_transaction:type_name -> TW.Solana.Proto.TokenTransfer
	11, // 17: TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction:type_name -> TW.Solana.Proto.CreateAndTransferToken
	12, // 18: TW.Solana.Proto.SigningInput.create_nonce_account:type_name -> TW.Solana.Proto.CreateNonceAccount
	13, // 19: TW.Solana.Proto.SigningInput.withdraw_nonce_account:type_name -> TW.Solana.Proto.WithdrawNonceAccount
	14, // 20: TW.Solana.Proto.SigningInput.advance_nonce_account:type_name -> TW.Solana.Proto.AdvanceNonceAccount
	16, // 21: TW.Solana.Proto.SigningInput.raw_message:type_name -> TW.Solana.Proto.RawMessage
	1,  // 22: TW.Solana.Proto.SigningInput.tx_encoding:type_name -> TW.Solana.Proto.Encoding
	18, // 23: TW.Solana.Proto.SigningInput.priority_fee_price:type_name -> TW.Solana.Proto.PriorityFeePrice
	19, // 24: TW.Solana.Proto.SigningInput.priority_fee_limit:type_name -> TW.Solana.Proto.PriorityFeeLimit
	28, // 25: TW.Solana.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	15, // 26: TW.Solana.Proto.SigningOutput.signatures:type_name -> TW.Solana.Proto.PubkeySignature
	28, // 27: TW.Solana.Proto.PreSigningOutput.error:type_name -> TW.Common.Proto.SigningError
	23, // 28: TW.Solana.Proto.RawMessage.MessageLegacy.header:type_name -> TW.Solana.Proto.RawMessage.MessageHeader
	24, // 29: TW.Solana.Proto.RawMessage.MessageLegacy.instructions:type_name -> TW.Solana.Proto.RawMessage.Instruction
	23, // 30: TW.Solana.Proto.RawMessage.MessageV0.header:type_name -> TW.Solana.Proto.RawMessage.MessageHeader
	24, // 31: TW.Solana.Proto.RawMessage.MessageV0.instructions:type_name -> TW.Solana.Proto.RawMessage.Instruction
	25, // 32: TW.Solana.Proto.RawMessage.MessageV0.address_table_lookups:type_name -> TW.Solana.Proto.RawMessage.MessageAddressTableLookup
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_Solana_proto_init() }
func file_Solana_proto_init() {
	if File_Solana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAllStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccountValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawAllStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndTransferToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNonceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawNonceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceNonceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubkeySignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodingTransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityFeePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityFeeLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreSigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage_MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage_Instruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage_MessageAddressTableLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage_MessageLegacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMessage_MessageV0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Solana_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RawMessage_Legacy)(nil),
		(*RawMessage_V0)(nil),
	}
	file_Solana_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*SigningInput_TransferTransaction)(nil),
		(*SigningInput_DelegateStakeTransaction)(nil),
		(*SigningInput_DeactivateStakeTransaction)(nil),
		(*SigningInput_DeactivateAllStakeTransaction)(nil),
		(*SigningInput_WithdrawTransaction)(nil),
		(*SigningInput_WithdrawAllTransaction)(nil),
		(*SigningInput_CreateTokenAccountTransaction)(nil),
		(*SigningInput_TokenTransferTransaction)(nil),
		(*SigningInput_CreateAndTransferTokenTransaction)(nil),
		(*SigningInput_CreateNonceAccount)(nil),
		(*SigningInput_WithdrawNonceAccount)(nil),
		(*SigningInput_AdvanceNonceAccount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Solana_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Solana_proto_goTypes,
		DependencyIndexes: file_Solana_proto_depIdxs,
		EnumInfos:         file_Solana_proto_enumTypes,
		MessageInfos:      file_Solana_proto_msgTypes,
	}.Build()
	File_Solana_proto = out.File
	file_Solana_proto_rawDesc = nil
	file_Solana_proto_goTypes = nil
	file_Solana_proto_depIdxs = nil
}
