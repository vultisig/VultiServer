// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: Nervos.proto

package nervos

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Nervos transaction plan
type TransactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of cell deps.
	CellDeps []*CellDep `protobuf:"bytes,1,rep,name=cell_deps,json=cellDeps,proto3" json:"cell_deps,omitempty"`
	// A list of header deps.
	HeaderDeps [][]byte `protobuf:"bytes,2,rep,name=header_deps,json=headerDeps,proto3" json:"header_deps,omitempty"`
	// A list of 1 or more selected cells for this transaction
	SelectedCells []*Cell `protobuf:"bytes,3,rep,name=selected_cells,json=selectedCells,proto3" json:"selected_cells,omitempty"`
	// A list of 1 or more outputs by this transaction
	Outputs []*CellOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// A list of outputs data.
	OutputsData [][]byte `protobuf:"bytes,5,rep,name=outputs_data,json=outputsData,proto3" json:"outputs_data,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,6,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionPlan) GetCellDeps() []*CellDep {
	if x != nil {
		return x.CellDeps
	}
	return nil
}

func (x *TransactionPlan) GetHeaderDeps() [][]byte {
	if x != nil {
		return x.HeaderDeps
	}
	return nil
}

func (x *TransactionPlan) GetSelectedCells() []*Cell {
	if x != nil {
		return x.SelectedCells
	}
	return nil
}

func (x *TransactionPlan) GetOutputs() []*CellOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionPlan) GetOutputsData() [][]byte {
	if x != nil {
		return x.OutputsData
	}
	return nil
}

func (x *TransactionPlan) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

// Nervos cell dep.
type CellDep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prevents the transaction to be mined before an absolute or relative time
	DepType string `protobuf:"bytes,1,opt,name=dep_type,json=depType,proto3" json:"dep_type,omitempty"`
	// Reference to the previous transaction's output.
	OutPoint *OutPoint `protobuf:"bytes,2,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
}

func (x *CellDep) Reset() {
	*x = CellDep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDep) ProtoMessage() {}

func (x *CellDep) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDep.ProtoReflect.Descriptor instead.
func (*CellDep) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{1}
}

func (x *CellDep) GetDepType() string {
	if x != nil {
		return x.DepType
	}
	return ""
}

func (x *CellDep) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

// Nervos transaction out-point reference.
type OutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the referenced transaction.
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// The index of the specific output in the transaction.
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{2}
}

func (x *OutPoint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *OutPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Nervos cell output.
type CellOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction amount.
	Capacity uint64 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Lock script
	Lock *Script `protobuf:"bytes,2,opt,name=lock,proto3" json:"lock,omitempty"`
	// Type script
	Type *Script `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CellOutput) Reset() {
	*x = CellOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellOutput) ProtoMessage() {}

func (x *CellOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellOutput.ProtoReflect.Descriptor instead.
func (*CellOutput) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{3}
}

func (x *CellOutput) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *CellOutput) GetLock() *Script {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *CellOutput) GetType() *Script {
	if x != nil {
		return x.Type
	}
	return nil
}

// Nervos script
type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code hash
	CodeHash []byte `protobuf:"bytes,1,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	// Hash type
	HashType string `protobuf:"bytes,2,opt,name=hash_type,json=hashType,proto3" json:"hash_type,omitempty"`
	// args
	Args []byte `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{4}
}

func (x *Script) GetCodeHash() []byte {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *Script) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *Script) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// Transfer of native asset
type NativeTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient's address.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Amount to send.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// If sending max amount.
	UseMaxAmount bool `protobuf:"varint,4,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
}

func (x *NativeTransfer) Reset() {
	*x = NativeTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeTransfer) ProtoMessage() {}

func (x *NativeTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeTransfer.ProtoReflect.Descriptor instead.
func (*NativeTransfer) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{5}
}

func (x *NativeTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *NativeTransfer) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *NativeTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NativeTransfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

// Token transfer (SUDT)
type SudtTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient's address.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// SUDT (Simple User Defined Token) address
	SudtAddress []byte `protobuf:"bytes,3,opt,name=sudt_address,json=sudtAddress,proto3" json:"sudt_address,omitempty"`
	// Amount to send.
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// If sending max amount.
	UseMaxAmount bool `protobuf:"varint,5,opt,name=use_max_amount,json=useMaxAmount,proto3" json:"use_max_amount,omitempty"`
}

func (x *SudtTransfer) Reset() {
	*x = SudtTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SudtTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SudtTransfer) ProtoMessage() {}

func (x *SudtTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SudtTransfer.ProtoReflect.Descriptor instead.
func (*SudtTransfer) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{6}
}

func (x *SudtTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SudtTransfer) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *SudtTransfer) GetSudtAddress() []byte {
	if x != nil {
		return x.SudtAddress
	}
	return nil
}

func (x *SudtTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SudtTransfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

// Deposit
type DaoDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient's address.
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
	// Amount to deposit.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DaoDeposit) Reset() {
	*x = DaoDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoDeposit) ProtoMessage() {}

func (x *DaoDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoDeposit.ProtoReflect.Descriptor instead.
func (*DaoDeposit) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{7}
}

func (x *DaoDeposit) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *DaoDeposit) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

func (x *DaoDeposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DaoWithdrawPhase1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deposit cell
	DepositCell *Cell `protobuf:"bytes,1,opt,name=deposit_cell,json=depositCell,proto3" json:"deposit_cell,omitempty"`
	// Change address.
	ChangeAddress string `protobuf:"bytes,2,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
}

func (x *DaoWithdrawPhase1) Reset() {
	*x = DaoWithdrawPhase1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoWithdrawPhase1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoWithdrawPhase1) ProtoMessage() {}

func (x *DaoWithdrawPhase1) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoWithdrawPhase1.ProtoReflect.Descriptor instead.
func (*DaoWithdrawPhase1) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{8}
}

func (x *DaoWithdrawPhase1) GetDepositCell() *Cell {
	if x != nil {
		return x.DepositCell
	}
	return nil
}

func (x *DaoWithdrawPhase1) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

type DaoWithdrawPhase2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deposit cell
	DepositCell *Cell `protobuf:"bytes,1,opt,name=deposit_cell,json=depositCell,proto3" json:"deposit_cell,omitempty"`
	// Withdrawing cell
	WithdrawingCell *Cell `protobuf:"bytes,2,opt,name=withdrawing_cell,json=withdrawingCell,proto3" json:"withdrawing_cell,omitempty"`
	// Amount
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DaoWithdrawPhase2) Reset() {
	*x = DaoWithdrawPhase2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoWithdrawPhase2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoWithdrawPhase2) ProtoMessage() {}

func (x *DaoWithdrawPhase2) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoWithdrawPhase2.ProtoReflect.Descriptor instead.
func (*DaoWithdrawPhase2) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{9}
}

func (x *DaoWithdrawPhase2) GetDepositCell() *Cell {
	if x != nil {
		return x.DepositCell
	}
	return nil
}

func (x *DaoWithdrawPhase2) GetWithdrawingCell() *Cell {
	if x != nil {
		return x.WithdrawingCell
	}
	return nil
}

func (x *DaoWithdrawPhase2) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction fee per byte.
	ByteFee uint64 `protobuf:"varint,1,opt,name=byte_fee,json=byteFee,proto3" json:"byte_fee,omitempty"`
	// The available secret private keys used for signing (32 bytes each).
	PrivateKey [][]byte `protobuf:"bytes,2,rep,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Available unspent cell outputs.
	Cell []*Cell `protobuf:"bytes,3,rep,name=cell,proto3" json:"cell,omitempty"`
	// Optional transaction plan
	Plan *TransactionPlan `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	// The payload transfer
	//
	// Types that are assignable to OperationOneof:
	//
	//	*SigningInput_NativeTransfer
	//	*SigningInput_SudtTransfer
	//	*SigningInput_DaoDeposit
	//	*SigningInput_DaoWithdrawPhase1
	//	*SigningInput_DaoWithdrawPhase2
	OperationOneof isSigningInput_OperationOneof `protobuf_oneof:"operation_oneof"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{10}
}

func (x *SigningInput) GetByteFee() uint64 {
	if x != nil {
		return x.ByteFee
	}
	return 0
}

func (x *SigningInput) GetPrivateKey() [][]byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetCell() []*Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *SigningInput) GetPlan() *TransactionPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (m *SigningInput) GetOperationOneof() isSigningInput_OperationOneof {
	if m != nil {
		return m.OperationOneof
	}
	return nil
}

func (x *SigningInput) GetNativeTransfer() *NativeTransfer {
	if x, ok := x.GetOperationOneof().(*SigningInput_NativeTransfer); ok {
		return x.NativeTransfer
	}
	return nil
}

func (x *SigningInput) GetSudtTransfer() *SudtTransfer {
	if x, ok := x.GetOperationOneof().(*SigningInput_SudtTransfer); ok {
		return x.SudtTransfer
	}
	return nil
}

func (x *SigningInput) GetDaoDeposit() *DaoDeposit {
	if x, ok := x.GetOperationOneof().(*SigningInput_DaoDeposit); ok {
		return x.DaoDeposit
	}
	return nil
}

func (x *SigningInput) GetDaoWithdrawPhase1() *DaoWithdrawPhase1 {
	if x, ok := x.GetOperationOneof().(*SigningInput_DaoWithdrawPhase1); ok {
		return x.DaoWithdrawPhase1
	}
	return nil
}

func (x *SigningInput) GetDaoWithdrawPhase2() *DaoWithdrawPhase2 {
	if x, ok := x.GetOperationOneof().(*SigningInput_DaoWithdrawPhase2); ok {
		return x.DaoWithdrawPhase2
	}
	return nil
}

type isSigningInput_OperationOneof interface {
	isSigningInput_OperationOneof()
}

type SigningInput_NativeTransfer struct {
	NativeTransfer *NativeTransfer `protobuf:"bytes,5,opt,name=native_transfer,json=nativeTransfer,proto3,oneof"`
}

type SigningInput_SudtTransfer struct {
	SudtTransfer *SudtTransfer `protobuf:"bytes,6,opt,name=sudt_transfer,json=sudtTransfer,proto3,oneof"`
}

type SigningInput_DaoDeposit struct {
	DaoDeposit *DaoDeposit `protobuf:"bytes,7,opt,name=dao_deposit,json=daoDeposit,proto3,oneof"`
}

type SigningInput_DaoWithdrawPhase1 struct {
	DaoWithdrawPhase1 *DaoWithdrawPhase1 `protobuf:"bytes,8,opt,name=dao_withdraw_phase1,json=daoWithdrawPhase1,proto3,oneof"`
}

type SigningInput_DaoWithdrawPhase2 struct {
	DaoWithdrawPhase2 *DaoWithdrawPhase2 `protobuf:"bytes,9,opt,name=dao_withdraw_phase2,json=daoWithdrawPhase2,proto3,oneof"`
}

func (*SigningInput_NativeTransfer) isSigningInput_OperationOneof() {}

func (*SigningInput_SudtTransfer) isSigningInput_OperationOneof() {}

func (*SigningInput_DaoDeposit) isSigningInput_OperationOneof() {}

func (*SigningInput_DaoWithdrawPhase1) isSigningInput_OperationOneof() {}

func (*SigningInput_DaoWithdrawPhase2) isSigningInput_OperationOneof() {}

// An unspent cell output, that can serve as input to a transaction
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unspent output
	OutPoint *OutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	// Amount of the cell
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Lock script
	Lock *Script `protobuf:"bytes,3,opt,name=lock,proto3" json:"lock,omitempty"`
	// Type script
	Type *Script `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Data
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Optional block number
	BlockNumber uint64 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Optional block hash
	BlockHash []byte `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Optional since the cell is available to spend
	Since uint64 `protobuf:"varint,8,opt,name=since,proto3" json:"since,omitempty"`
	// Optional input type data to be included in witness
	InputType []byte `protobuf:"bytes,9,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	// Optional output type data to be included in witness
	OutputType []byte `protobuf:"bytes,10,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{11}
}

func (x *Cell) GetOutPoint() *OutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *Cell) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Cell) GetLock() *Script {
	if x != nil {
		return x.Lock
	}
	return nil
}

func (x *Cell) GetType() *Script {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Cell) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Cell) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Cell) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Cell) GetSince() uint64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *Cell) GetInputType() []byte {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *Cell) GetOutputType() []byte {
	if x != nil {
		return x.OutputType
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting transaction. Note that the amount may be different than the requested amount to account for fees and available funds.
	TransactionJson string `protobuf:"bytes,1,opt,name=transaction_json,json=transactionJson,proto3" json:"transaction_json,omitempty"`
	// Transaction id
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional error
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Nervos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Nervos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Nervos_proto_rawDescGZIP(), []int{12}
}

func (x *SigningOutput) GetTransactionJson() string {
	if x != nil {
		return x.TransactionJson
	}
	return ""
}

func (x *SigningOutput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

var File_Nervos_proto protoreflect.FileDescriptor

var file_Nervos_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x02,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x52, 0x08,
	0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65,
	0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x07, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x82, 0x01, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65,
	0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x0e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x64, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x64, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x73, 0x75, 0x64, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x0a, 0x44,
	0x61, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x44, 0x61, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x38, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa7, 0x01,
	0x0a, 0x11, 0x44, 0x61, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x32, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x57, 0x2e, 0x4e,
	0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x40, 0x0a,
	0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72,
	0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x04, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12,
	0x34, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x75, 0x64, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65,
	0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x64, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x61, 0x6f, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x6f,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x64, 0x61, 0x6f, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x48, 0x00, 0x52, 0x11, 0x64, 0x61, 0x6f, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x54, 0x0a,
	0x13, 0x64, 0x61, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e,
	0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x48, 0x00,
	0x52, 0x11, 0x64, 0x61, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x32, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xe0, 0x02, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x36, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x54, 0x57, 0x2e, 0x4e, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54,
	0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_Nervos_proto_rawDescOnce sync.Once
	file_Nervos_proto_rawDescData = file_Nervos_proto_rawDesc
)

func file_Nervos_proto_rawDescGZIP() []byte {
	file_Nervos_proto_rawDescOnce.Do(func() {
		file_Nervos_proto_rawDescData = protoimpl.X.CompressGZIP(file_Nervos_proto_rawDescData)
	})
	return file_Nervos_proto_rawDescData
}

var file_Nervos_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_Nervos_proto_goTypes = []interface{}{
	(*TransactionPlan)(nil),   // 0: TW.Nervos.Proto.TransactionPlan
	(*CellDep)(nil),           // 1: TW.Nervos.Proto.CellDep
	(*OutPoint)(nil),          // 2: TW.Nervos.Proto.OutPoint
	(*CellOutput)(nil),        // 3: TW.Nervos.Proto.CellOutput
	(*Script)(nil),            // 4: TW.Nervos.Proto.Script
	(*NativeTransfer)(nil),    // 5: TW.Nervos.Proto.NativeTransfer
	(*SudtTransfer)(nil),      // 6: TW.Nervos.Proto.SudtTransfer
	(*DaoDeposit)(nil),        // 7: TW.Nervos.Proto.DaoDeposit
	(*DaoWithdrawPhase1)(nil), // 8: TW.Nervos.Proto.DaoWithdrawPhase1
	(*DaoWithdrawPhase2)(nil), // 9: TW.Nervos.Proto.DaoWithdrawPhase2
	(*SigningInput)(nil),      // 10: TW.Nervos.Proto.SigningInput
	(*Cell)(nil),              // 11: TW.Nervos.Proto.Cell
	(*SigningOutput)(nil),     // 12: TW.Nervos.Proto.SigningOutput
	(common.SigningError)(0),  // 13: TW.Common.Proto.SigningError
}
var file_Nervos_proto_depIdxs = []int32{
	1,  // 0: TW.Nervos.Proto.TransactionPlan.cell_deps:type_name -> TW.Nervos.Proto.CellDep
	11, // 1: TW.Nervos.Proto.TransactionPlan.selected_cells:type_name -> TW.Nervos.Proto.Cell
	3,  // 2: TW.Nervos.Proto.TransactionPlan.outputs:type_name -> TW.Nervos.Proto.CellOutput
	13, // 3: TW.Nervos.Proto.TransactionPlan.error:type_name -> TW.Common.Proto.SigningError
	2,  // 4: TW.Nervos.Proto.CellDep.out_point:type_name -> TW.Nervos.Proto.OutPoint
	4,  // 5: TW.Nervos.Proto.CellOutput.lock:type_name -> TW.Nervos.Proto.Script
	4,  // 6: TW.Nervos.Proto.CellOutput.type:type_name -> TW.Nervos.Proto.Script
	11, // 7: TW.Nervos.Proto.DaoWithdrawPhase1.deposit_cell:type_name -> TW.Nervos.Proto.Cell
	11, // 8: TW.Nervos.Proto.DaoWithdrawPhase2.deposit_cell:type_name -> TW.Nervos.Proto.Cell
	11, // 9: TW.Nervos.Proto.DaoWithdrawPhase2.withdrawing_cell:type_name -> TW.Nervos.Proto.Cell
	11, // 10: TW.Nervos.Proto.SigningInput.cell:type_name -> TW.Nervos.Proto.Cell
	0,  // 11: TW.Nervos.Proto.SigningInput.plan:type_name -> TW.Nervos.Proto.TransactionPlan
	5,  // 12: TW.Nervos.Proto.SigningInput.native_transfer:type_name -> TW.Nervos.Proto.NativeTransfer
	6,  // 13: TW.Nervos.Proto.SigningInput.sudt_transfer:type_name -> TW.Nervos.Proto.SudtTransfer
	7,  // 14: TW.Nervos.Proto.SigningInput.dao_deposit:type_name -> TW.Nervos.Proto.DaoDeposit
	8,  // 15: TW.Nervos.Proto.SigningInput.dao_withdraw_phase1:type_name -> TW.Nervos.Proto.DaoWithdrawPhase1
	9,  // 16: TW.Nervos.Proto.SigningInput.dao_withdraw_phase2:type_name -> TW.Nervos.Proto.DaoWithdrawPhase2
	2,  // 17: TW.Nervos.Proto.Cell.out_point:type_name -> TW.Nervos.Proto.OutPoint
	4,  // 18: TW.Nervos.Proto.Cell.lock:type_name -> TW.Nervos.Proto.Script
	4,  // 19: TW.Nervos.Proto.Cell.type:type_name -> TW.Nervos.Proto.Script
	13, // 20: TW.Nervos.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_Nervos_proto_init() }
func file_Nervos_proto_init() {
	if File_Nervos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Nervos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SudtTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoWithdrawPhase1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoWithdrawPhase2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Nervos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Nervos_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SigningInput_NativeTransfer)(nil),
		(*SigningInput_SudtTransfer)(nil),
		(*SigningInput_DaoDeposit)(nil),
		(*SigningInput_DaoWithdrawPhase1)(nil),
		(*SigningInput_DaoWithdrawPhase2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Nervos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Nervos_proto_goTypes,
		DependencyIndexes: file_Nervos_proto_depIdxs,
		MessageInfos:      file_Nervos_proto_msgTypes,
	}.Build()
	File_Nervos_proto = out.File
	file_Nervos_proto_rawDesc = nil
	file_Nervos_proto_goTypes = nil
	file_Nervos_proto_depIdxs = nil
}
