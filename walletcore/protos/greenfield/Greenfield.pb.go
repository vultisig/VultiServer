// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: Greenfield.proto

package greenfield

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction broadcast mode
type BroadcastMode int32

const (
	BroadcastMode_SYNC  BroadcastMode = 0 // Wait for the tx to pass/fail CheckTx
	BroadcastMode_ASYNC BroadcastMode = 1 // Don't wait for pass/fail CheckTx; send and return tx immediately
)

// Enum value maps for BroadcastMode.
var (
	BroadcastMode_name = map[int32]string{
		0: "SYNC",
		1: "ASYNC",
	}
	BroadcastMode_value = map[string]int32{
		"SYNC":  0,
		"ASYNC": 1,
	}
)

func (x BroadcastMode) Enum() *BroadcastMode {
	p := new(BroadcastMode)
	*p = x
	return p
}

func (x BroadcastMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastMode) Descriptor() protoreflect.EnumDescriptor {
	return file_Greenfield_proto_enumTypes[0].Descriptor()
}

func (BroadcastMode) Type() protoreflect.EnumType {
	return &file_Greenfield_proto_enumTypes[0]
}

func (x BroadcastMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastMode.Descriptor instead.
func (BroadcastMode) EnumDescriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{0}
}

// Options for transaction encoding.
// Consider adding Json mode.
type EncodingMode int32

const (
	EncodingMode_Protobuf EncodingMode = 0 // Protobuf-serialized (binary)
)

// Enum value maps for EncodingMode.
var (
	EncodingMode_name = map[int32]string{
		0: "Protobuf",
	}
	EncodingMode_value = map[string]int32{
		"Protobuf": 0,
	}
)

func (x EncodingMode) Enum() *EncodingMode {
	p := new(EncodingMode)
	*p = x
	return p
}

func (x EncodingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_Greenfield_proto_enumTypes[1].Descriptor()
}

func (EncodingMode) Type() protoreflect.EnumType {
	return &file_Greenfield_proto_enumTypes[1]
}

func (x EncodingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingMode.Descriptor instead.
func (EncodingMode) EnumDescriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{1}
}

// Options for transaction signing.
// Consider adding Direct mode when it is supported.
type SigningMode int32

const (
	SigningMode_Eip712 SigningMode = 0
)

// Enum value maps for SigningMode.
var (
	SigningMode_name = map[int32]string{
		0: "Eip712",
	}
	SigningMode_value = map[string]int32{
		"Eip712": 0,
	}
)

func (x SigningMode) Enum() *SigningMode {
	p := new(SigningMode)
	*p = x
	return p
}

func (x SigningMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningMode) Descriptor() protoreflect.EnumDescriptor {
	return file_Greenfield_proto_enumTypes[2].Descriptor()
}

func (SigningMode) Type() protoreflect.EnumType {
	return &file_Greenfield_proto_enumTypes[2]
}

func (x SigningMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningMode.Descriptor instead.
func (SigningMode) EnumDescriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{2}
}

// A denomination and an amount
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the denomination
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// amount, number as string
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{0}
}

func (x *Amount) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Amount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Fee incl. gas
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee amount(s)
	Amounts []*Amount `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
	// Gas price
	Gas uint64 `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{1}
}

func (x *Fee) GetAmounts() []*Amount {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *Fee) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

// A transaction payload message
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The payload message
	//
	// Types that are assignable to MessageOneof:
	//
	//	*Message_SendCoinsMessage
	//	*Message_BridgeTransferOut_
	MessageOneof isMessage_MessageOneof `protobuf_oneof:"message_oneof"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{2}
}

func (m *Message) GetMessageOneof() isMessage_MessageOneof {
	if m != nil {
		return m.MessageOneof
	}
	return nil
}

func (x *Message) GetSendCoinsMessage() *Message_Send {
	if x, ok := x.GetMessageOneof().(*Message_SendCoinsMessage); ok {
		return x.SendCoinsMessage
	}
	return nil
}

func (x *Message) GetBridgeTransferOut() *Message_BridgeTransferOut {
	if x, ok := x.GetMessageOneof().(*Message_BridgeTransferOut_); ok {
		return x.BridgeTransferOut
	}
	return nil
}

type isMessage_MessageOneof interface {
	isMessage_MessageOneof()
}

type Message_SendCoinsMessage struct {
	SendCoinsMessage *Message_Send `protobuf:"bytes,1,opt,name=send_coins_message,json=sendCoinsMessage,proto3,oneof"`
}

type Message_BridgeTransferOut_ struct {
	BridgeTransferOut *Message_BridgeTransferOut `protobuf:"bytes,2,opt,name=bridge_transfer_out,json=bridgeTransferOut,proto3,oneof"`
}

func (*Message_SendCoinsMessage) isMessage_MessageOneof() {}

func (*Message_BridgeTransferOut_) isMessage_MessageOneof() {}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An encoding mode.
	EncodingMode EncodingMode `protobuf:"varint,1,opt,name=encoding_mode,json=encodingMode,proto3,enum=TW.Greenfield.Proto.EncodingMode" json:"encoding_mode,omitempty"`
	// A signing mode.
	SigningMode SigningMode `protobuf:"varint,2,opt,name=signing_mode,json=signingMode,proto3,enum=TW.Greenfield.Proto.SigningMode" json:"signing_mode,omitempty"`
	// Source account number
	AccountNumber uint64 `protobuf:"varint,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	// ETH Chain ID (string).
	// Must be set if `signing_mode` is Eip712.
	EthChainId string `protobuf:"bytes,4,opt,name=eth_chain_id,json=ethChainId,proto3" json:"eth_chain_id,omitempty"`
	// Cosmos Chain ID (string)
	CosmosChainId string `protobuf:"bytes,5,opt,name=cosmos_chain_id,json=cosmosChainId,proto3" json:"cosmos_chain_id,omitempty"`
	// Transaction fee
	Fee *Fee `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	// Optional memo
	Memo string `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	// Sequence number (account specific)
	Sequence uint64 `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Message payloads.
	Messages []*Message `protobuf:"bytes,10,rep,name=messages,proto3" json:"messages,omitempty"`
	// Broadcast mode (included in output, relevant when broadcasting)
	Mode      BroadcastMode `protobuf:"varint,11,opt,name=mode,proto3,enum=TW.Greenfield.Proto.BroadcastMode" json:"mode,omitempty"`
	PublicKey []byte        `protobuf:"bytes,12,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{3}
}

func (x *SigningInput) GetEncodingMode() EncodingMode {
	if x != nil {
		return x.EncodingMode
	}
	return EncodingMode_Protobuf
}

func (x *SigningInput) GetSigningMode() SigningMode {
	if x != nil {
		return x.SigningMode
	}
	return SigningMode_Eip712
}

func (x *SigningInput) GetAccountNumber() uint64 {
	if x != nil {
		return x.AccountNumber
	}
	return 0
}

func (x *SigningInput) GetEthChainId() string {
	if x != nil {
		return x.EthChainId
	}
	return ""
}

func (x *SigningInput) GetCosmosChainId() string {
	if x != nil {
		return x.CosmosChainId
	}
	return ""
}

func (x *SigningInput) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SigningInput) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SigningInput) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *SigningInput) GetMode() BroadcastMode {
	if x != nil {
		return x.Mode
	}
	return BroadcastMode_SYNC
}

func (x *SigningInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signature
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Signed transaction containing protobuf encoded, Base64-encoded form (Stargate case),
	// wrapped in a ready-to-broadcast json.
	Serialized string `protobuf:"bytes,2,opt,name=serialized,proto3" json:"serialized,omitempty"`
	// signatures array json string
	SignatureJson string `protobuf:"bytes,3,opt,name=signature_json,json=signatureJson,proto3" json:"signature_json,omitempty"`
	// error description
	ErrorMessage string              `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Error        common.SigningError `protobuf:"varint,5,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{4}
}

func (x *SigningOutput) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SigningOutput) GetSerialized() string {
	if x != nil {
		return x.Serialized
	}
	return ""
}

func (x *SigningOutput) GetSignatureJson() string {
	if x != nil {
		return x.SignatureJson
	}
	return ""
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

// cosmos-sdk/MsgSend
type Message_Send struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string    `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string    `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amounts     []*Amount `protobuf:"bytes,3,rep,name=amounts,proto3" json:"amounts,omitempty"`
	// Optional. Default `cosmos.bank.v1beta1.MsgSend`.
	TypePrefix string `protobuf:"bytes,4,opt,name=type_prefix,json=typePrefix,proto3" json:"type_prefix,omitempty"`
}

func (x *Message_Send) Reset() {
	*x = Message_Send{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Send) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Send) ProtoMessage() {}

func (x *Message_Send) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Send.ProtoReflect.Descriptor instead.
func (*Message_Send) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Message_Send) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Message_Send) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Message_Send) GetAmounts() []*Amount {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *Message_Send) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

// greenfield/MsgTransferOut
// Used to transfer BNB Greenfield to BSC blockchain.
type Message_BridgeTransferOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In most cases, `from_address` and `to_address` are equal.
	FromAddress string  `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string  `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amount      *Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional. Default `greenfield.bridge.MsgTransferOut`.
	TypePrefix string `protobuf:"bytes,4,opt,name=type_prefix,json=typePrefix,proto3" json:"type_prefix,omitempty"`
}

func (x *Message_BridgeTransferOut) Reset() {
	*x = Message_BridgeTransferOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Greenfield_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_BridgeTransferOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_BridgeTransferOut) ProtoMessage() {}

func (x *Message_BridgeTransferOut) ProtoReflect() protoreflect.Message {
	mi := &file_Greenfield_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_BridgeTransferOut.ProtoReflect.Descriptor instead.
func (*Message_BridgeTransferOut) Descriptor() ([]byte, []int) {
	return file_Greenfield_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Message_BridgeTransferOut) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *Message_BridgeTransferOut) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *Message_BridgeTransferOut) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Message_BridgeTransferOut) GetTypePrefix() string {
	if x != nil {
		return x.TypePrefix
	}
	return ""
}

var File_Greenfield_proto protoreflect.FileDescriptor

var file_Greenfield_proto_rawDesc = []byte{
	0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x54, 0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4e, 0x0a,
	0x03, 0x46, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x22, 0xa0, 0x04,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x13,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x57, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x11, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x1a, 0xa0,
	0x01, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x1a, 0xab, 0x01, 0x0a, 0x11, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x57, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42,
	0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x22, 0x9a, 0x04, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x54, 0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x54, 0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xce, 0x01,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x24,
	0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x01, 0x2a, 0x1c, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x10, 0x00, 0x2a, 0x19, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x69, 0x70, 0x37, 0x31, 0x32, 0x10, 0x00, 0x42, 0x17, 0x0a,
	0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Greenfield_proto_rawDescOnce sync.Once
	file_Greenfield_proto_rawDescData = file_Greenfield_proto_rawDesc
)

func file_Greenfield_proto_rawDescGZIP() []byte {
	file_Greenfield_proto_rawDescOnce.Do(func() {
		file_Greenfield_proto_rawDescData = protoimpl.X.CompressGZIP(file_Greenfield_proto_rawDescData)
	})
	return file_Greenfield_proto_rawDescData
}

var file_Greenfield_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Greenfield_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_Greenfield_proto_goTypes = []interface{}{
	(BroadcastMode)(0),                // 0: TW.Greenfield.Proto.BroadcastMode
	(EncodingMode)(0),                 // 1: TW.Greenfield.Proto.EncodingMode
	(SigningMode)(0),                  // 2: TW.Greenfield.Proto.SigningMode
	(*Amount)(nil),                    // 3: TW.Greenfield.Proto.Amount
	(*Fee)(nil),                       // 4: TW.Greenfield.Proto.Fee
	(*Message)(nil),                   // 5: TW.Greenfield.Proto.Message
	(*SigningInput)(nil),              // 6: TW.Greenfield.Proto.SigningInput
	(*SigningOutput)(nil),             // 7: TW.Greenfield.Proto.SigningOutput
	(*Message_Send)(nil),              // 8: TW.Greenfield.Proto.Message.Send
	(*Message_BridgeTransferOut)(nil), // 9: TW.Greenfield.Proto.Message.BridgeTransferOut
	(common.SigningError)(0),          // 10: TW.Common.Proto.SigningError
}
var file_Greenfield_proto_depIdxs = []int32{
	3,  // 0: TW.Greenfield.Proto.Fee.amounts:type_name -> TW.Greenfield.Proto.Amount
	8,  // 1: TW.Greenfield.Proto.Message.send_coins_message:type_name -> TW.Greenfield.Proto.Message.Send
	9,  // 2: TW.Greenfield.Proto.Message.bridge_transfer_out:type_name -> TW.Greenfield.Proto.Message.BridgeTransferOut
	1,  // 3: TW.Greenfield.Proto.SigningInput.encoding_mode:type_name -> TW.Greenfield.Proto.EncodingMode
	2,  // 4: TW.Greenfield.Proto.SigningInput.signing_mode:type_name -> TW.Greenfield.Proto.SigningMode
	4,  // 5: TW.Greenfield.Proto.SigningInput.fee:type_name -> TW.Greenfield.Proto.Fee
	5,  // 6: TW.Greenfield.Proto.SigningInput.messages:type_name -> TW.Greenfield.Proto.Message
	0,  // 7: TW.Greenfield.Proto.SigningInput.mode:type_name -> TW.Greenfield.Proto.BroadcastMode
	10, // 8: TW.Greenfield.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	3,  // 9: TW.Greenfield.Proto.Message.Send.amounts:type_name -> TW.Greenfield.Proto.Amount
	3,  // 10: TW.Greenfield.Proto.Message.BridgeTransferOut.amount:type_name -> TW.Greenfield.Proto.Amount
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_Greenfield_proto_init() }
func file_Greenfield_proto_init() {
	if File_Greenfield_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Greenfield_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Greenfield_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Greenfield_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Greenfield_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Greenfield_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Greenfield_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Send); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Greenfield_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_BridgeTransferOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Greenfield_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Message_SendCoinsMessage)(nil),
		(*Message_BridgeTransferOut_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Greenfield_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Greenfield_proto_goTypes,
		DependencyIndexes: file_Greenfield_proto_depIdxs,
		EnumInfos:         file_Greenfield_proto_enumTypes,
		MessageInfos:      file_Greenfield_proto_msgTypes,
	}.Build()
	File_Greenfield_proto = out.File
	file_Greenfield_proto_rawDesc = nil
	file_Greenfield_proto_goTypes = nil
	file_Greenfield_proto_depIdxs = nil
}
