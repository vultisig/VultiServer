// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.26.1
// source: TheOpenNetwork.proto

package theopennetwork

import (
	common "github.com/vultisig/vultisigner/walletcore/protos/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WalletVersion int32

const (
	WalletVersion_WALLET_V3_R1 WalletVersion = 0
	WalletVersion_WALLET_V3_R2 WalletVersion = 1
	WalletVersion_WALLET_V4_R2 WalletVersion = 2
	WalletVersion_WALLET_V5_R1 WalletVersion = 3
)

// Enum value maps for WalletVersion.
var (
	WalletVersion_name = map[int32]string{
		0: "WALLET_V3_R1",
		1: "WALLET_V3_R2",
		2: "WALLET_V4_R2",
		3: "WALLET_V5_R1",
	}
	WalletVersion_value = map[string]int32{
		"WALLET_V3_R1": 0,
		"WALLET_V3_R2": 1,
		"WALLET_V4_R2": 2,
		"WALLET_V5_R1": 3,
	}
)

func (x WalletVersion) Enum() *WalletVersion {
	p := new(WalletVersion)
	*p = x
	return p
}

func (x WalletVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_TheOpenNetwork_proto_enumTypes[0].Descriptor()
}

func (WalletVersion) Type() protoreflect.EnumType {
	return &file_TheOpenNetwork_proto_enumTypes[0]
}

func (x WalletVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletVersion.Descriptor instead.
func (WalletVersion) EnumDescriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{0}
}

type SendMode int32

const (
	SendMode_DEFAULT                          SendMode = 0
	SendMode_PAY_FEES_SEPARATELY              SendMode = 1
	SendMode_IGNORE_ACTION_PHASE_ERRORS       SendMode = 2
	SendMode_DESTROY_ON_ZERO_BALANCE          SendMode = 32
	SendMode_ATTACH_ALL_INBOUND_MESSAGE_VALUE SendMode = 64
	SendMode_ATTACH_ALL_CONTRACT_BALANCE      SendMode = 128
)

// Enum value maps for SendMode.
var (
	SendMode_name = map[int32]string{
		0:   "DEFAULT",
		1:   "PAY_FEES_SEPARATELY",
		2:   "IGNORE_ACTION_PHASE_ERRORS",
		32:  "DESTROY_ON_ZERO_BALANCE",
		64:  "ATTACH_ALL_INBOUND_MESSAGE_VALUE",
		128: "ATTACH_ALL_CONTRACT_BALANCE",
	}
	SendMode_value = map[string]int32{
		"DEFAULT":                          0,
		"PAY_FEES_SEPARATELY":              1,
		"IGNORE_ACTION_PHASE_ERRORS":       2,
		"DESTROY_ON_ZERO_BALANCE":          32,
		"ATTACH_ALL_INBOUND_MESSAGE_VALUE": 64,
		"ATTACH_ALL_CONTRACT_BALANCE":      128,
	}
)

func (x SendMode) Enum() *SendMode {
	p := new(SendMode)
	*p = x
	return p
}

func (x SendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_TheOpenNetwork_proto_enumTypes[1].Descriptor()
}

func (SendMode) Type() protoreflect.EnumType {
	return &file_TheOpenNetwork_proto_enumTypes[1]
}

func (x SendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMode.Descriptor instead.
func (SendMode) EnumDescriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{1}
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient address
	Dest string `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// Amount to send in nanotons
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Send mode (optional, 0 by default)
	// Learn more: https://ton.org/docs/develop/func/stdlib#send_raw_message
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// Transfer comment message (optional, empty by default)
	// Ignored if `custom_payload` is specified
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// If the address is bounceable
	Bounceable bool `protobuf:"varint,5,opt,name=bounceable,proto3" json:"bounceable,omitempty"`
	// One of the Transfer message payloads (optional).
	//
	// Types that are assignable to Payload:
	//
	//	*Transfer_JettonTransfer
	//	*Transfer_CustomPayload
	Payload isTransfer_Payload `protobuf_oneof:"payload"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TheOpenNetwork_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Transfer) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Transfer) GetBounceable() bool {
	if x != nil {
		return x.Bounceable
	}
	return false
}

func (m *Transfer) GetPayload() isTransfer_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Transfer) GetJettonTransfer() *JettonTransfer {
	if x, ok := x.GetPayload().(*Transfer_JettonTransfer); ok {
		return x.JettonTransfer
	}
	return nil
}

func (x *Transfer) GetCustomPayload() *CustomPayload {
	if x, ok := x.GetPayload().(*Transfer_CustomPayload); ok {
		return x.CustomPayload
	}
	return nil
}

type isTransfer_Payload interface {
	isTransfer_Payload()
}

type Transfer_JettonTransfer struct {
	// Jetton transfer payload.
	JettonTransfer *JettonTransfer `protobuf:"bytes,6,opt,name=jetton_transfer,json=jettonTransfer,proto3,oneof"`
}

type Transfer_CustomPayload struct {
	// TON transfer with custom stateInit and payload (contract call).
	CustomPayload *CustomPayload `protobuf:"bytes,7,opt,name=custom_payload,json=customPayload,proto3,oneof"`
}

func (*Transfer_JettonTransfer) isTransfer_Payload() {}

func (*Transfer_CustomPayload) isTransfer_Payload() {}

type JettonTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary request number. Default is 0. Optional field.
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Amount of transferred jettons in elementary integer units. The real value transferred is jetton_amount multiplied by ten to the power of token decimal precision
	JettonAmount uint64 `protobuf:"varint,2,opt,name=jetton_amount,json=jettonAmount,proto3" json:"jetton_amount,omitempty"`
	// Address of the new owner of the jettons.
	ToOwner string `protobuf:"bytes,3,opt,name=to_owner,json=toOwner,proto3" json:"to_owner,omitempty"`
	// Address where to send a response with confirmation of a successful transfer and the rest of the incoming message Toncoins. Usually the sender should get back their toncoins.
	ResponseAddress string `protobuf:"bytes,4,opt,name=response_address,json=responseAddress,proto3" json:"response_address,omitempty"`
	// Amount in nanotons to forward to recipient. Basically minimum amount - 1 nanoton should be used
	ForwardAmount uint64 `protobuf:"varint,5,opt,name=forward_amount,json=forwardAmount,proto3" json:"forward_amount,omitempty"`
}

func (x *JettonTransfer) Reset() {
	*x = JettonTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TheOpenNetwork_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JettonTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JettonTransfer) ProtoMessage() {}

func (x *JettonTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JettonTransfer.ProtoReflect.Descriptor instead.
func (*JettonTransfer) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{1}
}

func (x *JettonTransfer) GetQueryId() uint64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *JettonTransfer) GetJettonAmount() uint64 {
	if x != nil {
		return x.JettonAmount
	}
	return 0
}

func (x *JettonTransfer) GetToOwner() string {
	if x != nil {
		return x.ToOwner
	}
	return ""
}

func (x *JettonTransfer) GetResponseAddress() string {
	if x != nil {
		return x.ResponseAddress
	}
	return ""
}

func (x *JettonTransfer) GetForwardAmount() uint64 {
	if x != nil {
		return x.ForwardAmount
	}
	return 0
}

type CustomPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (string base64, optional): raw one-cell BoC encoded in Base64.
	// Can be used to deploy a smart contract.
	StateInit string `protobuf:"bytes,1,opt,name=state_init,json=stateInit,proto3" json:"state_init,omitempty"`
	// (string base64, optional): raw one-cell BoC encoded in Base64.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CustomPayload) Reset() {
	*x = CustomPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TheOpenNetwork_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPayload) ProtoMessage() {}

func (x *CustomPayload) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPayload.ProtoReflect.Descriptor instead.
func (*CustomPayload) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{2}
}

func (x *CustomPayload) GetStateInit() string {
	if x != nil {
		return x.StateInit
	}
	return ""
}

func (x *CustomPayload) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Public key of the signer (32 bytes). Used when transaction is going to be signed externally.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Up to 4 internal messages.
	Messages []*Transfer `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// Message counter (optional, 0 by default used for the first deploy)
	// This field is required, because we need to protect the smart contract against "replay attacks"
	// Learn more: https://ton.org/docs/develop/smart-contracts/guidelines/external-messages
	SequenceNumber uint32 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Expiration UNIX timestamp (optional, now() + 60 by default)
	ExpireAt uint32 `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// Wallet version
	WalletVersion WalletVersion `protobuf:"varint,6,opt,name=wallet_version,json=walletVersion,proto3,enum=TW.TheOpenNetwork.Proto.WalletVersion" json:"wallet_version,omitempty"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TheOpenNetwork_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{3}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SigningInput) GetMessages() []*Transfer {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *SigningInput) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *SigningInput) GetExpireAt() uint32 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *SigningInput) GetWalletVersion() WalletVersion {
	if x != nil {
		return x.WalletVersion
	}
	return WalletVersion_WALLET_V3_R1
}

// Transaction signing output.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed and base64 encoded BOC message
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// Transaction Cell hash
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// error code, 0 is ok, other codes will be treated as errors
	Error common.SigningError `protobuf:"varint,3,opt,name=error,proto3,enum=TW.Common.Proto.SigningError" json:"error,omitempty"`
	// error code description
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TheOpenNetwork_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_TheOpenNetwork_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_TheOpenNetwork_proto_rawDescGZIP(), []int{4}
}

func (x *SigningOutput) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *SigningOutput) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *SigningOutput) GetError() common.SigningError {
	if x != nil {
		return x.Error
	}
	return common.SigningError(0)
}

func (x *SigningOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_TheOpenNetwork_proto protoreflect.FileDescriptor

var file_TheOpenNetwork_proto_rawDesc = []byte{
	0x0a, 0x14, 0x54, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x54, 0x57, 0x2e, 0x54, 0x68, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x54, 0x57, 0x2e, 0x54, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x54, 0x57, 0x2e, 0x54, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x4a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x65, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6a, 0x65, 0x74, 0x74, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa2,
	0x02, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57, 0x2e, 0x54, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x54,
	0x57, 0x2e, 0x54, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x57, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x57, 0x0a,
	0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x33, 0x5f, 0x52, 0x31, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x33, 0x5f, 0x52, 0x32,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56, 0x34, 0x5f,
	0x52, 0x32, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x56,
	0x35, 0x5f, 0x52, 0x31, 0x10, 0x03, 0x2a, 0xb5, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x50,
	0x41, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x47, 0x4e,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x53,
	0x54, 0x52, 0x4f, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x20, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x40, 0x12, 0x20, 0x0a, 0x1b,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x80, 0x01, 0x42, 0x17,
	0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_TheOpenNetwork_proto_rawDescOnce sync.Once
	file_TheOpenNetwork_proto_rawDescData = file_TheOpenNetwork_proto_rawDesc
)

func file_TheOpenNetwork_proto_rawDescGZIP() []byte {
	file_TheOpenNetwork_proto_rawDescOnce.Do(func() {
		file_TheOpenNetwork_proto_rawDescData = protoimpl.X.CompressGZIP(file_TheOpenNetwork_proto_rawDescData)
	})
	return file_TheOpenNetwork_proto_rawDescData
}

var file_TheOpenNetwork_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_TheOpenNetwork_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_TheOpenNetwork_proto_goTypes = []interface{}{
	(WalletVersion)(0),       // 0: TW.TheOpenNetwork.Proto.WalletVersion
	(SendMode)(0),            // 1: TW.TheOpenNetwork.Proto.SendMode
	(*Transfer)(nil),         // 2: TW.TheOpenNetwork.Proto.Transfer
	(*JettonTransfer)(nil),   // 3: TW.TheOpenNetwork.Proto.JettonTransfer
	(*CustomPayload)(nil),    // 4: TW.TheOpenNetwork.Proto.CustomPayload
	(*SigningInput)(nil),     // 5: TW.TheOpenNetwork.Proto.SigningInput
	(*SigningOutput)(nil),    // 6: TW.TheOpenNetwork.Proto.SigningOutput
	(common.SigningError)(0), // 7: TW.Common.Proto.SigningError
}
var file_TheOpenNetwork_proto_depIdxs = []int32{
	3, // 0: TW.TheOpenNetwork.Proto.Transfer.jetton_transfer:type_name -> TW.TheOpenNetwork.Proto.JettonTransfer
	4, // 1: TW.TheOpenNetwork.Proto.Transfer.custom_payload:type_name -> TW.TheOpenNetwork.Proto.CustomPayload
	2, // 2: TW.TheOpenNetwork.Proto.SigningInput.messages:type_name -> TW.TheOpenNetwork.Proto.Transfer
	0, // 3: TW.TheOpenNetwork.Proto.SigningInput.wallet_version:type_name -> TW.TheOpenNetwork.Proto.WalletVersion
	7, // 4: TW.TheOpenNetwork.Proto.SigningOutput.error:type_name -> TW.Common.Proto.SigningError
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_TheOpenNetwork_proto_init() }
func file_TheOpenNetwork_proto_init() {
	if File_TheOpenNetwork_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_TheOpenNetwork_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TheOpenNetwork_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JettonTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TheOpenNetwork_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TheOpenNetwork_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TheOpenNetwork_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_TheOpenNetwork_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Transfer_JettonTransfer)(nil),
		(*Transfer_CustomPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TheOpenNetwork_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TheOpenNetwork_proto_goTypes,
		DependencyIndexes: file_TheOpenNetwork_proto_depIdxs,
		EnumInfos:         file_TheOpenNetwork_proto_enumTypes,
		MessageInfos:      file_TheOpenNetwork_proto_msgTypes,
	}.Build()
	File_TheOpenNetwork_proto = out.File
	file_TheOpenNetwork_proto_rawDesc = nil
	file_TheOpenNetwork_proto_goTypes = nil
	file_TheOpenNetwork_proto_depIdxs = nil
}
