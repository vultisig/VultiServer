/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: vultisig/vault/v1/vault_container.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace vultisig.vault.v1 {
    export class VaultContainer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: number;
            vault?: string;
            is_encrypted?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("vault" in data && data.vault != undefined) {
                    this.vault = data.vault;
                }
                if ("is_encrypted" in data && data.is_encrypted != undefined) {
                    this.is_encrypted = data.is_encrypted;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get vault() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set vault(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_encrypted() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_encrypted(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            version?: number;
            vault?: string;
            is_encrypted?: boolean;
        }): VaultContainer {
            const message = new VaultContainer({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.vault != null) {
                message.vault = data.vault;
            }
            if (data.is_encrypted != null) {
                message.is_encrypted = data.is_encrypted;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                vault?: string;
                is_encrypted?: boolean;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.vault != null) {
                data.vault = this.vault;
            }
            if (this.is_encrypted != null) {
                data.is_encrypted = this.is_encrypted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version != 0)
                writer.writeUint64(1, this.version);
            if (this.vault.length)
                writer.writeString(2, this.vault);
            if (this.is_encrypted != false)
                writer.writeBool(3, this.is_encrypted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VaultContainer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VaultContainer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readUint64();
                        break;
                    case 2:
                        message.vault = reader.readString();
                        break;
                    case 3:
                        message.is_encrypted = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VaultContainer {
            return VaultContainer.deserialize(bytes);
        }
    }
}
