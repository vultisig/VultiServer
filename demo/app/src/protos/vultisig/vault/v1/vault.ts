/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: vultisig/vault/v1/vault.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace vultisig.vault.v1 {
    export class Vault extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            public_key_ecdsa?: string;
            public_key_eddsa?: string;
            signers?: string[];
            created_at?: dependency_1.google.protobuf.Timestamp;
            hex_chain_code?: string;
            key_shares?: Vault.KeyShare[];
            local_party_id?: string;
            reshare_prefix?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("public_key_ecdsa" in data && data.public_key_ecdsa != undefined) {
                    this.public_key_ecdsa = data.public_key_ecdsa;
                }
                if ("public_key_eddsa" in data && data.public_key_eddsa != undefined) {
                    this.public_key_eddsa = data.public_key_eddsa;
                }
                if ("signers" in data && data.signers != undefined) {
                    this.signers = data.signers;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("hex_chain_code" in data && data.hex_chain_code != undefined) {
                    this.hex_chain_code = data.hex_chain_code;
                }
                if ("key_shares" in data && data.key_shares != undefined) {
                    this.key_shares = data.key_shares;
                }
                if ("local_party_id" in data && data.local_party_id != undefined) {
                    this.local_party_id = data.local_party_id;
                }
                if ("reshare_prefix" in data && data.reshare_prefix != undefined) {
                    this.reshare_prefix = data.reshare_prefix;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get public_key_ecdsa() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set public_key_ecdsa(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get public_key_eddsa() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set public_key_eddsa(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get signers() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set signers(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get hex_chain_code() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set hex_chain_code(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get key_shares() {
            return pb_1.Message.getRepeatedWrapperField(this, Vault.KeyShare, 7) as Vault.KeyShare[];
        }
        set key_shares(value: Vault.KeyShare[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get local_party_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set local_party_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get reshare_prefix() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set reshare_prefix(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            name?: string;
            public_key_ecdsa?: string;
            public_key_eddsa?: string;
            signers?: string[];
            created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            hex_chain_code?: string;
            key_shares?: ReturnType<typeof Vault.KeyShare.prototype.toObject>[];
            local_party_id?: string;
            reshare_prefix?: string;
        }): Vault {
            const message = new Vault({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.public_key_ecdsa != null) {
                message.public_key_ecdsa = data.public_key_ecdsa;
            }
            if (data.public_key_eddsa != null) {
                message.public_key_eddsa = data.public_key_eddsa;
            }
            if (data.signers != null) {
                message.signers = data.signers;
            }
            if (data.created_at != null) {
                message.created_at = dependency_1.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            if (data.hex_chain_code != null) {
                message.hex_chain_code = data.hex_chain_code;
            }
            if (data.key_shares != null) {
                message.key_shares = data.key_shares.map(item => Vault.KeyShare.fromObject(item));
            }
            if (data.local_party_id != null) {
                message.local_party_id = data.local_party_id;
            }
            if (data.reshare_prefix != null) {
                message.reshare_prefix = data.reshare_prefix;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                public_key_ecdsa?: string;
                public_key_eddsa?: string;
                signers?: string[];
                created_at?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                hex_chain_code?: string;
                key_shares?: ReturnType<typeof Vault.KeyShare.prototype.toObject>[];
                local_party_id?: string;
                reshare_prefix?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.public_key_ecdsa != null) {
                data.public_key_ecdsa = this.public_key_ecdsa;
            }
            if (this.public_key_eddsa != null) {
                data.public_key_eddsa = this.public_key_eddsa;
            }
            if (this.signers != null) {
                data.signers = this.signers;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.hex_chain_code != null) {
                data.hex_chain_code = this.hex_chain_code;
            }
            if (this.key_shares != null) {
                data.key_shares = this.key_shares.map((item: Vault.KeyShare) => item.toObject());
            }
            if (this.local_party_id != null) {
                data.local_party_id = this.local_party_id;
            }
            if (this.reshare_prefix != null) {
                data.reshare_prefix = this.reshare_prefix;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.public_key_ecdsa.length)
                writer.writeString(2, this.public_key_ecdsa);
            if (this.public_key_eddsa.length)
                writer.writeString(3, this.public_key_eddsa);
            if (this.signers.length)
                writer.writeRepeatedString(4, this.signers);
            if (this.has_created_at)
                writer.writeMessage(5, this.created_at, () => this.created_at.serialize(writer));
            if (this.hex_chain_code.length)
                writer.writeString(6, this.hex_chain_code);
            if (this.key_shares.length)
                writer.writeRepeatedMessage(7, this.key_shares, (item: Vault.KeyShare) => item.serialize(writer));
            if (this.local_party_id.length)
                writer.writeString(8, this.local_party_id);
            if (this.reshare_prefix.length)
                writer.writeString(9, this.reshare_prefix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vault {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vault();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.public_key_ecdsa = reader.readString();
                        break;
                    case 3:
                        message.public_key_eddsa = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.hex_chain_code = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.key_shares, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Vault.KeyShare.deserialize(reader), Vault.KeyShare));
                        break;
                    case 8:
                        message.local_party_id = reader.readString();
                        break;
                    case 9:
                        message.reshare_prefix = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vault {
            return Vault.deserialize(bytes);
        }
    }
    export namespace Vault {
        export class KeyShare extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                public_key?: string;
                keyshare?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("public_key" in data && data.public_key != undefined) {
                        this.public_key = data.public_key;
                    }
                    if ("keyshare" in data && data.keyshare != undefined) {
                        this.keyshare = data.keyshare;
                    }
                }
            }
            get public_key() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set public_key(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get keyshare() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set keyshare(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                public_key?: string;
                keyshare?: string;
            }): KeyShare {
                const message = new KeyShare({});
                if (data.public_key != null) {
                    message.public_key = data.public_key;
                }
                if (data.keyshare != null) {
                    message.keyshare = data.keyshare;
                }
                return message;
            }
            toObject() {
                const data: {
                    public_key?: string;
                    keyshare?: string;
                } = {};
                if (this.public_key != null) {
                    data.public_key = this.public_key;
                }
                if (this.keyshare != null) {
                    data.keyshare = this.keyshare;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.public_key.length)
                    writer.writeString(1, this.public_key);
                if (this.keyshare.length)
                    writer.writeString(2, this.keyshare);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyShare {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyShare();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.public_key = reader.readString();
                            break;
                        case 2:
                            message.keyshare = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): KeyShare {
                return KeyShare.deserialize(bytes);
            }
        }
    }
}
