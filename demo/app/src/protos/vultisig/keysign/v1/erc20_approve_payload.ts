/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: vultisig/keysign/v1/erc20_approve_payload.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace vultisig.keysign.v1 {
    export class Erc20ApprovePayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: string;
            spender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("spender" in data && data.spender != undefined) {
                    this.spender = data.spender;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get spender() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set spender(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            amount?: string;
            spender?: string;
        }): Erc20ApprovePayload {
            const message = new Erc20ApprovePayload({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.spender != null) {
                message.spender = data.spender;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: string;
                spender?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.spender != null) {
                data.spender = this.spender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount.length)
                writer.writeString(1, this.amount);
            if (this.spender.length)
                writer.writeString(2, this.spender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Erc20ApprovePayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Erc20ApprovePayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readString();
                        break;
                    case 2:
                        message.spender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Erc20ApprovePayload {
            return Erc20ApprovePayload.deserialize(bytes);
        }
    }
}
