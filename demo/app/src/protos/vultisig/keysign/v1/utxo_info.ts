/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: vultisig/keysign/v1/utxo_info.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace vultisig.keysign.v1 {
    export class UtxoInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hash?: string;
            amount?: number;
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            hash?: string;
            amount?: number;
            index?: number;
        }): UtxoInfo {
            const message = new UtxoInfo({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: string;
                amount?: number;
                index?: number;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeString(1, this.hash);
            if (this.amount != 0)
                writer.writeInt64(2, this.amount);
            if (this.index != 0)
                writer.writeUint32(3, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UtxoInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UtxoInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readInt64();
                        break;
                    case 3:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UtxoInfo {
            return UtxoInfo.deserialize(bytes);
        }
    }
}
