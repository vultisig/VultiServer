/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: vultisig/keysign/v1/coin.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace vultisig.keysign.v1 {
    export class Coin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chain?: string;
            ticker?: string;
            address?: string;
            contract_address?: string;
            decimals?: number;
            price_provider_id?: string;
            is_native_token?: boolean;
            hex_public_key?: string;
            logo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chain" in data && data.chain != undefined) {
                    this.chain = data.chain;
                }
                if ("ticker" in data && data.ticker != undefined) {
                    this.ticker = data.ticker;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("decimals" in data && data.decimals != undefined) {
                    this.decimals = data.decimals;
                }
                if ("price_provider_id" in data && data.price_provider_id != undefined) {
                    this.price_provider_id = data.price_provider_id;
                }
                if ("is_native_token" in data && data.is_native_token != undefined) {
                    this.is_native_token = data.is_native_token;
                }
                if ("hex_public_key" in data && data.hex_public_key != undefined) {
                    this.hex_public_key = data.hex_public_key;
                }
                if ("logo" in data && data.logo != undefined) {
                    this.logo = data.logo;
                }
            }
        }
        get chain() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set chain(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticker() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ticker(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get decimals() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set decimals(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get price_provider_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set price_provider_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get is_native_token() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set is_native_token(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get hex_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set hex_public_key(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get logo() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set logo(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            chain?: string;
            ticker?: string;
            address?: string;
            contract_address?: string;
            decimals?: number;
            price_provider_id?: string;
            is_native_token?: boolean;
            hex_public_key?: string;
            logo?: string;
        }): Coin {
            const message = new Coin({});
            if (data.chain != null) {
                message.chain = data.chain;
            }
            if (data.ticker != null) {
                message.ticker = data.ticker;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.decimals != null) {
                message.decimals = data.decimals;
            }
            if (data.price_provider_id != null) {
                message.price_provider_id = data.price_provider_id;
            }
            if (data.is_native_token != null) {
                message.is_native_token = data.is_native_token;
            }
            if (data.hex_public_key != null) {
                message.hex_public_key = data.hex_public_key;
            }
            if (data.logo != null) {
                message.logo = data.logo;
            }
            return message;
        }
        toObject() {
            const data: {
                chain?: string;
                ticker?: string;
                address?: string;
                contract_address?: string;
                decimals?: number;
                price_provider_id?: string;
                is_native_token?: boolean;
                hex_public_key?: string;
                logo?: string;
            } = {};
            if (this.chain != null) {
                data.chain = this.chain;
            }
            if (this.ticker != null) {
                data.ticker = this.ticker;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.decimals != null) {
                data.decimals = this.decimals;
            }
            if (this.price_provider_id != null) {
                data.price_provider_id = this.price_provider_id;
            }
            if (this.is_native_token != null) {
                data.is_native_token = this.is_native_token;
            }
            if (this.hex_public_key != null) {
                data.hex_public_key = this.hex_public_key;
            }
            if (this.logo != null) {
                data.logo = this.logo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chain.length)
                writer.writeString(1, this.chain);
            if (this.ticker.length)
                writer.writeString(2, this.ticker);
            if (this.address.length)
                writer.writeString(3, this.address);
            if (this.contract_address.length)
                writer.writeString(4, this.contract_address);
            if (this.decimals != 0)
                writer.writeInt32(5, this.decimals);
            if (this.price_provider_id.length)
                writer.writeString(6, this.price_provider_id);
            if (this.is_native_token != false)
                writer.writeBool(7, this.is_native_token);
            if (this.hex_public_key.length)
                writer.writeString(8, this.hex_public_key);
            if (this.logo.length)
                writer.writeString(9, this.logo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Coin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Coin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chain = reader.readString();
                        break;
                    case 2:
                        message.ticker = reader.readString();
                        break;
                    case 3:
                        message.address = reader.readString();
                        break;
                    case 4:
                        message.contract_address = reader.readString();
                        break;
                    case 5:
                        message.decimals = reader.readInt32();
                        break;
                    case 6:
                        message.price_provider_id = reader.readString();
                        break;
                    case 7:
                        message.is_native_token = reader.readBool();
                        break;
                    case 8:
                        message.hex_public_key = reader.readString();
                        break;
                    case 9:
                        message.logo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Coin {
            return Coin.deserialize(bytes);
        }
    }
}
