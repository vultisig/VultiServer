/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: vultisig/keygen/v1/reshare_message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace vultisig.keygen.v1 {
    export class ReshareMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            hex_chain_code?: string;
            service_name?: string;
            public_key_ecdsa?: string;
            old_parties?: string[];
            encryption_key_hex?: string;
            use_vultisig_relay?: boolean;
            old_reshare_prefix?: string;
            vault_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("hex_chain_code" in data && data.hex_chain_code != undefined) {
                    this.hex_chain_code = data.hex_chain_code;
                }
                if ("service_name" in data && data.service_name != undefined) {
                    this.service_name = data.service_name;
                }
                if ("public_key_ecdsa" in data && data.public_key_ecdsa != undefined) {
                    this.public_key_ecdsa = data.public_key_ecdsa;
                }
                if ("old_parties" in data && data.old_parties != undefined) {
                    this.old_parties = data.old_parties;
                }
                if ("encryption_key_hex" in data && data.encryption_key_hex != undefined) {
                    this.encryption_key_hex = data.encryption_key_hex;
                }
                if ("use_vultisig_relay" in data && data.use_vultisig_relay != undefined) {
                    this.use_vultisig_relay = data.use_vultisig_relay;
                }
                if ("old_reshare_prefix" in data && data.old_reshare_prefix != undefined) {
                    this.old_reshare_prefix = data.old_reshare_prefix;
                }
                if ("vault_name" in data && data.vault_name != undefined) {
                    this.vault_name = data.vault_name;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get hex_chain_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set hex_chain_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set service_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get public_key_ecdsa() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set public_key_ecdsa(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get old_parties() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set old_parties(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get encryption_key_hex() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set encryption_key_hex(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get use_vultisig_relay() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set use_vultisig_relay(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get old_reshare_prefix() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set old_reshare_prefix(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get vault_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set vault_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            session_id?: string;
            hex_chain_code?: string;
            service_name?: string;
            public_key_ecdsa?: string;
            old_parties?: string[];
            encryption_key_hex?: string;
            use_vultisig_relay?: boolean;
            old_reshare_prefix?: string;
            vault_name?: string;
        }): ReshareMessage {
            const message = new ReshareMessage({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.hex_chain_code != null) {
                message.hex_chain_code = data.hex_chain_code;
            }
            if (data.service_name != null) {
                message.service_name = data.service_name;
            }
            if (data.public_key_ecdsa != null) {
                message.public_key_ecdsa = data.public_key_ecdsa;
            }
            if (data.old_parties != null) {
                message.old_parties = data.old_parties;
            }
            if (data.encryption_key_hex != null) {
                message.encryption_key_hex = data.encryption_key_hex;
            }
            if (data.use_vultisig_relay != null) {
                message.use_vultisig_relay = data.use_vultisig_relay;
            }
            if (data.old_reshare_prefix != null) {
                message.old_reshare_prefix = data.old_reshare_prefix;
            }
            if (data.vault_name != null) {
                message.vault_name = data.vault_name;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                hex_chain_code?: string;
                service_name?: string;
                public_key_ecdsa?: string;
                old_parties?: string[];
                encryption_key_hex?: string;
                use_vultisig_relay?: boolean;
                old_reshare_prefix?: string;
                vault_name?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.hex_chain_code != null) {
                data.hex_chain_code = this.hex_chain_code;
            }
            if (this.service_name != null) {
                data.service_name = this.service_name;
            }
            if (this.public_key_ecdsa != null) {
                data.public_key_ecdsa = this.public_key_ecdsa;
            }
            if (this.old_parties != null) {
                data.old_parties = this.old_parties;
            }
            if (this.encryption_key_hex != null) {
                data.encryption_key_hex = this.encryption_key_hex;
            }
            if (this.use_vultisig_relay != null) {
                data.use_vultisig_relay = this.use_vultisig_relay;
            }
            if (this.old_reshare_prefix != null) {
                data.old_reshare_prefix = this.old_reshare_prefix;
            }
            if (this.vault_name != null) {
                data.vault_name = this.vault_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.hex_chain_code.length)
                writer.writeString(2, this.hex_chain_code);
            if (this.service_name.length)
                writer.writeString(3, this.service_name);
            if (this.public_key_ecdsa.length)
                writer.writeString(4, this.public_key_ecdsa);
            if (this.old_parties.length)
                writer.writeRepeatedString(5, this.old_parties);
            if (this.encryption_key_hex.length)
                writer.writeString(6, this.encryption_key_hex);
            if (this.use_vultisig_relay != false)
                writer.writeBool(7, this.use_vultisig_relay);
            if (this.old_reshare_prefix.length)
                writer.writeString(8, this.old_reshare_prefix);
            if (this.vault_name.length)
                writer.writeString(9, this.vault_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReshareMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReshareMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.hex_chain_code = reader.readString();
                        break;
                    case 3:
                        message.service_name = reader.readString();
                        break;
                    case 4:
                        message.public_key_ecdsa = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.encryption_key_hex = reader.readString();
                        break;
                    case 7:
                        message.use_vultisig_relay = reader.readBool();
                        break;
                    case 8:
                        message.old_reshare_prefix = reader.readString();
                        break;
                    case 9:
                        message.vault_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReshareMessage {
            return ReshareMessage.deserialize(bytes);
        }
    }
}
